using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using TSG = Tekla.Structures.Geometry3d;
using TSD = Tekla.Structures.Drawing;
using TSM = Tekla.Structures.Model;
using Tekla.Structures.Model.UI;
using Tekla.Structures.Catalogs;
using TSS = Tekla.Structures.Solid;
using System.Net.NetworkInformation;
using System.Net;
using Tekla.Structures;
using Tekla.Structures.Model.Operations;
using Tekla.Structures.ObjectPropertiesLibrary;
using System.Diagnostics;
using Tekla.Structures.Drawing;
using ZstdSharp.Unsafe;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.Window;
using Tekla.Structures.DrawingInternal;
using MySqlX.XDevAPI.Common;
using Org.BouncyCastle.Asn1.TeleTrust;
using System.IO;
using Tekla.Structures.Model;
using static BEAM_DRAWING_AUTOMATIONTOOL.frmdrgeditor;
using RenderData;
using Tekla.Structures.Filtering.Categories;
using Tekla.Structures.Filtering;
//using Security;



namespace BEAM_DRAWING_AUTOMATIONTOOL
{
    public partial class frmdrgeditor : Form
    {

        public static string skApplicationName = "BEAM DRAWING AUTOMATIONTOOL";
        public static string skApplicationVersion = "2503.10";
        //Control names changed
        //public static string skApplicationVersion = "2503.10";
        //User Option values stored and loaded
        //Log added to cross check the performance for each drawings.
        //public static string skApplicationVersion = "2501.09";
        //Control name modified for understanding
        //Log added
        //
        //KT Provided by Vinoth - 2501.08

        public static bool debugflag = false;
        public static int debugcount = 1;
        //public static string logfile = skWinLib.sklocalpath + skTSLib.SKVersion + "//" + skApplicationName + "_" + skApplicationVersion + "_" + skWinLib.systemname + "_" + skWinLib.username + "_" + DateTime.Now.ToString("dd_mmm_yyyy") + ".vgml";
        public static string msgCaption = "";
        public static Tekla.Structures.Model.Model MyModel;
        public int proct = 0;
        public int updct = 0;
        public int selct = 0;
        public int errct = 0;


        public frmdrgeditor()
        {
            //2409.18
            try
            {
                // Set the debugflag based on current user registry 
                //debugflag = skWinLib.DebugFlag(skApplicationName);
                //skWinLib.username = "SKS158";
                //skWinLib.accesslog(skApplicationName, skApplicationVersion, "Before-InitializeComponent", "");
                msgCaption = skApplicationName + " Ver. " + skApplicationVersion;
                InitializeComponent();
                //skWinLib.accesslog(skApplicationName, skApplicationVersion, "After-InitializeComponent", "");

                //Validation of L & T Drive
                //skWinLib.accesslog(skApplicationName, skApplicationVersion, "Validate Esskay Mapping", "");
                //bool IsEsskayMappingValid = skWinLib.IsDrivesMapped();
                //if (IsEsskayMappingValid == false)
                //{
                //    skWinLib.accesslog(skApplicationName, skApplicationVersion, "Esskay Mapping (L: & T: Drive Failed", "Esskay Mapping (L: & T: Drive Failed [ " + skWinLib.username + " / " + skWinLib.systemname + "  ].", "", "", "");
                //    MessageBox.Show("Esskay Mapping (L: & T: Drive Failed", msgCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                //    System.Environment.Exit(360);
                //}


                //Validation for Esskay Domain User
                //skWinLib.accesslog(skApplicationName, skApplicationVersion, "Validate Esskay Domain User", "YearlyValidation - MMM/dd/yy" + DateTime.Now.ToString("MMM") + "/" + DateTime.Now.ToString("dd") + "/" + DateTime.Now.ToString("yy"));
                //skWinLib.Esskay_Tool_Validation(skApplicationName, skApplicationVersion);

                //string mysysid = skWinLib.systemname;
                //string myuser = skWinLib.username;

                //Validation for Esskay EmpData
                //skWinLib.MyEmployeeData = skWinLib.GetEmployeeData("SKS218");
                //skWinLib.MyEmployeeData = skWinLib.GetEmployeeData(skWinLib.username);
                //if (skWinLib.MyEmployeeData == null || skWinLib.MyEmployeeData.Count == 0)
                //{
                //    skWinLib.accesslog(skApplicationName, skApplicationVersion, "Validation for Esskay User Failed", "Validation for Esskay User Failed [ " + skWinLib.TSVersion + " ].", "", "", "");
                //    MessageBox.Show("Validation for Esskay User Failed", msgCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                //    System.Environment.Exit(360);
                //}
                //else
                //    lblsbar2.Text = skWinLib.MyEmployeeData[1] + "/" + skWinLib.MyEmployeeData[2];


                //Establish connection with Tekla Model
                MyModel = skTSLib.ModelAccess.ConnectToModel();
                if (MyModel == null)
                {
                    //skWinLib.accesslog(skApplicationName, skApplicationVersion, "ConnectToModel-Failed", "Could not establish connection with Tekla [ " + skTSLib.SKVersion + " ].", "", "", "");
                    //MessageBox.Show("Could not establish connection with Tekla [ " + skTSLib.SKVersion + " ].\n\nEnsure Tekla [ " + skTSLib.SKVersion + " ] model is open,if still issue's contact support team.", msgCaption, MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    System.Environment.Exit(360);
                }
                else
                {
                    //skTSLib.setStartup(skApplicationName, skApplicationVersion, "ConnectToModel-Success", "");
                    //msgCaption = skApplicationName + " Ver. " + skApplicationVersion + " [ " + skTSLib.SKVersion + " / " + skTSLib.ModelName + " ] ";
                    this.Text = msgCaption;

                    //lblsbar2.Text = skWinLib.username;


                    TeklaStructures.Connect();
                }
            }

            catch (Exception ex)
            {
                //skWinLib.accesslog(skApplicationName, skApplicationVersion, "Error@InitializeComponent ", "Error@InitializeComponent\n\nOriginal error: " + ex.Message + "\n" + ex.Source + "\n" + ex.StackTrace);
                MessageBox.Show("Error@InitializeComponent\n\nOriginal error: " + ex.Message + "\n" + ex.Source + "\n" + ex.StackTrace, msgCaption, MessageBoxButtons.OK, MessageBoxIcon.Stop);
                System.Environment.Exit(360);
            }
        }
        private void Form1_Load_1(object sender, EventArgs e)
        {
            //Ipcheck mysec = new Ipcheck();
            //if (!mysec.domaincheck())
            //{
            //    MessageBox.Show("Please contact Tekla admin");
            //    this.BeginInvoke(new MethodInvoker(this.Close));
            //}
            //GetLastUserEntry();
            //skWinLib.GetControlValues(this.Controls, skApplicationName, true);
            //this.Text = skWinLib.UpdateHeaderInformation(skApplicationName, skApplicationVersion, MyModel.GetInfo().ModelName, 1, 0, 0, 0, 0);
        }
       
        private void button1_Click(object sender, EventArgs e)
        {
            //skWinLib.StoreControlValues(this.Controls, skApplicationName);
           // DateTime s_tm = skTSLib.setStartup(skApplicationName, skApplicationVersion, "Create_BeamDrawings", "", "Please Wait, Creating drawings...", "", lblsbar1, lblsbar2);
            string usermsg = Create_BeamDrawings();
            //skTSLib.setCompletion(skApplicationName, skApplicationVersion, "Complete", "", usermsg, "", lblsbar1, lblsbar2, s_tm);
        }

        private string Create_BeamDrawings()
        {
            //clear rows
            dgvlog.Rows.Clear();
            string remark = string.Empty;
            List<string> drglog = new List<string>();
            {
                proct = 0;
                updct = 0;
                selct = 0;
                errct = 0;


                bool tekla_open = TeklaStructures.Connect();

                if (tekla_open == true)
                {

                    DateTime s_tm = new DateTime();
                    TSM.Model mymodel = new TSM.Model();
                    Type type_for_bolt = typeof(TSD.Bolt);
                    Type type_for_part = typeof(TSD.Part);
                    TSD.DrawingHandler my_handler = new TSD.DrawingHandler();
                    mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                    TSM.UI.Picker picker_for_beam = new TSM.UI.Picker();
                    TSM.ModelObjectEnumerator enum_for_beam_pick = null;
                    enum_for_beam_pick = picker_for_beam.PickObjects(TSM.UI.Picker.PickObjectsEnum.PICK_N_OBJECTS, "PICK ALL BEAMS");
                    selct = enum_for_beam_pick.GetSize();
                    pbar.Maximum = selct + 4;
                    pbar.Value = 0;
                    pbar.Visible = true;


                    //Check for already drawing created
                    List<string> SKDrawings = new List<string>();


                    while (enum_for_beam_pick.MoveNext())
                    {
                        pbar.Value = pbar.Value + 1;
                        pbar.Refresh();

                        string assembly_pos = string.Empty;
                        string DRG_NUMBER = string.Empty;
                        string DRG_REMARK = string.Empty;
                        DateTime start_assy_tm = DateTime.Now;
                        TimeSpan span = new TimeSpan();
                        try
                        {   
                            TSM.ModelObject mysingleobject = enum_for_beam_pick.Current;
                            TSM.Assembly ATTRIBUTE_CHECK_LENGTH = mysingleobject as TSM.Assembly;

                            ATTRIBUTE_CHECK_LENGTH.GetReportProperty("ASSEMBLY_POS", ref assembly_pos);

                            bool check_for_numbering = assembly_pos.Contains('?');
                            if (check_for_numbering == false)
                            {
                                if (SKDrawings.Contains(assembly_pos.ToUpper()) == false)
                                {

                                    s_tm = DateTime.Now;
                                    TSM.Beam ATTRIBUTE_BEAM_LENGTH_CHECK = ATTRIBUTE_CHECK_LENGTH.GetMainPart() as TSM.Beam;
                                    double LENGTH = 0;
                                    mysingleobject.GetReportProperty("LENGTH", ref LENGTH);
                                    TSD.AssemblyDrawing beam_assembly_drg;
                                    TSM.Part main_part;
                                    TSM.Assembly ASSEMBLY;
                                    double DIM_DIST;
                                    double ACTUAL_DIST;
                                    double output;
                                    string BOTTOM_VIEW;
                                    string TOP_VIEW;
                                    string BOTTOM_VIEW_TOCREATE;
                                    string TOP_VIEW_TOCREATE;
                                    string TOP_VIEW_needed;
                                    TSD.StraightDimension overall_dim;
                                    ////////////////////////////////////////////////////deleting dimension and getting required information using function//////////////////////////////////////////////////////
                                    string file_path = mymodel.GetInfo().ModelPath;
                                    TeklaStructuresFiles files = new TeklaStructuresFiles(file_path);
                                    //files.PropertyFileDirectories.RemoveAll(x => !x.Contains(file_path));

                                    //files.PropertyFileDirectories.RemoveAll(x => !x.Contains("X:"));
                                    //files.PropertyFileDirectories.RemoveAll(x => !x.Contains("D:\\TESTING\\18-068-00_Reel Cinemas_STEFFY"));

                                    List<string> all = files.GetMultiDirectoryFileList("ad", false);
                                    List<string> drg_att_list = new List<string>();
                                    List<string> D_ATT1 = new List<string>();


                                    if (chka1.Checked == true)
                                    {

                                        drg_att_list = all.Where(X => X.Contains("VBR_BEAM_A1")).ToList();
                                        D_ATT1 = all.Where(X => X.Contains("SK_BEAM_A1")).ToList();

                                    }
                                    else if (chka2.Checked == true)
                                    {
                                        drg_att_list = all.Where(X => X.Contains("VBR_BEAM_A2")).ToList();
                                        D_ATT1 = all.Where(X => X.Contains("SK_BEAM_A2")).ToList();
                                    }

                                    else if (chka3.Checked == true)
                                    {

                                        drg_att_list = all.Where(X => X.Contains("VBR_BEAM_A3")).ToList();
                                        D_ATT1 = all.Where(X => X.Contains("SK_BEAM_A3")).ToList();

                                    }
                                    else if (chka0.Checked == true)
                                    {

                                        drg_att_list = all.Where(X => X.Contains("VBR_BEAM_A0")).ToList();
                                        D_ATT1 = all.Where(X => X.Contains("SK_BEAM_A0")).ToList();

                                    }
                                    else
                                    {

                                        drg_att_list = all.Where(X => X.Contains("VBR_BEAM")).ToList();
                                        D_ATT1 = all.Where(X => X.Contains("SK_BEAM")).ToList();
                                    }
                                    drg_att_list.Sort();
                                    D_ATT1.Sort();
                                    D_ATT1.Reverse();
                                    string drg_att = "";

                                    List<string> REQ = new List<string>();
                                    drg_att_list.Reverse();

                                    mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(ATTRIBUTE_BEAM_LENGTH_CHECK.GetCoordinateSystem()));

                                    TSG.Matrix VIEW_MATRIX = TSG.MatrixFactory.ToCoordinateSystem(ATTRIBUTE_BEAM_LENGTH_CHECK.GetCoordinateSystem());
                                    List<section_loc_with_parts> list = new List<section_loc_with_parts>();
                                    List<section_loc_with_parts> list_section_flange = new List<section_loc_with_parts>();
                                    List<section_loc_with_parts> list_section_flange_duplicate = new List<section_loc_with_parts>();
                                    List<TSM.Part> list_of_parts_for_bottom_view_mark_retain = new List<TSM.Part>();
                                    List<Guid> list_of_part_at_end_in_top_view = new List<Guid>();
                                    List<TSD.RadiusDimension> list_of_radius = new List<TSD.RadiusDimension>();

                                    List<req_attribute> required_attribute = new List<req_attribute>();

                                    TSG.Point start_pt_for_section_view_aling = new TSG.Point();


                                    #region Module-1


                                    Console.WriteLine("DRG_NUMBER.....>" + assembly_pos);


                                    Drawing_create_and_delete_all_dimensions_except_assembly_dim_sheet_check(mymodel, mysingleobject, drg_att_list, out beam_assembly_drg, out main_part, out output, out ASSEMBLY, out overall_dim, out DIM_DIST, out ACTUAL_DIST, out list, out required_attribute);

                                    double SCALE = 0;
                                    double MINI_LEN = 0;



                                    bool result_for_view_out;
                                    for (int att = 0; att < required_attribute.Count; att++)
                                    {

                                        List<TSD.View> bottom_view_list = new List<TSD.View>();
                                        List<TSD.View> bottom_view_FLANGE_CUT_LIST = new List<TSD.View>();
                                        List<TSD.View> TOP_view_FLANGE_CUT_LIST = new List<TSD.View>();
                                        //var myobj = required_attribute[att].req_att;
                                        if (required_attribute[att].req_att == "true")
                                        {





                                            if (required_attribute[att].attribute.Equals("VBR_BEAM_A3"))
                                            {
                                                drg_att = "SK_BEAM_A3";
                                            }
                                            else if (required_attribute[att].attribute.Equals("VBR_BEAM_A2"))
                                            {
                                                drg_att = "SK_BEAM_A2";
                                            }
                                            else if (required_attribute[att].attribute.Equals("VBR_BEAM_A1"))
                                            {
                                                drg_att = "SK_BEAM_A1";
                                            }
                                            else
                                            {
                                                drg_att = D_ATT1[0];

                                            }


                                            if ((txtscale.Enabled == true) && (txtminlen.Enabled == true))
                                            {
                                                SCALE = Convert.ToDouble(txtscale.Text);
                                                MINI_LEN = Convert.ToDouble(txtminlen.Text);

                                            }
                                            else if ((txtscale.Enabled == true) && (txtminlen.Enabled == false))
                                            {
                                                SCALE = Convert.ToDouble(txtscale.Text);
                                                MINI_LEN = required_attribute[att].min_length_req;

                                            }
                                            else if ((txtscale.Enabled == false) && (txtminlen.Enabled == true))
                                            {
                                                SCALE = required_attribute[att].scale_req;
                                                MINI_LEN = Convert.ToDouble(txtminlen.Text);

                                            }
                                            else
                                            {
                                                SCALE = required_attribute[att].scale_req;
                                                MINI_LEN = required_attribute[att].min_length_req;
                                            }

                                            #endregion


                                            #region Module-2
                                            //SCALE = 8;
                                            //MINI_LEN = 130;
                                            TSD.StraightDimension OVERALL_DIMENSION = null;
                                            Stopwatch SECTION_CREATION = new Stopwatch();
                                            SECTION_CREATION.Start();
                                            Drawing_create_and_delete_all_dimensions_except_assembly_dim(mymodel, mysingleobject, drg_att, out beam_assembly_drg, out main_part, out output, out ASSEMBLY, out overall_dim, out DIM_DIST, out ACTUAL_DIST, out list, SCALE, MINI_LEN, out list_section_flange, out list_section_flange_duplicate, out list_of_parts_for_bottom_view_mark_retain, out list_of_part_at_end_in_top_view, out OVERALL_DIMENSION, out list_of_radius);
                                            SECTION_CREATION.Stop();
                                            #endregion
                                            double mainpartlength = get_report_properties_double(main_part, "LENGTH");
                                            string profile_type = "";
                                            main_part.GetReportProperty("PROFILE_TYPE", ref profile_type);

                                            TSG.Point startpoint = (main_part as TSM.Beam).StartPoint;
                                            TSG.Point endpoint = (main_part as TSM.Beam).EndPoint;
                                            double difference_z = (Convert.ToInt64(startpoint.Z) - Convert.ToInt64(endpoint.Z));
                                            List<TSM.Part> list_of_secondaries1 = new List<TSM.Part>();
                                            foreach (TSM.Part part in ASSEMBLY.GetSecondaries())
                                            {
                                                list_of_secondaries1.Add(part);
                                            }







                                            ////////////////////////////////////////////////////GETTING CATALOG VALUES OF MAINPART////////////////////////////////////////////////////////////////////////           
                                            ArrayList MAINPART_PROFILE_VALUES = Getcatalog_values(main_part);
                                            ////////////////////////////////////////////////////CHECKING FOR BOTTOM VIEW CREATION ////////////////////////////////////////////////////////////////////////////////////
                                            TSM.Beam main = main_part as TSM.Beam;
                                            TSG.Point p1_bottm = null;
                                            TSG.Point p2_bottm = null;
                                            TSG.Point p3_bottm = null;
                                            TSG.Point p4_bottm = null;


                                            BOTTOMVIEW_CHECK(main, out BOTTOM_VIEW, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]), out p1_bottm, out p2_bottm, output, out BOTTOM_VIEW_TOCREATE);
                                            TOPVIEW_CHECK(main, out TOP_VIEW, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]), out p3_bottm, out p4_bottm, output, out TOP_VIEW_TOCREATE);
                                            TOPVIEW_needed(main, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]), output, out TOP_VIEW_needed);

                                            ////////////////////////////////////////////////////getting views from beam assembly drg ///////////////////////////////////////////////////////////////////////////////////    
                                            TSD.DrawingObjectEnumerator enum_for_views = beam_assembly_drg.GetSheet().GetAllViews();
                                            TSG.Point mml = beam_assembly_drg.GetSheet().Origin;

                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes fixed_attributes = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                            //fixed_attributes.LoadAttributes("SK_BEAM")
                                            fixed_attributes.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                            fixed_attributes.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                            {
                                                if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                                {
                                                    fixed_attributes.Text.Font.Height = 3.571875;
                                                }
                                                else
                                                {
                                                    fixed_attributes.Text.Font.Height = 3.175;
                                                }
                                            }
                                            else
                                            {
                                                fixed_attributes.Text.Font.Height = 2.38125;
                                            }

                                            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(main_part.GetCoordinateSystem()));
                                            ArrayList list_of_secondaries = ASSEMBLY.GetSecondaries();
                                            List<Guid> nearside_parts = new List<Guid>();
                                            List<Guid> farside_parts = new List<Guid>();
                                            ArrayList catalog_values = Getcatalog_values(main_part);
                                            if (profile_type == "U")
                                            {


                                                TSG.Vector zvector1 = main_part.GetCoordinateSystem().AxisX.Cross(main_part.GetCoordinateSystem().AxisY);
                                                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                                                zvector1.Normalize();
                                                double WT1 = 0;


                                                double WT3 = Convert.ToDouble(catalog_values[1]);
                                                if (zvector1.Z > 0)
                                                {
                                                    WT1 = (-WT3 / 2);
                                                }
                                                else
                                                {
                                                    WT1 = (WT3 / 2);
                                                }








                                                foreach (TSM.Part part in list_of_secondaries)
                                                {
                                                    TSD.PointList bbz = bounding_box_sort_z(part, main_part as TSM.Beam);

                                                    if (bbz[1].Z < WT1)
                                                    {
                                                        farside_parts.Add(part.Identifier.GUID);
                                                    }
                                                    else if (bbz[0].Z > WT1)
                                                    {
                                                        nearside_parts.Add(part.Identifier.GUID);
                                                    }


                                                }
                                            }

                                            else
                                            {
                                                foreach (TSM.Part part in list_of_secondaries)
                                                {
                                                    TSD.PointList bbz = bounding_box_sort_z(part, main_part as TSM.Beam);


                                                    if (bbz[1].Z < 0)
                                                    {
                                                        farside_parts.Add(part.Identifier.GUID);
                                                    }
                                                    else if (bbz[0].Z > 0)
                                                    {
                                                        nearside_parts.Add(part.Identifier.GUID);
                                                    }


                                                }
                                            }
                                            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                            beam_assembly_drg.PlaceViews();
                                            List<Guid> FRONT_VIEW_PARTMARK_TO_RETAIN = new List<Guid>();
                                            List<Guid> TOP_VIEW_PARTMARK_TO_RETAIN = new List<Guid>();
                                            List<Guid> FRONT_VIEW_BOLTMARK_TO_RETAIN = new List<Guid>();
                                            List<Guid> TOP_VIEW_BOLTMARK_TO_RETAIN = new List<Guid>();

                                            //List<Guid> FRONT_VIEW_PARTMARK_TO_RETAIN = new List<Guid>();
                                            //List<Guid> TOP_VIEW_PARTMARK_TO_RETAIN = new List<Guid>();



                                            #region codetocopy in drafter tool
                                            ////////////////////////////////////////////////////view enum starts////////////////////////////////////////////////////////////////////////////////////////////////////////
                                            while (enum_for_views.MoveNext())
                                            {


                                                TSD.View current_view = enum_for_views.Current as TSD.View;
                                                double SHORTNENING_VALUE_FOR_BOTTOM_VIEW = 0;
                                                ///////////////////////////////////////////////////front view filtered//////////////////////////////////////////////////////////////////////////////////////////////////////

                                                #region FRONT_VIEW
                                                //////////////////////////////////////////////////bolt rd dimension in front view using matrix function ///////////////////////////////////////////////////////////////////////
                                                if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                                                {

                                                    Stopwatch front_view_watch = new Stopwatch();
                                                    front_view_watch.Start();
                                                    current_view.Attributes.Scale = SCALE;
                                                    current_view.Modify();
                                                    double VIEW_sCALE = current_view.Attributes.Scale;
                                                    double RAD_DIST = 180 / VIEW_sCALE;
                                                    foreach (TSD.RadiusDimension myrad in list_of_radius)
                                                    {

                                                        myrad.Distance = RAD_DIST;
                                                        myrad.Modify();
                                                    }
                                                    TSD.PointList FINAL_RD_DIST_CHECK = new TSD.PointList();

                                                    SHORTNENING_VALUE_FOR_BOTTOM_VIEW = current_view.Attributes.Shortening.MinimumLength;


                                                    double change_min = Math.Abs(current_view.RestrictionBox.MinPoint.Y);
                                                    double change_max = Math.Abs(current_view.RestrictionBox.MaxPoint.Y);
                                                    if (Convert.ToInt64(change_min) > Convert.ToInt64(change_max))
                                                    {
                                                        current_view.RestrictionBox.MaxPoint.Y = change_min;
                                                        current_view.Modify();

                                                    }
                                                    else
                                                    {
                                                        current_view.RestrictionBox.MinPoint.Y = -change_max;
                                                        current_view.Modify();

                                                    }

                                                    double Y_POS = current_view.RestrictionBox.MaxPoint.Y;
                                                    //double Y_NEG = current_view.RestrictionBox.MinPoint.Y;
                                                    current_view.RestrictionBox.MaxPoint.Y = Y_POS + 100;
                                                    current_view.Modify();


                                                    try
                                                    {
                                                        weld_delete(current_view, list, beam_assembly_drg);
                                                    }
                                                    catch
                                                    {
                                                    }


                                                    //////////BOLT RD DIMENSION/////////////                                                                                                                                                    
                                                    ///////////////////////////////////////////////////filtering bolts from all parts in front view/////////////////////////////////////////////////////////////////////////////

                                                    /////////////////////////////////////////////////// inserting bolt rd dimension ////////////////////////////////////////////////////////////////////////////////////////
                                                    TSD.StraightDimensionSetHandler bolt_rd_dim = new TSD.StraightDimensionSetHandler();
                                                    TSD.StraightDimensionSet.StraightDimensionSetAttributes dim_font_height = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                                    dim_font_height.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                                    {
                                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                                        {
                                                            dim_font_height.Text.Font.Height = 3.571875;
                                                        }
                                                        else
                                                        {
                                                            dim_font_height.Text.Font.Height = 3.175;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        dim_font_height.Text.Font.Height = 2.38125;


                                                    }




                                                    ArrayList list_of_catalog = Getcatalog_values(main_part);
                                                    double height = Convert.ToDouble(list_of_catalog[0]);
                                                    double heught = Convert.ToInt64(height / 2);

                                                    if (chkcutlen.Checked == true)
                                                    {

                                                        TSD.PointList overall_dim_for_beam = new TSD.PointList();
                                                        overall_dim_for_beam.Add(new TSG.Point(0, -heught, 0));
                                                        overall_dim_for_beam.Add(new TSG.Point(output, -heught, 0));
                                                        bolt_rd_dim.CreateDimensionSet(current_view, overall_dim_for_beam, new TSG.Vector(0, -1, 0), Math.Abs(current_view.RestrictionBox.MinPoint.Y) + 75, dim_font_height);
                                                    }
                                                    else
                                                    {

                                                    }



                                                    //bolt_logic

                                                    /////////////////END OF BOLT RD DIMENSION for FRONT VIEW  ///////////////



                                                    /////////////////3x3 dimension////////////////////////
                                                    ///////////////////////////////////////////////////filtering bolts from all parts in front view/////////////////////////////////////////////////////////////////////////////


                                                    #region bolt_vertical_dimension
                                                    List<TSG.Point> singlebolts = new List<TSG.Point>();
                                                    List<TSG.Point> singlebolts1 = new List<TSG.Point>();
                                                    TSG.Matrix to_view_matrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.DisplayCoordinateSystem);
                                                    TSD.StraightDimensionSetHandler bolt_combine_dim = new TSD.StraightDimensionSetHandler();
                                                    TSG.Vector myvector_for_slope_bolt = new TSG.Vector();

                                                    ///////////////////////////////////////////////////getting bolt matrix points for bolt 3x3 dimension///////////////////////////////////////////////////////////////////////////
                                                    Dictionary<int, Guid> MY_DICTIONARY = new Dictionary<int, Guid>();
                                                    List<TSM.BoltGroup> SLOPE_BOLT_GROUP = new List<TSM.BoltGroup>();
                                                    TSM.ModelObjectEnumerator model_bolt_enum = main_part.GetBolts();
                                                    TSG.Vector zaxis_for_slope = new TSG.Vector();
                                                    while (model_bolt_enum.MoveNext())
                                                    {
                                                        TSM.BoltGroup boltgrp = model_bolt_enum.Current as TSM.BoltGroup;
                                                        MY_DICTIONARY.Add(boltgrp.Identifier.ID, boltgrp.Identifier.GUID);
                                                        mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                                        mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
                                                        TSG.CoordinateSystem boltcheck = boltgrp.GetCoordinateSystem();
                                                        TSG.Vector xaxis = boltcheck.AxisX;
                                                        TSG.Vector yaxis = boltcheck.AxisY;
                                                        TSG.Vector zaxis = yaxis.Cross(xaxis);
                                                        zaxis.Normalize();
                                                        zaxis_for_slope = zaxis;
                                                        zaxis_for_slope.Normalize();
                                                        mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                                        double angle_check_FOR_NOT_IN_VIEW = Math.Abs(RadianToDegree((zaxis.GetAngleBetween(new TSG.Vector(1, 0, 0)))));
                                                        double angle_check_FOR_SLOPE_AND_NORMAL = Math.Abs(RadianToDegree((zaxis.GetAngleBetween(new TSG.Vector(0, 1, 0)))));
                                                        double angle_check_FOR_SLOPE_AND_NORMAL1 = Math.Abs(RadianToDegree((xaxis.GetAngleBetween(new TSG.Vector(1, 0, 0)))));

                                                        if (Convert.ToInt64(angle_check_FOR_NOT_IN_VIEW) == 90)
                                                        {
                                                            if ((Convert.ToInt64(angle_check_FOR_SLOPE_AND_NORMAL) == 90))
                                                            {
                                                                if ((Convert.ToInt64(angle_check_FOR_SLOPE_AND_NORMAL1) == 90) || (Convert.ToInt64(angle_check_FOR_SLOPE_AND_NORMAL1) == 0) || (Convert.ToInt64(angle_check_FOR_SLOPE_AND_NORMAL1) == 180) || (Convert.ToInt64(angle_check_FOR_SLOPE_AND_NORMAL1) == 270))
                                                                {
                                                                    foreach (TSG.Point pt in boltgrp.BoltPositions)
                                                                    {

                                                                        singlebolts.Add(to_view_matrix.Transform(pt));

                                                                    }
                                                                    FRONT_VIEW_BOLTMARK_TO_RETAIN.Add(boltgrp.Identifier.GUID);
                                                                }
                                                                else
                                                                {
                                                                    mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                                                    mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));

                                                                    myvector_for_slope_bolt = vector_for_slope(boltgrp, current_view);
                                                                    if (myvector_for_slope_bolt != new TSG.Vector(0, 0, 0))
                                                                    {
                                                                        SLOPE_BOLT_GROUP.Add(boltgrp);
                                                                    }
                                                                    mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                                                                }
                                                            }
                                                            else if ((Convert.ToInt64(angle_check_FOR_SLOPE_AND_NORMAL) == 0) || (Convert.ToInt64(angle_check_FOR_SLOPE_AND_NORMAL) == 180))
                                                            {

                                                            }

                                                        }
                                                    }
                                                    TSG.Vector yvector_for_slope_bolt = new TSG.Vector();

                                                    TSG.Matrix to_rotate_matrix = new TSG.Matrix();
                                                    if (myvector_for_slope_bolt != new TSG.Vector(0, 0, 0))
                                                    {
                                                        yvector_for_slope_bolt = myvector_for_slope_bolt.Cross(zaxis_for_slope);
                                                        TSG.CoordinateSystem rotated_coord = new TSG.CoordinateSystem(new TSG.Point(0, 0, 0), myvector_for_slope_bolt, yvector_for_slope_bolt);
                                                        //mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(rotated_coord));
                                                        model_bolt_enum.Reset();
                                                        to_rotate_matrix = TSG.MatrixFactory.ToCoordinateSystem(rotated_coord);

                                                        mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                                                        foreach (TSM.BoltGroup boltgrp in SLOPE_BOLT_GROUP)
                                                        {

                                                            foreach (TSG.Point pt in boltgrp.BoltPositions)
                                                            {

                                                                singlebolts1.Add((to_view_matrix.Transform(pt)));

                                                            }
                                                            FRONT_VIEW_BOLTMARK_TO_RETAIN.Add(boltgrp.Identifier.GUID);

                                                        }






                                                    }


                                                    try
                                                    {

                                                        slope_bolt_logic(singlebolts1, to_rotate_matrix, current_view, output, MAINPART_PROFILE_VALUES, myvector_for_slope_bolt, yvector_for_slope_bolt, drg_att);
                                                    }
                                                    catch
                                                    {

                                                    }


                                                    try
                                                    {

                                                        bolt_logic(singlebolts, current_view, output, MAINPART_PROFILE_VALUES, drg_att);

                                                    }
                                                    catch
                                                    {

                                                    }















                                                    #endregion
                                                    ///////////////////////////////////////////////////getting bolt matrix points for bolt 3x3 dimension///////////////////////////////////////////////////////////////////////////


                                                    /////////////////END OF 3x3 dimension for FRONT VIEW////////////////////////





                                                    ///////////////// cope dimension for FRONT VIEW////////////////////////

                                                    Create_cope_dimensions(current_view, main, drg_att);

                                                    /////////////////END OF cope dimension for FRONT VIEW////////////////////////



                                                    Gusset_Dimensions_with_bolts_reworked(main, current_view, ref FRONT_VIEW_PARTMARK_TO_RETAIN, ref FRONT_VIEW_BOLTMARK_TO_RETAIN, drg_att);
                                                    dimension_for_parts_outside_assembly(main, current_view, output, ref FRONT_VIEW_PARTMARK_TO_RETAIN, drg_att);
                                                    Dimensions_for_attachments_for_outside_flange(main, current_view, output, ref FRONT_VIEW_PARTMARK_TO_RETAIN, drg_att);
                                                    Dimensions_for_attachments_for_inside_flange_front(main, current_view, output, ref FRONT_VIEW_PARTMARK_TO_RETAIN, drg_att);
                                                    double DEPTH = Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2;
                                                    if (chkeledim.Checked == true)
                                                    {
                                                        Create_elevation_Dimension(new TSG.Point(0, DEPTH, 0), current_view, Math.Abs(current_view.RestrictionBox.MinPoint.X) + 250, drg_att);
                                                    }
                                                    Create_stud_dimensions(current_view, ref FRONT_VIEW_PARTMARK_TO_RETAIN, drg_att);
                                                    partmark_for_bolt_dim_attachments(current_view, ref FRONT_VIEW_PARTMARK_TO_RETAIN);
                                                    FRONT_VIEW_PARTMARK_TO_RETAIN.Add(main_part.Identifier.GUID);
                                                    front_view_watch.Stop();
                                                    Console.WriteLine("front_view_watch.....>" + front_view_watch.ElapsedMilliseconds.ToString());
                                                }
                                                TSM.Beam l = new TSM.Beam();
                                                #endregion

                                                ///////////////////////////////////////////////////////////end of front view ///////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                ///////////////////////////////////////////////top view filtered//////////////////////////////////////////////////////////////////////////////////////////////////////

                                                #region TOP_VIEW
                                                /////////////////////////////////////////////////bolt rd dimension in top view using matrix function /////////////////////////////////////////////////////////////
                                                if (current_view.ViewType.Equals(TSD.View.ViewTypes.TopView))
                                                {



                                                    Stopwatch top_view_watch = new Stopwatch();
                                                    top_view_watch.Start();
                                                    current_view.Attributes.Scale = SCALE;
                                                    current_view.Modify();
                                                    double change_min = Math.Abs(current_view.RestrictionBox.MinPoint.Y);
                                                    double change_max = Math.Abs(current_view.RestrictionBox.MaxPoint.Y);
                                                    if (Convert.ToInt64(change_min) > Convert.ToInt64(change_max))
                                                    {
                                                        current_view.RestrictionBox.MaxPoint.Y = change_min;
                                                        current_view.Modify();

                                                    }
                                                    else
                                                    {
                                                        current_view.RestrictionBox.MinPoint.Y = -change_max;
                                                        current_view.Modify();

                                                    }

                                                    double maxy = current_view.RestrictionBox.MaxPoint.Y;



                                                    TSD.PointList FINAL_RD_DIST_CHECK = new TSD.PointList();
                                                    try
                                                    {
                                                        weld_delete(current_view, list, beam_assembly_drg);
                                                    }
                                                    catch
                                                    {
                                                    }

                                                    /////////BOLT RD DIMENSION//////////////
                                                    ///////////////////////////////////////////////////filtering bolts from all parts in top view/////////////////////////////////////////////////////////////////////////////

                                                    TSD.PointList rd_point_list = new TSD.PointList();
                                                    TSG.Matrix top_mat = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                    ///////////////////////////////////////////////////getting bolt matrix points for bolt dimension///////////////////////////////////////////////////////////////////////////

                                                    //////////////////////////////////////////////////Copied part from front view for bolt dim using new logic/////////////////////////////////////
                                                    List<TSG.Point> singlebolts = new List<TSG.Point>();

                                                    TSG.Matrix to_view_matrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.DisplayCoordinateSystem);
                                                    TSD.StraightDimensionSetHandler bolt_combine_dim = new TSD.StraightDimensionSetHandler();

                                                    ///////////////////////////////////////////////////getting bolt matrix points for bolt 3x3 dimension///////////////////////////////////////////////////////////////////////////


                                                    TSM.ModelObjectEnumerator model_bolt_enum = main_part.GetBolts();
                                                    while (model_bolt_enum.MoveNext())
                                                    {
                                                        TSM.BoltGroup boltgrp = model_bolt_enum.Current as TSM.BoltGroup;
                                                        mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
                                                        TSG.CoordinateSystem boltcheck = boltgrp.GetCoordinateSystem();
                                                        TSG.Vector xaxis = boltcheck.AxisX;
                                                        TSG.Vector yaxis = boltcheck.AxisY;
                                                        TSG.Vector zaxis = yaxis.Cross(xaxis);
                                                        zaxis.Normalize();
                                                        mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                                        if ((Convert.ToInt64(zaxis.Z) != 0))
                                                        {
                                                            foreach (TSG.Point pt in boltgrp.BoltPositions)
                                                            {
                                                                TSG.Point conv_pt = to_view_matrix.Transform(pt);
                                                                if (Convert.ToInt64(conv_pt.Z) > 0)
                                                                {
                                                                    singlebolts.Add(conv_pt);
                                                                }
                                                            }
                                                            TOP_VIEW_BOLTMARK_TO_RETAIN.Add(boltgrp.Identifier.GUID);
                                                        }
                                                    }



                                                    var groupedbolts = (from points in singlebolts
                                                                        group points by Convert.ToInt64(points.X) into newlist
                                                                        orderby newlist.Key ascending
                                                                        select new
                                                                        {
                                                                            x_dist = newlist.Key,
                                                                            point_in_group = (newlist.OrderBy(y => y.Y).ToList())

                                                                        }).ToList();

                                                    TSD.StraightDimensionSet.StraightDimensionSetAttributes OUTSIDE = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                                    OUTSIDE.ShortDimension = TSD.DimensionSetBaseAttributes.ShortDimensionTypes.Outside;
                                                    OUTSIDE.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                                    {
                                                        if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                        {
                                                            OUTSIDE.Text.Font.Height = 3.571875;
                                                        }
                                                        else
                                                        {
                                                            OUTSIDE.Text.Font.Height = 3.175;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        OUTSIDE.Text.Font.Height = 2.38125;


                                                    }

                                                    for (int i = 0; i < groupedbolts.Count; i++)
                                                    {

                                                        rd_point_list.Add(groupedbolts[i].point_in_group[0]);


                                                    }

                                                    TSD.PointList rd_point_list_final = new TSD.PointList();

                                                    foreach (TSG.Point pt in rd_point_list)
                                                    {
                                                        if (Convert.ToInt64(pt.Z) > 0)
                                                        {
                                                            rd_point_list_final.Add(pt);

                                                        }
                                                    }


                                                    TSD.StraightDimensionSetHandler bolt_rd_dim = new TSD.StraightDimensionSetHandler();
                                                    TSD.PointList FINAL_RD_LIST = pointlist_remove_duplicate_Xvalues(rd_point_list_final);
                                                    FINAL_RD_DIST_CHECK = FINAL_RD_LIST;
                                                    FINAL_RD_LIST.Add(new TSG.Point(0, 0, 0));
                                                    sorting_points_by_x_asc(FINAL_RD_LIST);
                                                    /////////////////////////////////////////////////// inserting bolt rd dimension ////////////////////////////////////////////////////////////////////////////////////////

                                                    try
                                                    {
                                                        ////////////////////////////////////////////////////dimension distance placing linking /////////////////////////////////////////////////////////////////////////////////////////
                                                        double distance = Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2;
                                                        TSG.Point p1 = (FINAL_RD_LIST[FINAL_RD_LIST.Count - 1] as TSG.Point);
                                                        TSG.Point p2 = new TSG.Point((FINAL_RD_LIST[FINAL_RD_LIST.Count - 1] as TSG.Point).X, distance, 0);
                                                        double distance_value = TSG.Distance.PointToPoint(p1, p2);
                                                        /////////////////////////////////////////////////////rd dimension creation////////////////////////////////////////////////////////////////////////////////////////////////////
                                                        TSD.StraightDimensionSet.StraightDimensionSetAttributes rd = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                                        rd.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
                                                        rd.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                                        rd.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                                                        rd.Color = DrawingColors.Gray70;
                                                        rd.Text.Font.Color = DrawingColors.Gray70;
                                                        rd.Arrowhead.Head = ArrowheadTypes.FilledArrow;
                                                        if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                                        {
                                                            if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                            {
                                                                rd.Text.Font.Height = 3.571875;
                                                            }
                                                            else
                                                            {
                                                                rd.Text.Font.Height = 3.175;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            rd.Text.Font.Height = 2.38125;


                                                        }

                                                        bolt_rd_dim.CreateDimensionSet(current_view, FINAL_RD_LIST, new TSG.Vector(0, 1, 0), maxy + 100, rd);


                                                    }
                                                    catch
                                                    {
                                                    }












                                                    double distance_for_bolt_dim = 0;




                                                    if (groupedbolts.Count > 1)
                                                    {
                                                        if (groupedbolts[0].x_dist < 150)
                                                        {
                                                            double REST_BOX_MIN = Math.Abs(current_view.RestrictionBox.MinPoint.X);

                                                            distance_for_bolt_dim = groupedbolts[0].x_dist + REST_BOX_MIN + 75;
                                                        }
                                                        else
                                                        {
                                                            distance_for_bolt_dim = 30;
                                                        }
                                                    }


                                                    for (int i = 0; i < groupedbolts.Count; i++)
                                                    {

                                                        TSD.PointList ptlist_for_boltdim = new TSD.PointList();
                                                        TSD.PointList ptlist_for_boltdim_rd = new TSD.PointList();
                                                        ptlist_for_boltdim_rd.Add(new TSG.Point(0, 0, 0));
                                                        if (i < groupedbolts.Count)
                                                        {
                                                            int number_of_bolts_current = 0;
                                                            int number_of_bolts_next = 0;
                                                            try
                                                            {
                                                                number_of_bolts_current = groupedbolts[i].point_in_group.Count;
                                                                number_of_bolts_next = groupedbolts[i + 1].point_in_group.Count;
                                                                if (number_of_bolts_current == number_of_bolts_next)
                                                                {
                                                                    for (int j = 0; j < number_of_bolts_current; j++)
                                                                    {
                                                                        long y_value_current = Convert.ToInt64(groupedbolts[i].point_in_group[j].Y);
                                                                        long y_value_next = Convert.ToInt64(groupedbolts[i + 1].point_in_group[j].Y);
                                                                        if (y_value_current == y_value_next)
                                                                        {
                                                                            int threshold_value_for_boltdim_combine = 140;
                                                                            long x_value_current = Convert.ToInt64(groupedbolts[i].point_in_group[j].X);
                                                                            long x_value_next = Convert.ToInt64(groupedbolts[i + 1].point_in_group[j].X);
                                                                            long difference = Math.Abs(x_value_current - x_value_next);
                                                                            if (difference < threshold_value_for_boltdim_combine)
                                                                            {
                                                                                if (j == number_of_bolts_current - 1)
                                                                                {
                                                                                    distance_for_bolt_dim = distance_for_bolt_dim + difference;
                                                                                }
                                                                                ptlist_for_boltdim_rd.Add(groupedbolts[i].point_in_group[j]);

                                                                                //boltmatrix = new TSG.Point[number_of_bolts_current,1];

                                                                                //grouped_bolts_matrix_form[h][number_of_bolts_current] = groupedbolts[i].point_in_group[j];

                                                                            }
                                                                            else
                                                                            {
                                                                                foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                                                                                {
                                                                                    ptlist_for_boltdim.Add(pt);

                                                                                }
                                                                                //if (j == number_of_bolts_current - 1)
                                                                                //{
                                                                                ptlist_for_boltdim.Add(new TSG.Point(groupedbolts[i].point_in_group[j].X, 0, 0));
                                                                                //bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim_rd, new TSG.Vector(0, 1, 0), 500);
                                                                                //}

                                                                                try
                                                                                {
                                                                                    TSD.PointList REVERSE_OF_PTLIST = new TSD.PointList();
                                                                                    if (ptlist_for_boltdim.Count > 2)
                                                                                    {
                                                                                        bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, OUTSIDE);

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[1]);
                                                                                        REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[0]);
                                                                                        bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, REVERSE_OF_PTLIST, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, OUTSIDE);



                                                                                    }


                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                                distance_for_bolt_dim = 30;
                                                                                break;
                                                                            }
                                                                        }
                                                                        else
                                                                        {

                                                                            foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                                                                            {
                                                                                ptlist_for_boltdim.Add(pt);
                                                                            }
                                                                            //if (j == number_of_bolts_current - 1)
                                                                            //{
                                                                            ptlist_for_boltdim.Add(new TSG.Point(groupedbolts[i].point_in_group[j].X, 0, 0));
                                                                            //bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim_rd, new TSG.Vector(0, 1, 0), 500);
                                                                            //}
                                                                            try
                                                                            {


                                                                                //   bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, OUTSIDE);
                                                                                TSD.PointList REVERSE_OF_PTLIST = new TSD.PointList();
                                                                                if (ptlist_for_boltdim.Count > 2)
                                                                                {
                                                                                    bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, OUTSIDE);

                                                                                }
                                                                                else
                                                                                {
                                                                                    REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[1]);
                                                                                    REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[0]);
                                                                                    bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, REVERSE_OF_PTLIST, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, OUTSIDE);



                                                                                }

                                                                            }
                                                                            catch
                                                                            {
                                                                            }

                                                                            distance_for_bolt_dim = 30;
                                                                            break;
                                                                        }

                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                                                                    {
                                                                        ptlist_for_boltdim.Add(pt);
                                                                    }
                                                                    ptlist_for_boltdim.Add(new TSG.Point(ptlist_for_boltdim[0].X, 0, 0));
                                                                    //bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim_rd, new TSG.Vector(0, 1, 0), 500);
                                                                    try
                                                                    {
                                                                        //    bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, OUTSIDE);

                                                                        if (ptlist_for_boltdim[0].X < 150)
                                                                        {
                                                                            //distance_for_bolt_dim = 200;

                                                                        }


                                                                        TSD.PointList REVERSE_OF_PTLIST = new TSD.PointList();
                                                                        if (ptlist_for_boltdim.Count > 2)
                                                                        {
                                                                            bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, OUTSIDE);

                                                                        }
                                                                        else
                                                                        {
                                                                            REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[1]);
                                                                            REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[0]);
                                                                            bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, REVERSE_OF_PTLIST, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, OUTSIDE);



                                                                        }

                                                                    }
                                                                    catch
                                                                    {
                                                                    }
                                                                    distance_for_bolt_dim = 30;



                                                                }
                                                            }
                                                            catch
                                                            {



                                                                if (groupedbolts.Count > 1)
                                                                {
                                                                    double threshold_value = groupedbolts[i].x_dist - groupedbolts[i - 1].x_dist;

                                                                    if (threshold_value > 140)
                                                                    {

                                                                        foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                                                                        {
                                                                            ptlist_for_boltdim.Add(pt);

                                                                        }

                                                                        if (groupedbolts[i].x_dist > output - 150)
                                                                        {
                                                                            double REST_BOX_MAX = Math.Abs(current_view.RestrictionBox.MaxPoint.X);
                                                                            distance_for_bolt_dim = Math.Abs(groupedbolts[i].x_dist - REST_BOX_MAX);
                                                                        }
                                                                        else
                                                                        {

                                                                            distance_for_bolt_dim = 0;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        foreach (TSG.Point pt in groupedbolts[i - 1].point_in_group)
                                                                        {
                                                                            ptlist_for_boltdim.Add(pt);

                                                                        }
                                                                        if (groupedbolts[i].x_dist > output - 150)
                                                                        {
                                                                            double REST_BOX_MAX = Math.Abs(current_view.RestrictionBox.MaxPoint.X);
                                                                            distance_for_bolt_dim = Math.Abs(groupedbolts[i - 1].x_dist - REST_BOX_MAX);
                                                                        }
                                                                        else
                                                                        {

                                                                            //distance_for_bolt_dim = Math.Abs(groupedbolts[i - 1].x_dist - groupedbolts[i].x_dist);
                                                                            distance_for_bolt_dim = 0;
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                                                                    {
                                                                        ptlist_for_boltdim.Add(pt);

                                                                    }

                                                                    if (groupedbolts[i].x_dist > output - 150)
                                                                    {
                                                                        double REST_BOX_MAX = Math.Abs(current_view.RestrictionBox.MaxPoint.X);
                                                                        distance_for_bolt_dim = Math.Abs(groupedbolts[i].x_dist - REST_BOX_MAX);
                                                                    }
                                                                    else
                                                                    {

                                                                        distance_for_bolt_dim = 0;
                                                                    }
                                                                }



                                                                TSG.Vector new_vector = new TSG.Vector();
                                                                if (groupedbolts[i].x_dist > output - 150)
                                                                {

                                                                    new_vector = new TSG.Vector(1, 0, 0);
                                                                }
                                                                else
                                                                {

                                                                    new_vector = new TSG.Vector(1, 0, 0);
                                                                }

                                                                ptlist_for_boltdim.Add(new TSG.Point(ptlist_for_boltdim[0].X, 0, 0));
                                                                try
                                                                {

                                                                    TSD.PointList REVERSE_OF_PTLIST = new TSD.PointList();
                                                                    if (ptlist_for_boltdim.Count > 2)
                                                                    {
                                                                        bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, new_vector, distance_for_bolt_dim + 75, OUTSIDE);

                                                                    }
                                                                    else
                                                                    {
                                                                        REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[1]);
                                                                        REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[0]);
                                                                        bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, REVERSE_OF_PTLIST, new_vector, distance_for_bolt_dim + 75, OUTSIDE);



                                                                    }


                                                                }
                                                                catch
                                                                {
                                                                }
                                                            }

                                                        }

                                                    }
                                                    //////////////End of bolt rd dimension FOR TOPVIEW //////////////////////////
                                                    #region boltwithinflange
                                                    TSG.Matrix top_mat11 = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                    ArrayList secondary_parts = ASSEMBLY.GetSecondaries();

                                                    foreach (TSM.Part mypart in secondary_parts)
                                                    {

                                                        //TSD.DrawingObjectEnumerator enum_for_bolt11 = current_view.GetAllObjects(type_for_bolt);
                                                        TSM.ModelObjectEnumerator enum_for_bolt11 = mypart.GetBolts();
                                                        int size = enum_for_bolt11.GetSize();
                                                        TSD.PointList rd_point_list11 = new TSD.PointList();
                                                        if (size > 0)
                                                        {
                                                            ///////////////////////////////////////////////////getting bolt matrix points for bolt dimension///////////////////////////////////////////////////////////////////////////
                                                            while (enum_for_bolt11.MoveNext())
                                                            {


                                                                TSM.BoltGroup bolt = enum_for_bolt11.Current as TSM.BoltGroup;
                                                                if (!bolt.BoltType.Equals(TSM.BoltGroup.BoltTypeEnum.BOLT_TYPE_WORKSHOP))
                                                                {


                                                                    if ((top_mat11.Transform((bolt.BoltPositions[0]) as TSG.Point).Z > 0) && (top_mat11.Transform((bolt.BoltPositions[0]) as TSG.Point).Z < Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2))
                                                                    {
                                                                        //TSD.Bolt drgbolt1 = drgbolt11;
                                                                        TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(bolt, current_view);
                                                                        if (POINT_FOR_BOLT_MATRIX != null)
                                                                        {
                                                                            int y = POINT_FOR_BOLT_MATRIX.GetLength(0);
                                                                            int x = POINT_FOR_BOLT_MATRIX.GetLength(1);
                                                                            for (int i = 0; i < x; i++)
                                                                            {
                                                                                ///////////////////////////////////////////// condition for getting last row of bolts//////////////////////////////////////////////////////////////////////////////////////////////
                                                                                rd_point_list11.Add(POINT_FOR_BOLT_MATRIX[y - 1, i]);
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                        }

                                                        /////////////////////////////////////////////////// removing duplicate points from boltpoints///////////////////////////////////////////////////////////////////////////////           
                                                        TSD.PointList FINAL_RD_LIST11 = pointlist_remove_duplicate_Xvalues(rd_point_list11);
                                                        FINAL_RD_LIST11.Insert(0, (new TSG.Point(0, 0, 0)));
                                                        sorting_points_by_x_asc(FINAL_RD_LIST11);
                                                        /////////////////////////////////////////////////// inserting bolt rd dimension ////////////////////////////////////////////////////////////////////////////////////////

                                                        try
                                                        {
                                                            ////////////////////////////////////////////////////dimension distance placing linking /////////////////////////////////////////////////////////////////////////////////////////
                                                            double distance = Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2;
                                                            TSG.Point p1 = (FINAL_RD_LIST11[FINAL_RD_LIST11.Count - 1] as TSG.Point);
                                                            TSG.Point p2 = new TSG.Point((FINAL_RD_LIST11[FINAL_RD_LIST11.Count - 1] as TSG.Point).X, distance, 0);
                                                            double distance_value = TSG.Distance.PointToPoint(p1, p2);
                                                            /////////////////////////////////////////////////////rd dimension creation////////////////////////////////////////////////////////////////////////////////////////////////////
                                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes rd = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                                            rd.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
                                                            rd.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                                            rd.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                                                            rd.Color = DrawingColors.Gray70;
                                                            rd.Text.Font.Color = DrawingColors.Gray70;
                                                            rd.Arrowhead.Head = ArrowheadTypes.FilledArrow;
                                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                                            {
                                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                                {
                                                                    rd.Text.Font.Height = 3.571875;
                                                                }
                                                                else
                                                                {
                                                                    rd.Text.Font.Height = 3.175;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                rd.Text.Font.Height = 2.38125;


                                                            }






                                                            bolt_rd_dim.CreateDimensionSet(current_view, FINAL_RD_LIST11, new TSG.Vector(0, 1, 0), maxy + 125, rd);

                                                        }
                                                        catch
                                                        {
                                                        }



                                                    }


                                                    #endregion














                                                    ////////////////////cope dimension for topview///////////////
                                                    Create_FLANGE_CUT_dimensions_top(current_view, main, drg_att);
                                                    provide_fitting_cut_dims(current_view, main, drg_att);
                                                    //Create_FLANGE_CUT_dimensions_top1(current_view, main, drg_att);
                                                    //Create_FLANGE_CUT_dimensions_bottom(current_view, main, drg_att);
                                                    //////////////////// end of cope dimension for topview///////////////
                                                    Dimensions_for_attachments_for_inside_flange_top(main, current_view, output, ref TOP_VIEW_PARTMARK_TO_RETAIN, drg_att);
                                                    Gusset_Dimensions_with_bolts_reworked(main, current_view, ref TOP_VIEW_PARTMARK_TO_RETAIN, ref TOP_VIEW_BOLTMARK_TO_RETAIN, drg_att);
                                                    //Create_stud_dimensions(current_view,ref TOP_VIEW_PARTMARK_TO_RETAIN);
                                                    partmark_for_bolt_dim_attachments(current_view, ref TOP_VIEW_PARTMARK_TO_RETAIN);

                                                    top_view_watch.Stop();
                                                    Console.WriteLine("top_watch.....>" + top_view_watch.ElapsedMilliseconds.ToString());

                                                }
                                                #endregion

                                                ///////////////////////////////////////////////////////////end of top view ///////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                //////////////////////////////////////////////////////////bottom view filtered//////////////////////////////////////////////////////////////////////////////////////////////////////

                                                #region bottom_view
                                                if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                                                {
                                                    TSD.StraightDimensionSet.StraightDimensionSetAttributes dim_font_height = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                                    dim_font_height.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                                    {
                                                        if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                        {
                                                            dim_font_height.Text.Font.Height = 3.571875;
                                                        }
                                                        else
                                                        {
                                                            dim_font_height.Text.Font.Height = 3.175;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        dim_font_height.Text.Font.Height = 2.38125;
                                                    }


                                                    /////////////////BOTTOM VIEW CREATION //////////////////////////////////////

                                                    /////////////////////////////////////////////////////DECLARING VIEW NAME FOR BOTTOM VIEW ///////////////////////////////////////                    
                                                    TSD.View CREATE_BOTTOM_VIEW;
                                                    TSD.View CREATE_BOTTOM_VIEW1;
                                                    List<TSD.View> list_of_bottom_section_views = new List<TSD.View>();

                                                    ////////////////////////////////////////////////////BOTTOM VIEW ON AND OFF CONDITION ///////////////////////////////////////////
                                                    //if (BOTTOM_VIEW == "ON")
                                                    //{
                                                    //////////////////////////////////////////////////BOTTOM VIEW CREATION USING FUNCTION//////////////////////////////////////////
                                                    bottom_view_creation(main, current_view, output, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]), out CREATE_BOTTOM_VIEW, out CREATE_BOTTOM_VIEW1, p1_bottm, p2_bottm, BOTTOM_VIEW_TOCREATE, SHORTNENING_VALUE_FOR_BOTTOM_VIEW, list_of_parts_for_bottom_view_mark_retain, out bottom_view_list, out bottom_view_FLANGE_CUT_LIST, drg_att);
                                                    if (CREATE_BOTTOM_VIEW != null)
                                                        list_of_bottom_section_views.Add(CREATE_BOTTOM_VIEW);
                                                    if (CREATE_BOTTOM_VIEW1 != null)
                                                        list_of_bottom_section_views.Add(CREATE_BOTTOM_VIEW1);
                                                    //Create_FLANGE_CUT_dimensions_top(CREATE_BOTTOM_VIEW, main, drg_att);
                                                    //Create_FLANGE_CUT_dimensions_top(CREATE_BOTTOM_VIEW1, main, drg_att);
                                                    //////////////////////////////////////////////////FLANGE CUT DIMENSION ///////////////////////////////////////////////////////
                                                    if (BOTTOM_VIEW_TOCREATE.Contains("ON") || BOTTOM_VIEW_TOCREATE.Contains("RIGHT") || BOTTOM_VIEW_TOCREATE.Contains("LEFT") || BOTTOM_VIEW_TOCREATE.Contains("BOTH"))
                                                    {



                                                        //Create_FLANGE_CUT_dimensions(CREATE_BOTTOM_VIEW, main);


                                                        ///////////////////////////////////////////////////////////////////////

                                                        /////////BOLT RD DIMENSION//////////////
                                                        ///////////////////////////////////////////////////filtering bolts from all parts in top view/////////////////////////////////////////////////////////////////////////////

                                                        TSG.Matrix bottom_mat = TSG.MatrixFactory.ToCoordinateSystem(CREATE_BOTTOM_VIEW.ViewCoordinateSystem);
                                                        TSD.PointList rd_point_list1 = new TSD.PointList();
                                                        ///////////////////////////////////////////////////getting bolt matrix points for bolt dimension///////////////////////////////////////////////////////////////////////////

                                                        //////////////End of bolt rd dimension FOR BottomVIEW //////////////////////////







                                                        ///////Copied code for bolt in bottom flange using new logic///////////////////////////////////////////


                                                        foreach (TSD.View bottom_section_view in list_of_bottom_section_views)
                                                        {
                                                            try
                                                            {

                                                                List<TSG.Point> singlebolts = new List<TSG.Point>();

                                                                TSG.Matrix to_view_matrix = TSG.MatrixFactory.ToCoordinateSystem(bottom_section_view.DisplayCoordinateSystem);
                                                                TSD.StraightDimensionSetHandler bolt_combine_dim = new TSD.StraightDimensionSetHandler();

                                                                ///////////////////////////////////////////////////getting bolt matrix points for bolt 3x3 dimension///////////////////////////////////////////////////////////////////////////


                                                                TSM.ModelObjectEnumerator model_bolt_enum = main_part.GetBolts();
                                                                while (model_bolt_enum.MoveNext())
                                                                {
                                                                    TSM.BoltGroup boltgrp = model_bolt_enum.Current as TSM.BoltGroup;
                                                                    mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(bottom_section_view.DisplayCoordinateSystem));
                                                                    TSG.CoordinateSystem boltcheck = boltgrp.GetCoordinateSystem();
                                                                    TSG.Vector xaxis = boltcheck.AxisX;
                                                                    TSG.Vector yaxis = boltcheck.AxisY;
                                                                    TSG.Vector zaxis = yaxis.Cross(xaxis);
                                                                    zaxis.Normalize();
                                                                    mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                                                    if ((zaxis.Z != 0))
                                                                    {
                                                                        foreach (TSG.Point pt in boltgrp.BoltPositions)
                                                                        {
                                                                            TSG.Point conv_pt = to_view_matrix.Transform(pt);
                                                                            if (conv_pt.Z < 0)
                                                                            {
                                                                                singlebolts.Add(conv_pt);
                                                                            }

                                                                        }
                                                                    }
                                                                }



                                                                var groupedbolts = (from points in singlebolts
                                                                                    group points by Convert.ToInt64(points.X) into newlist
                                                                                    orderby newlist.Key ascending
                                                                                    select new
                                                                                    {
                                                                                        x_dist = newlist.Key,
                                                                                        point_in_group = (newlist.OrderBy(y => y.Y).ToList())

                                                                                    }).ToList();



                                                                for (int i = 0; i < groupedbolts.Count; i++)
                                                                {
                                                                    rd_point_list1.Add(groupedbolts[i].point_in_group[0]);

                                                                }



                                                                TSD.PointList FINAL_RD_LIST2 = pointlist_remove_duplicate_Xvalues(rd_point_list1);
                                                                FINAL_RD_LIST2.Insert(0, (new TSG.Point(0, 0, 0)));
                                                                sorting_points_by_x_asc(FINAL_RD_LIST2);
                                                                /////////////////////////////////////////////////// inserting bolt rd dimension ////////////////////////////////////////////////////////////////////////////////////////
                                                                TSD.StraightDimensionSetHandler bolt_rd_dim1 = new TSD.StraightDimensionSetHandler();
                                                                try
                                                                {
                                                                    TSD.StraightDimensionSet.StraightDimensionSetAttributes rd_att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                                                    rd_att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                                                    rd_att.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
                                                                    rd_att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                                                                    rd_att.Color = DrawingColors.Gray70;
                                                                    rd_att.Text.Font.Color = DrawingColors.Gray70;
                                                                    rd_att.Arrowhead.Head = ArrowheadTypes.FilledArrow;
                                                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                                                    {
                                                                        if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                                        {
                                                                            rd_att.Text.Font.Height = 3.571875;
                                                                        }
                                                                        else
                                                                        {
                                                                            rd_att.Text.Font.Height = 3.175;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        rd_att.Text.Font.Height = 2.38125;


                                                                    }
                                                                    ////////////////////////////////////////////////////dimension distance placing linking /////////////////////////////////////////////////////////////////////////////////////////
                                                                    double distance = Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2;
                                                                    TSG.Point p1 = (FINAL_RD_LIST2[FINAL_RD_LIST2.Count - 1] as TSG.Point);
                                                                    TSG.Point p2 = new TSG.Point((FINAL_RD_LIST2[FINAL_RD_LIST2.Count - 1] as TSG.Point).X, distance, 0);
                                                                    double distance_value = TSG.Distance.PointToPoint(p1, p2);
                                                                    /////////////////////////////////////////////////////rd dimension creation //////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                    bolt_rd_dim1.CreateDimensionSet(CREATE_BOTTOM_VIEW, FINAL_RD_LIST2, new TSG.Vector(0, 1, 0), CREATE_BOTTOM_VIEW.RestrictionBox.MaxPoint.Y + 75, rd_att);
                                                                }
                                                                catch
                                                                {
                                                                }



                                                                double distance_for_bolt_dim = 0;
                                                                if (groupedbolts.Count > 0)
                                                                {
                                                                    if (groupedbolts[0].x_dist < 150)
                                                                    {
                                                                        double REST_BOX_MIN = Math.Abs(bottom_section_view.RestrictionBox.MinPoint.X);

                                                                        distance_for_bolt_dim = groupedbolts[0].x_dist + REST_BOX_MIN + 75;
                                                                    }
                                                                    else
                                                                    {
                                                                        distance_for_bolt_dim = 30;
                                                                    }
                                                                }
                                                                int h = 1;

                                                                for (int i = 0; i < groupedbolts.Count; i++)
                                                                {

                                                                    TSD.PointList ptlist_for_boltdim = new TSD.PointList();
                                                                    TSD.PointList ptlist_for_boltdim_rd = new TSD.PointList();
                                                                    ptlist_for_boltdim_rd.Add(new TSG.Point(0, 0, 0));
                                                                    if (i < groupedbolts.Count)
                                                                    {
                                                                        int number_of_bolts_current = 0;
                                                                        int number_of_bolts_next = 0;
                                                                        try
                                                                        {
                                                                            number_of_bolts_current = groupedbolts[i].point_in_group.Count;
                                                                            number_of_bolts_next = groupedbolts[i + 1].point_in_group.Count;
                                                                            if (number_of_bolts_current == number_of_bolts_next)
                                                                            {
                                                                                for (int j = 0; j < number_of_bolts_current; j++)
                                                                                {
                                                                                    long y_value_current = Convert.ToInt64(groupedbolts[i].point_in_group[j].Y);
                                                                                    long y_value_next = Convert.ToInt64(groupedbolts[i + 1].point_in_group[j].Y);
                                                                                    if (y_value_current == y_value_next)
                                                                                    {
                                                                                        int threshold_value_for_boltdim_combine = 140;
                                                                                        long x_value_current = Convert.ToInt64(groupedbolts[i].point_in_group[j].X);
                                                                                        long x_value_next = Convert.ToInt64(groupedbolts[i + 1].point_in_group[j].X);
                                                                                        long difference = Math.Abs(x_value_current - x_value_next);
                                                                                        if (difference < threshold_value_for_boltdim_combine)
                                                                                        {
                                                                                            if (j == number_of_bolts_current - 1)
                                                                                            {
                                                                                                distance_for_bolt_dim = distance_for_bolt_dim + difference;
                                                                                                h++;

                                                                                            }
                                                                                            ptlist_for_boltdim_rd.Add(groupedbolts[i].point_in_group[j]);

                                                                                            //boltmatrix = new TSG.Point[number_of_bolts_current,1];

                                                                                            //grouped_bolts_matrix_form[h][number_of_bolts_current] = groupedbolts[i].point_in_group[j];

                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                                                                                            {
                                                                                                ptlist_for_boltdim.Add(pt);

                                                                                            }
                                                                                            //if (j == number_of_bolts_current - 1)
                                                                                            //{
                                                                                            ptlist_for_boltdim.Add(new TSG.Point(groupedbolts[i].point_in_group[j].X, 0, 0));
                                                                                            //bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim_rd, new TSG.Vector(0, 1, 0), 500);
                                                                                            //}

                                                                                            try
                                                                                            {
                                                                                                //bolt_combine_dim.CreateDimensionSet(bottom_section_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim);
                                                                                                TSD.PointList REVERSE_OF_PTLIST = new TSD.PointList();
                                                                                                if (ptlist_for_boltdim.Count > 2)
                                                                                                {
                                                                                                    bolt_combine_dim.CreateDimensionSet(bottom_section_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, dim_font_height);

                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[1]);
                                                                                                    REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[0]);
                                                                                                    bolt_combine_dim.CreateDimensionSet(bottom_section_view as TSD.ViewBase, REVERSE_OF_PTLIST, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, dim_font_height);



                                                                                                }
                                                                                            }
                                                                                            catch
                                                                                            {

                                                                                            }
                                                                                            h = 1;
                                                                                            distance_for_bolt_dim = 30;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {

                                                                                        foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                                                                                        {
                                                                                            ptlist_for_boltdim.Add(pt);
                                                                                        }
                                                                                        //if (j == number_of_bolts_current - 1)
                                                                                        //{
                                                                                        ptlist_for_boltdim.Add(new TSG.Point(groupedbolts[i].point_in_group[j].X, 0, 0));
                                                                                        //bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim_rd, new TSG.Vector(0, 1, 0), 500);
                                                                                        //}
                                                                                        try
                                                                                        {
                                                                                            // bolt_combine_dim.CreateDimensionSet(bottom_section_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim);
                                                                                            TSD.PointList REVERSE_OF_PTLIST = new TSD.PointList();
                                                                                            if (ptlist_for_boltdim.Count > 2)
                                                                                            {
                                                                                                bolt_combine_dim.CreateDimensionSet(bottom_section_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, dim_font_height);

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[1]);
                                                                                                REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[0]);
                                                                                                bolt_combine_dim.CreateDimensionSet(bottom_section_view as TSD.ViewBase, REVERSE_OF_PTLIST, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, dim_font_height);



                                                                                            }
                                                                                        }
                                                                                        catch
                                                                                        {

                                                                                        }
                                                                                        h = 1;
                                                                                        distance_for_bolt_dim = 30;
                                                                                        break;
                                                                                    }

                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                                                                                {
                                                                                    ptlist_for_boltdim.Add(pt);
                                                                                }
                                                                                ptlist_for_boltdim.Add(new TSG.Point(ptlist_for_boltdim[0].X, 0, 0));
                                                                                //bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim_rd, new TSG.Vector(0, 1, 0), 500);
                                                                                try
                                                                                {
                                                                                    //bolt_combine_dim.CreateDimensionSet(bottom_section_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim);
                                                                                    TSD.PointList REVERSE_OF_PTLIST = new TSD.PointList();
                                                                                    if (ptlist_for_boltdim.Count > 2)
                                                                                    {
                                                                                        bolt_combine_dim.CreateDimensionSet(bottom_section_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, dim_font_height);

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[1]);
                                                                                        REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[0]);
                                                                                        bolt_combine_dim.CreateDimensionSet(bottom_section_view as TSD.ViewBase, REVERSE_OF_PTLIST, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, dim_font_height);



                                                                                    }
                                                                                }
                                                                                catch
                                                                                {
                                                                                }
                                                                                h = 1;
                                                                                distance_for_bolt_dim = 30;



                                                                            }
                                                                        }
                                                                        catch
                                                                        {


                                                                            if (groupedbolts.Count > 1)
                                                                            {
                                                                                double threshold_value = groupedbolts[i].x_dist - groupedbolts[i - 1].x_dist;

                                                                                if (threshold_value > 140)
                                                                                {

                                                                                    foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                                                                                    {
                                                                                        ptlist_for_boltdim.Add(pt);

                                                                                    }

                                                                                    if (groupedbolts[i].x_dist > output - 150)
                                                                                    {
                                                                                        double REST_BOX_MAX = Math.Abs(current_view.RestrictionBox.MaxPoint.X);
                                                                                        distance_for_bolt_dim = Math.Abs(groupedbolts[i].x_dist - REST_BOX_MAX);
                                                                                    }
                                                                                    else
                                                                                    {

                                                                                        distance_for_bolt_dim = 0;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    foreach (TSG.Point pt in groupedbolts[i - 1].point_in_group)
                                                                                    {
                                                                                        ptlist_for_boltdim.Add(pt);

                                                                                    }
                                                                                    if (groupedbolts[i].x_dist > output - 150)
                                                                                    {
                                                                                        double REST_BOX_MAX = Math.Abs(current_view.RestrictionBox.MaxPoint.X);
                                                                                        distance_for_bolt_dim = Math.Abs(groupedbolts[i - 1].x_dist - REST_BOX_MAX);
                                                                                    }
                                                                                    else
                                                                                    {

                                                                                        distance_for_bolt_dim = Math.Abs(groupedbolts[i - 1].x_dist - groupedbolts[i].x_dist);
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                                                                                {
                                                                                    ptlist_for_boltdim.Add(pt);

                                                                                }

                                                                                if (groupedbolts[i].x_dist > output - 150)
                                                                                {
                                                                                    double REST_BOX_MAX = Math.Abs(current_view.RestrictionBox.MaxPoint.X);
                                                                                    distance_for_bolt_dim = Math.Abs(groupedbolts[i].x_dist - REST_BOX_MAX);
                                                                                }
                                                                                else
                                                                                {

                                                                                    distance_for_bolt_dim = 0;
                                                                                }

                                                                            }
                                                                            TSG.Vector new_vector = new TSG.Vector();
                                                                            if (groupedbolts[i].x_dist > output - 150)
                                                                            {

                                                                                new_vector = new TSG.Vector(1, 0, 0);
                                                                            }
                                                                            else
                                                                            {

                                                                                new_vector = new TSG.Vector(1, 0, 0);
                                                                            }
                                                                            ptlist_for_boltdim.Add(new TSG.Point(ptlist_for_boltdim[0].X, 0, 0));
                                                                            try
                                                                            {
                                                                                //bolt_combine_dim.CreateDimensionSet(bottom_section_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(1, 0, 0), 175);
                                                                                TSD.PointList REVERSE_OF_PTLIST = new TSD.PointList();
                                                                                if (ptlist_for_boltdim.Count > 2)
                                                                                {
                                                                                    bolt_combine_dim.CreateDimensionSet(bottom_section_view as TSD.ViewBase, ptlist_for_boltdim, new_vector, distance_for_bolt_dim + 75, dim_font_height);

                                                                                }
                                                                                else
                                                                                {
                                                                                    REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[1]);
                                                                                    REVERSE_OF_PTLIST.Add(ptlist_for_boltdim[0]);
                                                                                    bolt_combine_dim.CreateDimensionSet(bottom_section_view as TSD.ViewBase, REVERSE_OF_PTLIST, new_vector, distance_for_bolt_dim + 75, dim_font_height);



                                                                                }
                                                                            }
                                                                            catch
                                                                            {

                                                                            }
                                                                        }


                                                                    }


                                                                }
                                                                ////////////////////end of 3x3 dimension  for top view///////////////////////

                                                            }
                                                            catch
                                                            {
                                                            }

                                                        }



                                                        ///////////////////////////////////////////////////////////////////////

                                                    }
                                                    //else if (BOTTOM_VIEW == "OFF")
                                                    //{
                                                    //}





                                                }


                                                #endregion

                                                //////////////////////////////////////////////////////////////////////////End of bottom view//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                #region top_view_creation

                                                if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                                                {

                                                    TSD.StraightDimensionSet.StraightDimensionSetAttributes dim_font_height = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                                    dim_font_height.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                                    {
                                                        if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                        {
                                                            dim_font_height.Text.Font.Height = 3.571875;
                                                        }
                                                        else
                                                        {
                                                            dim_font_height.Text.Font.Height = 3.175;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        dim_font_height.Text.Font.Height = 2.38125;


                                                    }

                                                    /////////////////BOTTOM VIEW CREATION //////////////////////////////////////

                                                    /////////////////////////////////////////////////////DECLARING VIEW NAME FOR BOTTOM VIEW ///////////////////////////////////////                    
                                                    //TSD.View CREATE_BOTTOM_VIEW;
                                                    //TSD.View CREATE_BOTTOM_VIEW1;


                                                    ////////////////////////////////////////////////////BOTTOM VIEW ON AND OFF CONDITION ///////////////////////////////////////////
                                                    //if (BOTTOM_VIEW == "ON")
                                                    //{
                                                    //////////////////////////////////////////////////BOTTOM VIEW CREATION USING FUNCTION//////////////////////////////////////////

                                                    TSD.View CREATE_BOTTOM_VIEW = null;
                                                    TSD.View CREATE_BOTTOM_VIEW1 = null;
                                                    if (TOP_VIEW_needed != "yes")
                                                    {
                                                        TOP_view_creation(main, current_view, output, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]), out CREATE_BOTTOM_VIEW, out CREATE_BOTTOM_VIEW1, p3_bottm, p4_bottm, TOP_VIEW_TOCREATE, out TOP_view_FLANGE_CUT_LIST, drg_att);
                                                        Create_FLANGE_CUT_dimensions_top(CREATE_BOTTOM_VIEW, main, drg_att);
                                                        Create_FLANGE_CUT_dimensions_top(CREATE_BOTTOM_VIEW1, main, drg_att);
                                                    }

                                                    if ((CREATE_BOTTOM_VIEW != null) || (CREATE_BOTTOM_VIEW1 != null))
                                                    {
                                                        //////////////////////////////////////////////////FLANGE CUT DIMENSION ///////////////////////////////////////////////////////
                                                        if (TOP_VIEW_TOCREATE.Contains("ON") || TOP_VIEW_TOCREATE.Contains("RIGHT") || TOP_VIEW_TOCREATE.Contains("LEFT") || TOP_VIEW_TOCREATE.Contains("BOTH"))
                                                        {


                                                            //Create_FLANGE_CUT_dimensions(CREATE_BOTTOM_VIEW, main);


                                                            ///////////////////////////////////////////////////////////////////////

                                                            /////////BOLT RD DIMENSION//////////////
                                                            ///////////////////////////////////////////////////filtering bolts from all parts in top view/////////////////////////////////////////////////////////////////////////////
                                                            TSD.DrawingObjectEnumerator enum_for_bolt2 = CREATE_BOTTOM_VIEW.GetAllObjects(type_for_bolt);
                                                            TSG.Matrix bottom_mat = TSG.MatrixFactory.ToCoordinateSystem(CREATE_BOTTOM_VIEW.ViewCoordinateSystem);
                                                            TSD.PointList rd_point_list1 = new TSD.PointList();
                                                            ///////////////////////////////////////////////////getting bolt matrix points for bolt dimension///////////////////////////////////////////////////////////////////////////
                                                            while (enum_for_bolt2.MoveNext())
                                                            {
                                                                TSD.Bolt drgbolt = enum_for_bolt2.Current as TSD.Bolt;
                                                                TSM.ModelObject modelbolt = new TSM.Model().SelectModelObject(drgbolt.ModelIdentifier);
                                                                TSM.BoltArray bolt = modelbolt as TSM.BoltArray;


                                                                if (bottom_mat.Transform((bolt.BoltPositions[0]) as TSG.Point).Z < (bottom_mat.Transform(main.EndPoint).Z) - Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2)
                                                                {
                                                                    TSD.Bolt drgbolt1 = drgbolt;
                                                                    TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix(drgbolt1, CREATE_BOTTOM_VIEW);
                                                                    if (POINT_FOR_BOLT_MATRIX != null)
                                                                    {
                                                                        int y = POINT_FOR_BOLT_MATRIX.GetLength(0);
                                                                        int x = POINT_FOR_BOLT_MATRIX.GetLength(1);
                                                                        for (int i = 0; i < x; i++)
                                                                        {
                                                                            ///////////////////////////////////////////// condition for getting last row of bolts//////////////////////////////////////////////////////////////////////////////////////////////
                                                                            rd_point_list1.Add(POINT_FOR_BOLT_MATRIX[y - 1, i]);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            /////////////////////////////////////////////////// removing duplicate points from boltpoints///////////////////////////////////////////////////////////////////////////////           
                                                            TSD.PointList FINAL_RD_LIST2 = pointlist_remove_duplicate_Xvalues(rd_point_list1);
                                                            FINAL_RD_LIST2.Add(new TSG.Point(0, 0, 0));
                                                            sorting_points_by_x_asc(FINAL_RD_LIST2);
                                                            /////////////////////////////////////////////////// inserting bolt rd dimension ////////////////////////////////////////////////////////////////////////////////////////
                                                            TSD.StraightDimensionSetHandler bolt_rd_dim1 = new TSD.StraightDimensionSetHandler();
                                                            try
                                                            {
                                                                TSD.StraightDimensionSet.StraightDimensionSetAttributes rd_att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                                                rd_att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                                                rd_att.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
                                                                rd_att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                                                                rd_att.Color = DrawingColors.Gray70;
                                                                rd_att.Text.Font.Color = DrawingColors.Gray70;
                                                                rd_att.Arrowhead.Head = ArrowheadTypes.FilledArrow;
                                                                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                                                {
                                                                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                                    {
                                                                        rd_att.Text.Font.Height = 3.571875;
                                                                    }
                                                                    else
                                                                    {
                                                                        rd_att.Text.Font.Height = 3.175;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    rd_att.Text.Font.Height = 2.38125;


                                                                }
                                                                ////////////////////////////////////////////////////dimension distance placing linking /////////////////////////////////////////////////////////////////////////////////////////
                                                                double distance = Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2;
                                                                TSG.Point p1 = (FINAL_RD_LIST2[FINAL_RD_LIST2.Count - 1] as TSG.Point);
                                                                TSG.Point p2 = new TSG.Point((FINAL_RD_LIST2[FINAL_RD_LIST2.Count - 1] as TSG.Point).X, distance, 0);
                                                                double distance_value = TSG.Distance.PointToPoint(p1, p2);
                                                                /////////////////////////////////////////////////////rd dimension creation //////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                bolt_rd_dim1.CreateDimensionSet(CREATE_BOTTOM_VIEW, FINAL_RD_LIST2, new TSG.Vector(0, 1, 0), distance_value, rd_att);
                                                            }
                                                            catch
                                                            {
                                                            }
                                                            //////////////End of bolt rd dimension FOR BottomVIEW //////////////////////////






                                                            //////////////3x3 dimension for top view/////////////////////
                                                            TSD.DrawingObjectEnumerator enum_for_bolt3 = CREATE_BOTTOM_VIEW.GetAllObjects(type_for_bolt);
                                                            while (enum_for_bolt3.MoveNext())
                                                            {
                                                                TSD.PointList list3x3 = new TSD.PointList();
                                                                TSD.Bolt drgbolt = enum_for_bolt3.Current as TSD.Bolt;
                                                                TSM.ModelObject modelbolt = new TSM.Model().SelectModelObject(drgbolt.ModelIdentifier);
                                                                TSM.BoltArray bolt = modelbolt as TSM.BoltArray;

                                                                if (bottom_mat.Transform((bolt.BoltPositions[0]) as TSG.Point).Z < (bottom_mat.Transform(main.EndPoint).Z) - Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2)
                                                                {
                                                                    TSD.Bolt drgbolt1 = drgbolt;
                                                                    TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix(drgbolt1, CREATE_BOTTOM_VIEW);
                                                                    if (POINT_FOR_BOLT_MATRIX != null)
                                                                    {
                                                                        int y = POINT_FOR_BOLT_MATRIX.GetLength(0);
                                                                        int x = POINT_FOR_BOLT_MATRIX.GetLength(1);
                                                                        for (int i = 0; i < y; i++)
                                                                        {
                                                                            /////////////////////////////////////////////////// condition for getting last row of bolts//////////////////////////////////////////////////////////////////////////////////////////////
                                                                            list3x3.Add(POINT_FOR_BOLT_MATRIX[i, x - 1]);
                                                                        }
                                                                        /////////////////////////////////////////////////// removing duplicate points from boltpoints///////////////////////////////////////////////////////////////////////////////           
                                                                        TSD.PointList FINAL_list3x3 = pointlist_remove_duplicate_Yvalues(list3x3);
                                                                        FINAL_list3x3.Add(new TSG.Point(list3x3[0].X, 0, 0));
                                                                        /////////////////////////////////////////////////// inserting bolt 3X3 dimension ////////////////////////////////////////////////////////////////////////////////////////
                                                                        TSD.StraightDimensionSetHandler dim_3x3 = new TSD.StraightDimensionSetHandler();
                                                                        try
                                                                        {

                                                                            //TSG.Point p1 = (FINAL_list3x3[FINAL_list3x3.Count - 1] as TSG.Point);
                                                                            //TSG.Point p2 = new TSG.Point((FINAL_list3x3[FINAL_list3x3.Count - 1] as TSG.Point).X, 0, 0);
                                                                            //double distance_value = TSG.Distance.PointToPoint(p1, p2);
                                                                            dim_3x3.CreateDimensionSet(CREATE_BOTTOM_VIEW, FINAL_list3x3, new TSG.Vector(1, 0, 0), 200, fixed_attributes);
                                                                        }
                                                                        catch
                                                                        {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            ////////////////////end of 3x3 dimension  for top view///////////////////////







                                                            ///////////////////////////////////////////////////////////////////////

                                                        }
                                                    }

                                                    //else if (BOTTOM_VIEW == "OFF")
                                                    //{
                                                    //}





                                                }


                                                #endregion



                                            }


                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes dim_font_height1 = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                            dim_font_height1.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                            {
                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                {
                                                    dim_font_height1.Text.Font.Height = 3.571875;
                                                }
                                                else
                                                {
                                                    dim_font_height1.Text.Font.Height = 3.175;
                                                }
                                            }
                                            else
                                            {
                                                dim_font_height1.Text.Font.Height = 2.38125;


                                            }


                                            List<TSD.View> sectionviews_in_drawing = new List<TSD.View>();

                                            #region SECTION_VIEW
                                            /////////////////////////////////////////////////bolt gage dimension in section view using matrix function /////////////////////////////////////////////////////////////
                                            for (int z = 0; z < list.Count; z++)
                                            {
                                                ///////////////////////////////////////////////////filtering bolts from all parts in section view/////////////////////////////////////////////////////////////////////////////
                                                TSD.View current_view = list[z].myview;

                                                if (current_view != null)
                                                {
                                                    Type[] type_for_dim = new Type[] { typeof(TSD.StraightDimension), typeof(TSD.StraightDimensionSet), typeof(TSD.AngleDimension) };
                                                    TSD.DrawingObjectEnumerator dim_drg = current_view.GetAllObjects(type_for_dim);
                                                    while (dim_drg.MoveNext())
                                                    {
                                                        var obj = dim_drg.Current;
                                                        obj.Delete();

                                                    }

                                                    if (chksecscale.Checked == true)
                                                    {
                                                        current_view.Attributes.Scale = SCALE + Convert.ToDouble(cmbsecscale.Text);
                                                        current_view.Modify();
                                                    }
                                                    else
                                                    {
                                                        current_view.Attributes.Scale = SCALE;
                                                        current_view.Modify();
                                                    }
                                                    List<Guid> SECTION_VIEW_BOLTMARK_TO_RETAIN_POS = new List<Guid>();
                                                    List<Guid> SECTION_VIEW_BOLTMARK_TO_RETAIN_NEG = new List<Guid>();
                                                    List<Guid> SECTION_VIEW_PARTMARK_TO_RETAIN = new List<Guid>();
                                                    current_view.Modify();
                                                    sectionviews_in_drawing.Add(current_view);
                                                    SECTION_VIEW_PART_MARK_DELETE(current_view, my_handler);
                                                    TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                    List<TSD.Bolt> bolt_list = new List<TSD.Bolt>();

                                                    double minx = current_view.RestrictionBox.MinPoint.X;
                                                    double miny = current_view.RestrictionBox.MinPoint.Y;
                                                    double maxx = current_view.RestrictionBox.MaxPoint.X;
                                                    double maxy = current_view.RestrictionBox.MaxPoint.Y;

                                                    foreach (var list_of_parts in list[z].req_partlist)
                                                    {
                                                        TSD.PointList rd_point_list = new TSD.PointList();
                                                        TSM.Part mypart = list_of_parts as TSM.Part;

                                                        SECTION_VIEW_PARTMARK_TO_RETAIN.Add(mypart.Identifier.GUID);

                                                        TSD.PointList angle_hole_locking_check = bounding_box_sort_y(list_of_parts as TSM.ModelObject, current_view);


                                                        TSM.ModelObjectEnumerator enum_for_bolt = list_of_parts.GetBolts();
                                                        //ts.DrawingObjectEnumerator enum_for_bolt = current_view.GetAllObjects(type_for_bolt);
                                                        string prof_typ = get_report_properties(mypart, "PROFILE_TYPE");


                                                        if (prof_typ == "L")
                                                        {

                                                            angle_place_check_for_hole_locking(angle_hole_locking_check, out rd_point_list, enum_for_bolt, current_view, ref SECTION_VIEW_PARTMARK_TO_RETAIN, ref SECTION_VIEW_BOLTMARK_TO_RETAIN_POS, ref SECTION_VIEW_BOLTMARK_TO_RETAIN_NEG);
                                                            TSD.PointList FINAL_RD_LIST = new TSD.PointList();
                                                            FINAL_RD_LIST = pointlist_remove_duplicate_Xvalues(rd_point_list);

                                                            /////////////////////////////////////////////////// inserting bolt gage dimension ////////////////////////////////////////////////////////////////////////////////////////
                                                            double ht = Convert.ToInt64(MAINPART_PROFILE_VALUES[0]);
                                                            double height = Convert.ToInt64(ht / 2);

                                                            TSD.PointList FINAL_RD_LIST_within_ht = new TSD.PointList();

                                                            TSD.PointList FINAL_RD_LIST_above_fl = new TSD.PointList();
                                                            TSD.PointList FINAL_RD_LIST_below_fl = new TSD.PointList();


                                                            string profile_type_for_section = "";
                                                            main_part.GetReportProperty("PROFILE_TYPE", ref profile_type_for_section);

                                                            if (profile_type_for_section == "U")
                                                            {
                                                                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
                                                                TSG.Vector zvector = main_part.GetCoordinateSystem().AxisX.Cross(main_part.GetCoordinateSystem().AxisY);
                                                                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                                                                zvector.Normalize();
                                                                double WT = 0;


                                                                double WT2 = Convert.ToDouble(catalog_values[1]);
                                                                if (zvector.X > 0)
                                                                {
                                                                    WT = (-WT2 / 2);
                                                                }
                                                                else
                                                                {
                                                                    WT = (WT2 / 2);
                                                                }
                                                                FINAL_RD_LIST_within_ht.Add(new TSG.Point(WT, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_above_fl.Add(new TSG.Point(WT, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_below_fl.Add(new TSG.Point(WT, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));

                                                            }
                                                            else
                                                            {

                                                                FINAL_RD_LIST_within_ht.Add(new TSG.Point(0, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_above_fl.Add(new TSG.Point(0, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_below_fl.Add(new TSG.Point(0, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                            }
                                                            foreach (TSG.Point PT in FINAL_RD_LIST)
                                                            {
                                                                if ((Convert.ToInt64(PT.Y) < height) && (Convert.ToInt64(PT.Y) > -height))
                                                                {
                                                                    FINAL_RD_LIST_within_ht.Add(PT);

                                                                }
                                                                else if (Convert.ToInt64(PT.Y) > height)
                                                                {
                                                                    FINAL_RD_LIST_above_fl.Add(PT);

                                                                }
                                                                else if (Convert.ToInt64(PT.Y) < -height)
                                                                {
                                                                    FINAL_RD_LIST_below_fl.Add(PT);

                                                                }
                                                            }




                                                            sorting_points_by_y_des(FINAL_RD_LIST_within_ht);
                                                            sorting_points_by_y_asc(FINAL_RD_LIST_above_fl);
                                                            sorting_points_by_y_des(FINAL_RD_LIST_below_fl);
                                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes inside = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                                            inside.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                                            {
                                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                                {
                                                                    inside.Text.Font.Height = 3.571875;
                                                                }
                                                                else
                                                                {
                                                                    inside.Text.Font.Height = 3.175;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                inside.Text.Font.Height = 2.38125;


                                                            }


                                                            try
                                                            {
                                                                TSD.StraightDimensionSetHandler bolt_gage_dim = new TSD.StraightDimensionSetHandler();
                                                                ////////////////////////////////////////////////////dimension distance placing linking /////////////////////////////////////////////////////////////////////////////////////////
                                                                //double distance = Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2;
                                                                //TSG.Point p1 = (FINAL_RD_LIST[FINAL_RD_LIST.Count - 2] as TSG.Point);
                                                                //TSG.Point p2 = new TSG.Point((FINAL_RD_LIST[FINAL_RD_LIST.Count - 1] as TSG.Point).X, distance, 0);
                                                                //double distance_value = TSG.Distance.PointToPoint(p1, p2);
                                                                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_within_ht[0].Y) - maxy);
                                                                //////////////////////////////////////////////////// rd dimension creation////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_within_ht, new TSG.Vector(0, 1, 0), distance1 + 75, inside);
                                                            }
                                                            catch
                                                            {
                                                            }


                                                            try
                                                            {
                                                                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_above_fl[0].Y) - maxy);
                                                                TSD.StraightDimensionSetHandler bolt_gage_dim = new TSD.StraightDimensionSetHandler();
                                                                bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_above_fl, new TSG.Vector(0, 1, 0), distance1 + 150, inside);
                                                            }
                                                            catch
                                                            {
                                                            }
                                                            try
                                                            {

                                                                TSD.StraightDimensionSetHandler bolt_gage_dim = new TSD.StraightDimensionSetHandler();
                                                                //bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_below_fl, new TSG.Vector(0, -1, 0), distance1 + 75, inside);
                                                                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_below_fl[0].Y) - miny);
                                                                //double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_below_fl[0].Y) - maxy);
                                                                /////ROSEPLASTIC//////////////
                                                                bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_below_fl, new TSG.Vector(0, -1, 0), distance1 + 75, inside);
                                                            }
                                                            catch
                                                            {
                                                            }
                                                        }
                                                        ///////////////////////////////////////////////////getting bolt matrix points for bolt dimension///////////////////////////////////////////////////////////////////////////


                                                        else
                                                        {


                                                            ///////////////////////////////////////////////////getting bolt matrix points for bolt dimension///////////////////////////////////////////////////////////////////////////

                                                            while (enum_for_bolt.MoveNext())
                                                            {
                                                                //TSD.Bolt drgbolt = enum_for_bolt.Current as TSD.Bolt;
                                                                TSM.BoltGroup drgbolt = enum_for_bolt.Current as TSM.BoltGroup;




                                                                TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(drgbolt, current_view);


                                                                ///////////////////////////////////////////////////condition for depth adjustment////////////////////////////////////////////////////////////////////////////////////////////
                                                                //////////////////////////////////////////////////// filtering bolts which lies within the section depth/////////////////////////////////////////////////////////////////////                       
                                                                double upper_limit = current_view.RestrictionBox.MaxPoint.Z;
                                                                double lower_limit = current_view.RestrictionBox.MinPoint.Z;
                                                                if (POINT_FOR_BOLT_MATRIX != null)
                                                                {
                                                                    if ((POINT_FOR_BOLT_MATRIX[0, 0].Z > lower_limit) && (POINT_FOR_BOLT_MATRIX[0, 0].Z < upper_limit))
                                                                    {
                                                                        int y = POINT_FOR_BOLT_MATRIX.GetLength(0);
                                                                        int x = POINT_FOR_BOLT_MATRIX.GetLength(1);
                                                                        for (int i = 0; i < x; i++)
                                                                        {
                                                                            //////////////////////////////////////////// condition for getting last row of bolts//////////////////////////////////////////////////////////////////////////////////////////////
                                                                            rd_point_list.Add(POINT_FOR_BOLT_MATRIX[y - 1, i]);
                                                                        }
                                                                        if (POINT_FOR_BOLT_MATRIX[0, 0].X > 0)
                                                                        {
                                                                            SECTION_VIEW_BOLTMARK_TO_RETAIN_POS.Add(drgbolt.Identifier.GUID);
                                                                        }
                                                                        if (POINT_FOR_BOLT_MATRIX[0, 0].X < 0)
                                                                        {
                                                                            SECTION_VIEW_BOLTMARK_TO_RETAIN_NEG.Add(drgbolt.Identifier.GUID);
                                                                        }
                                                                    }
                                                                }
                                                            }




                                                            /////////////////////////////////////////////////// removing duplicate points from boltpoints///////////////////////////////////////////////////////////////////////////////           
                                                            TSD.PointList FINAL_RD_LIST = new TSD.PointList();
                                                            FINAL_RD_LIST = pointlist_remove_duplicate_Xvalues(rd_point_list);

                                                            /////////////////////////////////////////////////// inserting bolt gage dimension ////////////////////////////////////////////////////////////////////////////////////////
                                                            double ht = Convert.ToInt64(MAINPART_PROFILE_VALUES[0]);
                                                            double height = Convert.ToInt64(ht / 2);

                                                            TSD.PointList FINAL_RD_LIST_within_ht = new TSD.PointList();

                                                            TSD.PointList FINAL_RD_LIST_above_fl = new TSD.PointList();
                                                            TSD.PointList FINAL_RD_LIST_below_fl = new TSD.PointList();


                                                            string profile_type_for_section = "";
                                                            main_part.GetReportProperty("PROFILE_TYPE", ref profile_type_for_section);

                                                            if (profile_type_for_section == "U")
                                                            {
                                                                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
                                                                TSG.Vector zvector = main_part.GetCoordinateSystem().AxisX.Cross(main_part.GetCoordinateSystem().AxisY);
                                                                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                                                                zvector.Normalize();
                                                                double WT = 0;


                                                                double WT2 = Convert.ToDouble(catalog_values[1]);
                                                                if (zvector.X > 0)
                                                                {
                                                                    WT = (-WT2 / 2);
                                                                }
                                                                else
                                                                {
                                                                    WT = (WT2 / 2);
                                                                }
                                                                FINAL_RD_LIST_within_ht.Add(new TSG.Point(WT, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_above_fl.Add(new TSG.Point(WT, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_below_fl.Add(new TSG.Point(WT, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));

                                                            }
                                                            else
                                                            {

                                                                FINAL_RD_LIST_within_ht.Add(new TSG.Point(0, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_above_fl.Add(new TSG.Point(0, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_below_fl.Add(new TSG.Point(0, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                            }
                                                            foreach (TSG.Point PT in FINAL_RD_LIST)
                                                            {
                                                                if ((Convert.ToInt64(PT.Y) < height) && (Convert.ToInt64(PT.Y) > -height))
                                                                {
                                                                    FINAL_RD_LIST_within_ht.Add(PT);

                                                                }
                                                                else if (Convert.ToInt64(PT.Y) > height)
                                                                {
                                                                    FINAL_RD_LIST_above_fl.Add(PT);

                                                                }
                                                                else if (Convert.ToInt64(PT.Y) < -height)
                                                                {
                                                                    FINAL_RD_LIST_below_fl.Add(PT);

                                                                }
                                                            }




                                                            sorting_points_by_y_des(FINAL_RD_LIST_within_ht);
                                                            sorting_points_by_y_asc(FINAL_RD_LIST_above_fl);
                                                            sorting_points_by_y_des(FINAL_RD_LIST_below_fl);
                                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes inside = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                                            inside.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                                            {
                                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                                {
                                                                    inside.Text.Font.Height = 3.571875;
                                                                }
                                                                else
                                                                {
                                                                    inside.Text.Font.Height = 3.175;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                inside.Text.Font.Height = 2.38125;


                                                            }


                                                            try
                                                            {
                                                                TSD.StraightDimensionSetHandler bolt_gage_dim = new TSD.StraightDimensionSetHandler();
                                                                ////////////////////////////////////////////////////dimension distance placing linking /////////////////////////////////////////////////////////////////////////////////////////
                                                                //double distance = Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2;
                                                                //TSG.Point p1 = (FINAL_RD_LIST[FINAL_RD_LIST.Count - 2] as TSG.Point);
                                                                //TSG.Point p2 = new TSG.Point((FINAL_RD_LIST[FINAL_RD_LIST.Count - 1] as TSG.Point).X, distance, 0);
                                                                //double distance_value = TSG.Distance.PointToPoint(p1, p2);
                                                                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_within_ht[0].Y) - maxy);
                                                                //////////////////////////////////////////////////// rd dimension creation////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_within_ht, new TSG.Vector(0, 1, 0), distance1 + 75, inside);
                                                            }
                                                            catch
                                                            {
                                                            }


                                                            try
                                                            {
                                                                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_above_fl[0].Y) - maxy);
                                                                TSD.StraightDimensionSetHandler bolt_gage_dim = new TSD.StraightDimensionSetHandler();
                                                                bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_above_fl, new TSG.Vector(0, 1, 0), distance1 + 150, inside);
                                                            }
                                                            catch
                                                            {
                                                            }
                                                            try
                                                            {

                                                                TSD.StraightDimensionSetHandler bolt_gage_dim = new TSD.StraightDimensionSetHandler();
                                                                //bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_below_fl, new TSG.Vector(0, -1, 0), distance1 + 75, inside);
                                                                //double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_below_fl[0].Y) - miny);
                                                                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_below_fl[0].Y) - maxy);
                                                                /////ROSEPLASTIC//////////////
                                                                bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_below_fl, new TSG.Vector(0, 1, 0), distance1 + 75, inside);
                                                            }
                                                            catch
                                                            {
                                                            }

                                                        }
                                                    }
                                                    ///////////////////END OF RD DIMENSION//////////////////////
                                                    /////////////////3x3 dimension////////////////////////
                                                    ///////////////////////////////////////////////////filtering bolts from all parts in front view/////////////////////////////////////////////////////////////////////////////

                                                    TSD.StraightDimensionSetHandler dim_3x3 = new TSD.StraightDimensionSetHandler();
                                                    double x1 = 75;
                                                    double x2 = 75;
                                                    foreach (var list_of_parts in list[z].req_partlist)
                                                    {
                                                        TSM.Part mypart = list_of_parts as TSM.Part;
                                                        double ht = Convert.ToInt64(MAINPART_PROFILE_VALUES[0]);
                                                        double height = Convert.ToInt64(ht / 2);
                                                        string BOLT_DIM = BOLT_IN_VIEW(mypart, current_view);
                                                        if (BOLT_DIM == "NEED")
                                                        {
                                                            TSD.PointList list3x3 = new TSD.PointList();
                                                            TSM.ModelObjectEnumerator enum_for_bolt1 = list_of_parts.GetBolts();
                                                            //TSD.DrawingObjectEnumerator enum_for_bolt1 = current_view.GetAllObjects(type_for_bolt);

                                                            ///////////////////////////////////////////////////getting bolt matrix points for bolt 3x3 dimension///////////////////////////////////////////////////////////////////////////
                                                            while (enum_for_bolt1.MoveNext())
                                                            {
                                                                TSM.BoltGroup drgbolt = enum_for_bolt1.Current as TSM.BoltGroup;
                                                                //TSD.Bolt drgbolt = enum_for_bolt1.Current as TSD.Bolt;
                                                                TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(drgbolt, current_view);
                                                                double upper_limit = current_view.RestrictionBox.MaxPoint.Z;
                                                                double lower_limit = current_view.RestrictionBox.MinPoint.Z;
                                                                //TSM.ModelObject mymodel_ = new TSM.Model().SelectModelObject(drgbolt.ModelIdentifier);
                                                                TSM.BoltGroup mybolt = drgbolt;
                                                                if (POINT_FOR_BOLT_MATRIX != null)
                                                                {
                                                                    if ((POINT_FOR_BOLT_MATRIX[0, 0].Z > lower_limit) && (POINT_FOR_BOLT_MATRIX[0, 0].Z < upper_limit))
                                                                    {
                                                                        int y = POINT_FOR_BOLT_MATRIX.GetLength(0);
                                                                        int x = POINT_FOR_BOLT_MATRIX.GetLength(1);

                                                                        if ((POINT_FOR_BOLT_MATRIX[0, 0].X < 0) && (POINT_FOR_BOLT_MATRIX[0, x - 1].X > 0) || (POINT_FOR_BOLT_MATRIX[0, 0].X > 0) && (POINT_FOR_BOLT_MATRIX[0, x - 1].X < 0))
                                                                        {


                                                                            foreach (TSG.Point pt in mybolt.BoltPositions)
                                                                            {
                                                                                TSG.Point p1 = toviewmatrix.Transform(pt);

                                                                                list3x3.Add(p1);
                                                                            }



                                                                        }

                                                                        else if ((POINT_FOR_BOLT_MATRIX[0, 0].X > 0))
                                                                        {


                                                                            for (int i = 0; i < y; i++)
                                                                            {
                                                                                /////////////////////////////////////////////////// condition for getting last row of bolts//////////////////////////////////////////////////////////////////////////////////////////////
                                                                                list3x3.Add(POINT_FOR_BOLT_MATRIX[i, x - 1]);
                                                                            }

                                                                        }
                                                                        else if ((POINT_FOR_BOLT_MATRIX[0, 0].X < 0))
                                                                        {


                                                                            for (int i = 0; i < y; i++)
                                                                            {
                                                                                /////////////////////////////////////////////////// condition for getting last row of bolts//////////////////////////////////////////////////////////////////////////////////////////////
                                                                                list3x3.Add(POINT_FOR_BOLT_MATRIX[i, 0]);
                                                                            }

                                                                        }
                                                                    }
                                                                }

                                                                else
                                                                {

                                                                    foreach (TSG.Point pt in mybolt.BoltPositions)
                                                                    {
                                                                        TSG.Point p1 = toviewmatrix.Transform(pt);

                                                                        list3x3.Add(p1);


                                                                        if (p1.X > 0)
                                                                        {
                                                                            SECTION_VIEW_BOLTMARK_TO_RETAIN_POS.Add(drgbolt.Identifier.GUID);
                                                                        }
                                                                        else if (p1.X < 0)
                                                                        {
                                                                            SECTION_VIEW_BOLTMARK_TO_RETAIN_NEG.Add(drgbolt.Identifier.GUID);
                                                                        }

                                                                    }


                                                                }

                                                            }

                                                            /////////////////////////////////////////////////// removing duplicate points from boltpoints///////////////////////////////////////////////////////////////////////////////           
                                                            //  TSD.PointList FINAL_list3x3 = pointlist_remove_duplicate_Yvalues(list3x3);
                                                            TSD.PointList FINAL_list3x3 = list3x3;
                                                            TSD.PointList FINAL_list3x3_positive = new TSD.PointList();
                                                            TSD.PointList FINAL_list3x3_negative = new TSD.PointList();
                                                            TSG.Vector VECTOR1 = new TSG.Vector();
                                                            TSG.Vector VECTOR2 = new TSG.Vector();
                                                            /////////////////////////////////////////////////// ASSIGNING VECTOR AND ADDING TOP POINT IN 3X3 DIMENSION(BEAM TOP FLANGE)//////////////////////////////////////////
                                                            try
                                                            {
                                                                foreach (TSG.Point pt in FINAL_list3x3)
                                                                {
                                                                    if (Convert.ToInt64(pt.X) > 0)
                                                                    {
                                                                        FINAL_list3x3_positive.Add(pt);



                                                                    }
                                                                    else if (Convert.ToInt64(pt.X) < 0)
                                                                    {
                                                                        FINAL_list3x3_negative.Add(pt);


                                                                    }
                                                                }
                                                            }
                                                            catch
                                                            {
                                                            }

                                                            string prof_typ = get_report_properties(mypart, "PROFILE_TYPE");

                                                            if (prof_typ == "L")
                                                            {





                                                                ANGLE_BOLT_DIM(FINAL_list3x3_positive, FINAL_list3x3_negative, height, current_view, MAINPART_PROFILE_VALUES, maxx, minx, drg_att);

                                                            }
                                                            else
                                                            {
                                                                FINAL_list3x3_positive.Add(new TSG.Point((Convert.ToDouble(MAINPART_PROFILE_VALUES[1])) / 2, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));

                                                                VECTOR1 = new TSG.Vector(1, 0, 0);

                                                                FINAL_list3x3_negative.Add(new TSG.Point(-(Convert.ToDouble(MAINPART_PROFILE_VALUES[1])) / 2, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));

                                                                VECTOR2 = new TSG.Vector(-1, 0, 0);


                                                                /////////////////////////////////////////////////// inserting bolt 3X3 dimension ////////////////////////////////////////////////////////////////////////////////////////

                                                                try
                                                                {
                                                                    double distance1 = Math.Abs(Math.Abs(FINAL_list3x3_positive[0].X) - Math.Abs(maxx));
                                                                    dim_3x3.CreateDimensionSet(current_view, FINAL_list3x3_positive, VECTOR1, distance1 + x1, fixed_attributes);
                                                                    x1 = x1 + 50;
                                                                }
                                                                catch
                                                                {
                                                                }

                                                                try
                                                                {
                                                                    double distance1 = Math.Abs(Math.Abs(FINAL_list3x3_negative[0].X) - Math.Abs(minx));
                                                                    dim_3x3.CreateDimensionSet(current_view, FINAL_list3x3_negative, VECTOR2, distance1 + x2, fixed_attributes);
                                                                    x2 = x2 + 50;
                                                                }
                                                                catch
                                                                {
                                                                }
                                                            }
                                                        }

                                                    }


                                                    /////////////////END OF 3x3 dimension for SECTION VIEW////////////////////////


                                                    //////////////////////////////////////////pour stopper code//////////////////////////////////////////////////

                                                    foreach (var list_of_parts in list[z].req_partlist)
                                                    {


                                                        TSM.Part mypart = list_of_parts as TSM.Part;
                                                        TSD.PointList mypt = bounding_box_sort_z(list_of_parts, current_view);
                                                        TSD.PointList mypt_final = new TSD.PointList();
                                                        TSD.PointList mypt_finalFOR_LEG = new TSD.PointList();
                                                        double height11 = Convert.ToDouble(MAINPART_PROFILE_VALUES[0]);
                                                        double h1 = Convert.ToInt64(height11 / 2);
                                                        string prof_type = "";
                                                        mypart.GetReportProperty("PROFILE_TYPE", ref prof_type);
                                                        mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                                                        TSG.CoordinateSystem angle_cood = list_of_parts.GetCoordinateSystem();
                                                        mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());


                                                        if (!mypart.Name.Contains("STUD") && !mypart.Equals(main_part) && !mypart.Name.Contains("GUSSET"))
                                                        {

                                                            if ((Convert.ToInt64(mypt[0].Y) >= h1) && (Convert.ToInt64(mypt[1].Y) >= h1))
                                                            {
                                                                TSM.ModelObjectEnumerator enum_for_bolt = mypart.GetBolts();
                                                                int s = enum_for_bolt.GetSize();
                                                                if (s > 0)
                                                                {
                                                                    //if (!angle_cood.AxisX.X.Equals(0))
                                                                    //{
                                                                    List<TSG.Point[,]> check_for_bolt_in_part = new List<TSG.Point[,]>();
                                                                    while (enum_for_bolt.MoveNext())
                                                                    {
                                                                        TSM.BoltGroup drgbolt = enum_for_bolt.Current as TSM.BoltGroup;
                                                                        TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(drgbolt, current_view);
                                                                        check_for_bolt_in_part.Add(POINT_FOR_BOLT_MATRIX);
                                                                    }
                                                                    bool result_for_check_for_bolt_in_part = check_for_bolt_in_part.All(x => x == null);
                                                                    if ((result_for_check_for_bolt_in_part == true) && (prof_type != "L"))
                                                                    {
                                                                        if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {


                                                                                mypt_final.Add(mypt[1]);


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }
                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }




                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) < 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {
                                                                                mypt_final.Add(new TSG.Point(mypt[0].X, mypt[1].Y, 0));


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }




                                                                                ///////////////   face_of_angle_logic_need_to_be_copied////////

                                                                                List<angle_face_area> myreq = getface_for_angle(mypart);
                                                                                TSD.PointList p1 = angle_pts_for_section(myreq, current_view);

                                                                                if (mypt[1].X > mypt[0].X)
                                                                                {
                                                                                    mypt_finalFOR_LEG.Add(new TSG.Point(mypt[0].X, mypt[0].Y, mypt[1].Z));
                                                                                    mypt_finalFOR_LEG.Add(new TSG.Point(mypt[0].X, mypt[1].Y, mypt[0].Z));

                                                                                }
                                                                                else
                                                                                {
                                                                                    mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                    mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                }
                                                                                try
                                                                                {
                                                                                    TSG.Vector myvector = new TSG.Vector();
                                                                                    double distance1 = 0;
                                                                                    if (mypt_finalFOR_LEG[0].X < 0)
                                                                                    {
                                                                                        myvector = new TSG.Vector(-1, 0, 0);
                                                                                        //distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(minx));
                                                                                        distance1 = Math.Abs(minx) - Math.Abs(mypt_finalFOR_LEG[0].X);
                                                                                        distance1 = distance1 + 150;
                                                                                    }
                                                                                    else
                                                                                    {

                                                                                        myvector = new TSG.Vector(1, 0, 0);
                                                                                        distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                        distance1 = distance1 + 150;
                                                                                    }


                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, myvector, distance1, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }


                                                                            }

                                                                        }



                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) > 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }

                                                                    }
                                                                    else
                                                                    {
                                                                        if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {


                                                                                mypt_final.Add(mypt[1]);


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }
                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }




                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) < 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                mypt_final.Add(new TSG.Point(mypt[0].X, mypt[1].Y, 0));


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                                ///////////////////////2018*///////////////////
                                                                                TSG.Vector VECTOR_FOR_ANGLE = new TSG.Vector();
                                                                                if ((mypt[0].X > 0) && (mypt[1].X > 0))
                                                                                {
                                                                                    VECTOR_FOR_ANGLE = new TSG.Vector(1, 0, 0);

                                                                                }
                                                                                else
                                                                                {

                                                                                    VECTOR_FOR_ANGLE = new TSG.Vector(-1, 0, 0);

                                                                                }

                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);

                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(new TSG.Point(mypt[0].X, mypt[1].Y, mypt[1].Z));
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, VECTOR_FOR_ANGLE, distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }


                                                                            }

                                                                        }



                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) > 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                    //////////////////WHY/////////////////
                                                                                    //dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }
                                                                                ///////////////////////////////////2018/////////////////////////////////////////////////////
                                                                                TSG.Vector VECTOR_FOR_ANGLE = new TSG.Vector();
                                                                                if ((mypt[0].X > 0) && (mypt[1].X > 0))
                                                                                {
                                                                                    VECTOR_FOR_ANGLE = new TSG.Vector(1, 0, 0);

                                                                                }
                                                                                else
                                                                                {

                                                                                    VECTOR_FOR_ANGLE = new TSG.Vector(-1, 0, 0);

                                                                                }
                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, VECTOR_FOR_ANGLE, distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }

                                                                    }

                                                                    //}
                                                                    //else
                                                                    //{ 
                                                                    //}
                                                                }


                                                                else
                                                                {


                                                                    if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {



                                                                            mypt_final.Add(mypt[1]);


                                                                            mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }
                                                                            mypt_finalFOR_LEG.Add(mypt[0]);
                                                                            mypt_finalFOR_LEG.Add(mypt[1]);
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }



                                                                        }

                                                                    }




                                                                    if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) < 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {

                                                                            mypt_final.Add(new TSG.Point(mypt[0].X, mypt[1].Y, 0));


                                                                            mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }

                                                                            mypt_finalFOR_LEG.Add(mypt[0]);
                                                                            mypt_finalFOR_LEG.Add(mypt[1]);
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }


                                                                        }

                                                                    }



                                                                    if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) > 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {

                                                                            mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));


                                                                            mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }

                                                                            mypt_finalFOR_LEG.Add(mypt[0]);
                                                                            mypt_finalFOR_LEG.Add(mypt[1]);
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }



                                                                        }

                                                                    }


                                                                }

                                                            }

                                                            else if ((Convert.ToInt64(mypt[0].Y) <= -h1) && (Convert.ToInt64(mypt[1].Y) >= -h1))
                                                            {
                                                                TSM.ModelObjectEnumerator enum_for_bolt = mypart.GetBolts();
                                                                int s = enum_for_bolt.GetSize();
                                                                if (s > 0)
                                                                {
                                                                    List<TSG.Point[,]> check_for_bolt_in_part = new List<TSG.Point[,]>();
                                                                    while (enum_for_bolt.MoveNext())
                                                                    {
                                                                        TSM.BoltGroup drgbolt = enum_for_bolt.Current as TSM.BoltGroup;
                                                                        TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(drgbolt, current_view);
                                                                        check_for_bolt_in_part.Add(POINT_FOR_BOLT_MATRIX);
                                                                    }
                                                                    bool result_for_check_for_bolt_in_part = check_for_bolt_in_part.All(x => x == null);

                                                                    if ((result_for_check_for_bolt_in_part == true) && (prof_type != "L"))
                                                                    {
                                                                        if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {



                                                                                mypt_final.Add(mypt[1]);

                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));


                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }


                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }




                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) < 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                mypt_final.Add(new TSG.Point(mypt[0].X, mypt[1].Y, 0));


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }



                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) > 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                if ((Convert.ToInt64(mypt[0].Y) < 0) && (Convert.ToInt64(mypt[1].Y) < 0))
                                                                                {

                                                                                    mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                                    mypt_final.Add(new TSG.Point(0, 0, 0));



                                                                                    TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                        dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }

                                                                                    mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                    mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                        dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }

                                                                                }


                                                                                if ((Convert.ToInt64(mypt[0].Y) > 0) && (Convert.ToInt64(mypt[1].Y) > 0))
                                                                                {
                                                                                    mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                                    mypt_final.Add(new TSG.Point(0, 0, 0));



                                                                                    TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                        dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }

                                                                                    mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                    mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                        dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }

                                                                                }

                                                                            }

                                                                        }


                                                                    }
                                                                    else
                                                                    {

                                                                        if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));
                                                                                mypt_final.Add(mypt[1]);




                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }


                                                                                TSG.Vector VECTOR_FOR_ANGLE = new TSG.Vector();
                                                                                if ((mypt[0].X > 0) && (mypt[1].X > 0))
                                                                                {
                                                                                    VECTOR_FOR_ANGLE = new TSG.Vector(1, 0, 0);

                                                                                }
                                                                                else
                                                                                {

                                                                                    VECTOR_FOR_ANGLE = new TSG.Vector(-1, 0, 0);

                                                                                }
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                mypt_finalFOR_LEG.Add(new TSG.Point(mypt[1].X, mypt[0].Y, mypt[0].Z));


                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, VECTOR_FOR_ANGLE, distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }




                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) < 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                mypt_final.Add(new TSG.Point(mypt[0].X, mypt[1].Y, 0));


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    ///1//////
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(new TSG.Point(mypt[0].X, mypt[1].Y, mypt[1].Z));
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(-1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }



                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) > 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                if ((Convert.ToInt64(mypt[0].Y) < 0) && (Convert.ToInt64(mypt[1].Y) < 0))
                                                                                {

                                                                                    mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                                    mypt_final.Add(new TSG.Point(0, 0, 0));



                                                                                    TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));

                                                                                        ////////////////////////WHY////////////////
                                                                                        //dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }
                                                                                    ////////////////////////////////////////////////2018////////////////////////////////////////

                                                                                    TSG.Vector VECTOR_FOR_ANGLE = new TSG.Vector();
                                                                                    if ((mypt[0].X > 0) && (mypt[1].X > 0))
                                                                                    {
                                                                                        VECTOR_FOR_ANGLE = new TSG.Vector(1, 0, 0);

                                                                                    }
                                                                                    else
                                                                                    {

                                                                                        VECTOR_FOR_ANGLE = new TSG.Vector(-1, 0, 0);

                                                                                    }

                                                                                    mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                    mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                        dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, VECTOR_FOR_ANGLE, distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }

                                                                                }


                                                                                if ((Convert.ToInt64(mypt[0].Y) > 0) && (Convert.ToInt64(mypt[1].Y) > 0))
                                                                                {
                                                                                    mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                                    mypt_final.Add(new TSG.Point(0, 0, 0));



                                                                                    TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                        dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }

                                                                                    mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                    mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                        dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }

                                                                                }

                                                                            }

                                                                        }


                                                                    }


                                                                }
                                                                else
                                                                {


                                                                    if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {


                                                                            mypt_final.Add(mypt[1]);

                                                                            mypt_final.Add(new TSG.Point(0, 0, 0));


                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }


                                                                            mypt_finalFOR_LEG.Add(mypt[0]);
                                                                            mypt_finalFOR_LEG.Add(mypt[1]);
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }



                                                                        }

                                                                    }




                                                                    if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) < 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {


                                                                            mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));


                                                                            mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }

                                                                            mypt_finalFOR_LEG.Add(mypt[0]);
                                                                            mypt_finalFOR_LEG.Add(mypt[1]);
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(-1, 0, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }



                                                                        }

                                                                    }



                                                                    if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) > 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {

                                                                            if ((Convert.ToInt64(mypt[0].Y) < 0) && (Convert.ToInt64(mypt[1].Y) < 0))
                                                                            {


                                                                                mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));



                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                            }


                                                                            if ((Convert.ToInt64(mypt[0].Y) > 0) && (Convert.ToInt64(mypt[1].Y) > 0))
                                                                            {
                                                                                mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));



                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                            }

                                                                        }

                                                                    }

                                                                }

                                                            }
                                                            else
                                                            {
                                                                if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                {
                                                                    TSM.ModelObjectEnumerator B = mypart.GetBolts();
                                                                    int C = B.GetSize();
                                                                    if (C == 0)
                                                                    {
                                                                        if (!prof_type.Equals("B"))
                                                                        {
                                                                            mypt_finalFOR_LEG.Add(mypt[0]);
                                                                            mypt_finalFOR_LEG.Add(mypt[1]);
                                                                            if (mypart.Position.Rotation.Equals(TSM.Position.RotationEnum.BACK))
                                                                            {

                                                                                mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                            }
                                                                            if ((mypart.Position.Rotation.Equals(TSM.Position.RotationEnum.FRONT)) && (mypart.Position.Plane.Equals(TSM.Position.PlaneEnum.LEFT)))
                                                                            {
                                                                                mypt_final.Add(new TSG.Point(mypt[1].X, mypt[0].Y, 0));
                                                                            }
                                                                            if ((mypart.Position.Rotation.Equals(TSM.Position.RotationEnum.FRONT)) && (mypart.Position.Plane.Equals(TSM.Position.PlaneEnum.RIGHT)))
                                                                            {
                                                                                mypt_final.Add(new TSG.Point(mypt[1].X, mypt[0].Y, 0));
                                                                            }
                                                                            //if ((mypart.Position.Rotation.Equals(TSM.Position.RotationEnum.TOP)) && (mypart.Position.Plane.Equals(TSM.Position.PlaneEnum.RIGHT)))
                                                                            //{
                                                                            //    mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                            //}
                                                                            TSG.Vector MYVECTOR = new TSG.Vector();
                                                                            if (mypt[1].X > 0)
                                                                            {
                                                                                MYVECTOR = new TSG.Vector(1, 0, 0);
                                                                            }
                                                                            else if (mypt[1].X < 0)
                                                                            {
                                                                                MYVECTOR = new TSG.Vector(-1, 0, 0);
                                                                            }


                                                                            mypt_final.Add(new TSG.Point(0, h1, 0));
                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                dim.CreateDimensionSet(current_view, mypt_final, MYVECTOR, distance1 + 150, fixed_attributes);

                                                                            }
                                                                            catch
                                                                            {
                                                                            }

                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, MYVECTOR, distance1 + 150, fixed_attributes);

                                                                            }
                                                                            catch
                                                                            {
                                                                            }

                                                                            ////////////////////////////////2018/////////////////////////////////////////////////////
                                                                            //if (Convert.ToInt64(angle_cood.AxisX.X) != 0)
                                                                            //{
                                                                            try
                                                                            {

                                                                                TSD.PointList pt_lit_for_angle = new TSD.PointList();
                                                                                pt_lit_for_angle.Add(Get_face_point_for_angle_section_view(mypart, current_view));
                                                                                pt_lit_for_angle.Add(new TSG.Point(0, h1, 0));

                                                                                double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                dim.CreateDimensionSet(current_view, pt_lit_for_angle, MYVECTOR, distance1 + 200, fixed_attributes);

                                                                            }
                                                                            catch
                                                                            {
                                                                            }
                                                                            //}


                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }




                                                    //////////////////////////////////////////end of pour stopper////////////////////////////////////////////////////////





                                                    Type[] type_for_mark = new Type[] { typeof(TSD.Mark), typeof(TSD.WeldMark) };

                                                    //////////////////////////////////////////seating angle code//////////////////////////////////////////////////
                                                    foreach (var list_of_parts in list[z].req_partlist)
                                                    {



                                                        TSD.DrawingObjectEnumerator enum_for_mark = current_view.GetAllObjects(type_for_mark);


                                                        while (enum_for_mark.MoveNext())
                                                        {
                                                            var mark = enum_for_mark.Current;

                                                            if (mark.GetType().Equals(typeof(TSD.Mark)))
                                                            {
                                                                TSD.Mark mymark = mark as TSD.Mark;

                                                                TSD.DrawingObjectEnumerator enumcheck = mymark.GetRelatedObjects();

                                                                while (enumcheck.MoveNext())
                                                                {
                                                                    var mark_part = enumcheck.Current;
                                                                    if (mark_part.GetType().Equals(typeof(TSD.Part)))
                                                                    {
                                                                        TSM.Part modelpart = new TSM.Model().SelectModelObject((mark_part as TSD.Part).ModelIdentifier) as TSM.Part;

                                                                        Guid guid = modelpart.Identifier.GUID;



                                                                        if (list[z].req_partlist.Any(p => p.Identifier.ID == modelpart.Identifier.ID))
                                                                        {
                                                                        }
                                                                        else
                                                                        {
                                                                            mymark.Delete();
                                                                        }


                                                                    }



                                                                }
                                                            }


                                                            else if (mark.GetType().Equals(typeof(TSD.WeldMark)))
                                                            {
                                                                TSD.WeldMark weldmark = mark as TSD.WeldMark;





                                                                //TSD.DrawingObjectEnumerator enumcheck1 = weldmark.GetObjects();
                                                                Identifier id = weldmark.ModelIdentifier;
                                                                TSM.BaseWeld weld = (new TSM.Model().SelectModelObject(id) as TSM.BaseWeld);
                                                                TSM.Part mainpart = (weld.MainObject as TSM.Part);
                                                                TSM.Part secondary_part = (weld.SecondaryObject as TSM.Part);

                                                                if ((list[z].req_partlist.Any(p => p.Identifier.ID == mainpart.Identifier.ID)) || ((list[z].req_partlist.Any(p => p.Identifier.ID == secondary_part.Identifier.ID))))
                                                                {





                                                                }
                                                                else
                                                                {
                                                                    weldmark.Delete();
                                                                }





                                                            }
                                                        }















                                                        TSM.Part mm = list_of_parts as TSM.Part;
                                                        string prof_type = "";
                                                        mm.GetReportProperty("PROFILE_TYPE", ref prof_type);
                                                        TSD.PointList bounding_box_x = bounding_box_sort_x(mm, current_view);
                                                        TSD.PointList bounding_box_y = bounding_box_sort_y(mm, current_view);

                                                        TSD.PointList mypt = bounding_box_sort_z(list_of_parts, current_view);
                                                        TSD.PointList mypt_final = new TSD.PointList();
                                                        TSD.PointList mypt_final_FOR_LEG = new TSD.PointList();
                                                        double height11 = Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2;
                                                        double h1 = Convert.ToInt64(height11);

                                                        //mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
                                                        TSG.CoordinateSystem PLATE_COORD = mm.GetCoordinateSystem();
                                                        TSG.Vector PLATE_X_VECTOR = PLATE_COORD.AxisX;
                                                        TSG.Vector PLATE_Y_VECTOR = PLATE_COORD.AxisY;
                                                        TSG.Vector PLATE_Z_VECTOR = PLATE_X_VECTOR.Cross(PLATE_Y_VECTOR);
                                                        PLATE_Z_VECTOR.Normalize();
                                                        if ((prof_type == "B") && (PLATE_Z_VECTOR.Z != 0))
                                                        {
                                                            TSM.ModelObjectEnumerator myplate_check_for_bolts = mm.GetBolts();




                                                            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                            int a = myplate_check_for_bolts.GetSize();

                                                            if (a == 0)
                                                            {


                                                                ArrayList PROFILE = Getcatalog_values_WITH_FLANGE_THICK(main_part);
                                                                double HEIGHT = Math.Abs(Convert.ToInt64(mypt[0].Y) - Convert.ToInt64(mypt[1].Y));
                                                                double W_HT = Convert.ToInt16(PROFILE[0]);
                                                                double THICK = Convert.ToInt16(PROFILE[3]);
                                                                double FULL_HT = W_HT - (2 * THICK);
                                                                if (HEIGHT + 5 < FULL_HT)
                                                                {
                                                                    if ((Convert.ToInt64(mypt[0].X) <= 0) && (Convert.ToInt64(mypt[1].X) <= 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {


                                                                            mypt_final.Add(new TSG.Point(mypt[0].X, mypt[1].Y, 0));


                                                                            mypt_final.Add(new TSG.Point(0, height11, 0));

                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), 200, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }
                                                                            try
                                                                            {
                                                                                dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(-1, 0, 0), 200, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }


                                                                        }

                                                                    }




                                                                    if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {

                                                                            mypt_final.Add(mypt[1]);


                                                                            mypt_final.Add(new TSG.Point(0, height11, 0));
                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                //dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(1, 0, 0), 200, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }

                                                                            mypt_final_FOR_LEG.Add(mypt[0]);
                                                                            mypt_final_FOR_LEG.Add(mypt[1]);
                                                                            try
                                                                            {
                                                                                //dim.CreateDimensionSet(current_view, mypt_final_FOR_LEG, new TSG.Vector(1, 0, 0), 200, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }



                                                                        }



                                                                    }





                                                                }




                                                            }



                                                            else
                                                            {
                                                                ArrayList MM = new ArrayList();
                                                                while (myplate_check_for_bolts.MoveNext())
                                                                {
                                                                    TSD.PointList PLATE_CONNECTING_SIDE_POINTS = new TSD.PointList();

                                                                    TSM.BoltGroup MODELbolt = myplate_check_for_bolts.Current as TSM.BoltGroup;
                                                                    TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(MODELbolt, current_view);
                                                                    ///////////////////////////////////////////////////condition for depth adjustment////////////////////////////////////////////////////////////////////////////////////////////
                                                                    //////////////////////////////////////////////////// filtering bolts which lies within the section depth/////////////////////////////////////////////////////////////////////                       
                                                                    double upper_limit = current_view.RestrictionBox.MaxPoint.Z;
                                                                    double lower_limit = current_view.RestrictionBox.MinPoint.Z;
                                                                    if (POINT_FOR_BOLT_MATRIX != null)
                                                                    {
                                                                    }
                                                                    else
                                                                    {
                                                                        //if ((Convert.ToInt64(mypt[0].X) <= 0) && (Convert.ToInt64(mypt[1].X) <= 0))
                                                                        //{


                                                                        //    if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        //    {

                                                                        //        mypt_final.Add(new TSG.Point(mypt[0].X, mypt[1].Y, 0));


                                                                        //        mypt_final.Add(new TSG.Point(0, height11, 0));

                                                                        //        TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                        //        try
                                                                        //        {
                                                                        //            dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(-1, 0, 0), 200, fixed_attributes);
                                                                        //        }
                                                                        //        catch
                                                                        //        {
                                                                        //        }



                                                                        //    }

                                                                        //}




                                                                        //if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                        //{


                                                                        //    if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        //    {
                                                                        //        mypt_final.Add(mypt[1]);


                                                                        //        mypt_final.Add(new TSG.Point(0, height11, 0));
                                                                        //        TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                        //        try
                                                                        //        {
                                                                        //            dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(1, 0, 0), 200, fixed_attributes);
                                                                        //        }
                                                                        //        catch
                                                                        //        {
                                                                        //        }



                                                                        //    }

                                                                        //}




                                                                        //TSD.PointList p1 = bounding_box_sort_x(mm, current_view);
                                                                        TSD.PointList p1 = bounding_box_sort_y(mm, current_view);


                                                                        //TSM.BoltGroup bolt = MODELbolt.Current as TSM.BoltGroup;
                                                                        TSG.CoordinateSystem m = MODELbolt.GetCoordinateSystem();
                                                                        TSM.Part mw = MODELbolt.PartToBeBolted;
                                                                        TSM.Part mw1 = MODELbolt.PartToBoltTo;
                                                                        ArrayList mw2 = MODELbolt.OtherPartsToBolt;
                                                                        if (bounding_box_x[0].X > 0)
                                                                        {
                                                                            if (!mw.Identifier.ID.Equals(mm.Identifier.ID))
                                                                            {
                                                                                TSG.CoordinateSystem kl = mw.GetCoordinateSystem();

                                                                                TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                                                TSG.Point pz = tokkk.Transform(kl.Origin);
                                                                                double Y_value = pz.Y;

                                                                                if (Convert.ToInt64(Y_value) > Convert.ToInt64(p1[1].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));

                                                                                }
                                                                                else if (Convert.ToInt64(Y_value) < Convert.ToInt64(p1[0].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));

                                                                                }


                                                                            }
                                                                            if (!mw1.Identifier.ID.Equals(mm.Identifier.ID))
                                                                            {
                                                                                TSG.CoordinateSystem kl = mw1.GetCoordinateSystem();

                                                                                TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                                                TSG.Point pz = tokkk.Transform(kl.Origin);
                                                                                double Y_value = pz.Y;

                                                                                if (Convert.ToInt64(Y_value) > Convert.ToInt64(p1[1].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));

                                                                                }
                                                                                else if (Convert.ToInt64(Y_value) < Convert.ToInt64(p1[0].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));

                                                                                }
                                                                            }
                                                                            double DISTANCE = Math.Abs(current_view.RestrictionBox.MaxPoint.X);


                                                                            PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(0, height11, 0));

                                                                            try
                                                                            {
                                                                                dim_3x3.CreateDimensionSet(current_view as TSD.ViewBase, PLATE_CONNECTING_SIDE_POINTS, new TSG.Vector(-1, 0, 0), DISTANCE + 100, dim_font_height1);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }
                                                                        }
                                                                        if (bounding_box_x[0].X < 0)
                                                                        {
                                                                            if (!mw.Identifier.ID.Equals(mm.Identifier.ID))
                                                                            {
                                                                                TSG.CoordinateSystem kl = mw.GetCoordinateSystem();

                                                                                TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                                                TSG.Point pz = tokkk.Transform(kl.Origin);
                                                                                double Y_value = pz.Y;

                                                                                if (Convert.ToInt64(Y_value) > Convert.ToInt64(p1[1].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));

                                                                                }
                                                                                else if (Convert.ToInt64(Y_value) < Convert.ToInt64(p1[0].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[0].Y, bounding_box_y[0].Z));

                                                                                }


                                                                            }
                                                                            if (!mw1.Identifier.ID.Equals(mm.Identifier.ID))
                                                                            {
                                                                                TSG.CoordinateSystem kl = mw1.GetCoordinateSystem();

                                                                                TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                                                TSG.Point pz = tokkk.Transform(kl.Origin);
                                                                                double Y_value = pz.Y;

                                                                                if (Convert.ToInt64(Y_value) > Convert.ToInt64(p1[1].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));

                                                                                }
                                                                                else if (Convert.ToInt64(Y_value) < Convert.ToInt64(p1[0].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));

                                                                                }
                                                                            }

                                                                            double DISTANCE = current_view.RestrictionBox.MaxPoint.X;

                                                                            PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(0, height11, 0));
                                                                            try
                                                                            {
                                                                                dim_3x3.CreateDimensionSet(current_view as TSD.ViewBase, PLATE_CONNECTING_SIDE_POINTS, new TSG.Vector(1, 0, 0), DISTANCE + 100, dim_font_height1);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }
                                                                        }






                                                                    }
                                                                }








                                                            }

                                                        }



                                                    }
                                                    //////////////////////////////////////////end of seating angle code////////////////////////////////////////////////////////



                                                    List<Guid> FINAL_BOLTMARK_POS = new List<Guid>();
                                                    List<Guid> FINAL_BOLTMARK_NEG = new List<Guid>();


                                                    ArrayList PARTMARK_TO_BE_PROVIDED_SECTION = new ArrayList();
                                                    ArrayList BOLTMARK_TO_BE_PROVIDED_SECTION_POS = new ArrayList();
                                                    ArrayList BOLTMARK_TO_BE_PROVIDED_SECTION_NEG = new ArrayList();
                                                    Type type_for_PART = typeof(TSD.Part);
                                                    TSD.DrawingObjectEnumerator my_top_view_dimension_check = current_view.GetAllObjects(type_for_PART);
                                                    while (my_top_view_dimension_check.MoveNext())
                                                    {
                                                        TSD.Part DRG_PART = my_top_view_dimension_check.Current as TSD.Part;
                                                        TSM.ModelObject modelpart = new TSM.Model().SelectModelObject(DRG_PART.ModelIdentifier);


                                                        bool CHECK = SECTION_VIEW_PARTMARK_TO_RETAIN.Any(X => X.Equals(modelpart.Identifier.GUID));

                                                        if (CHECK == true)
                                                        {
                                                            PARTMARK_TO_BE_PROVIDED_SECTION.Add(DRG_PART);

                                                        }

                                                    }
                                                    Type type_for_BOLT = typeof(TSD.Bolt);
                                                    TSD.DrawingObjectEnumerator SECTION_VIEW_BOLTMARK_ENUM = current_view.GetAllObjects(type_for_BOLT);
                                                    while (SECTION_VIEW_BOLTMARK_ENUM.MoveNext())
                                                    {
                                                        TSD.Bolt DRG_BOLT = SECTION_VIEW_BOLTMARK_ENUM.Current as TSD.Bolt;
                                                        TSM.ModelObject modelpart = new TSM.Model().SelectModelObject(DRG_BOLT.ModelIdentifier);


                                                        bool CHECK = SECTION_VIEW_BOLTMARK_TO_RETAIN_POS.Any(X => X.Equals(modelpart.Identifier.GUID));
                                                        bool CHECK1 = SECTION_VIEW_BOLTMARK_TO_RETAIN_NEG.Any(X => X.Equals(modelpart.Identifier.GUID));

                                                        if (CHECK == true)
                                                        {
                                                            BOLTMARK_TO_BE_PROVIDED_SECTION_POS.Add(DRG_BOLT);
                                                            FINAL_BOLTMARK_POS.Add(DRG_BOLT.ModelIdentifier.GUID);


                                                        }
                                                        if (CHECK1 == true)
                                                        {
                                                            BOLTMARK_TO_BE_PROVIDED_SECTION_NEG.Add(DRG_BOLT);
                                                            FINAL_BOLTMARK_NEG.Add(DRG_BOLT.ModelIdentifier.GUID);

                                                        }

                                                    }


                                                    MacroBuilder builder = new MacroBuilder();


                                                    foreach (var list_of_parts in list[z].req_partlist)
                                                    {
                                                        List<Guid> MYLISTOF_BOLTS_IN_EACH_PART = new List<Guid>();
                                                        TSM.Part MYPART = list_of_parts;
                                                        TSM.ModelObjectEnumerator MYENUM = MYPART.GetBolts();
                                                        while (MYENUM.MoveNext())
                                                        {
                                                            TSM.BoltGroup MYBOLT = MYENUM.Current as TSM.BoltGroup;
                                                            MYLISTOF_BOLTS_IN_EACH_PART.Add(MYBOLT.Identifier.GUID);



                                                        }
                                                        List<Guid> POS_LIST = MYLISTOF_BOLTS_IN_EACH_PART.Intersect(FINAL_BOLTMARK_POS).ToList();
                                                        List<Guid> NEG_LIST = MYLISTOF_BOLTS_IN_EACH_PART.Intersect(FINAL_BOLTMARK_NEG).ToList();

                                                        foreach (var GUID in POS_LIST)
                                                        {
                                                            Identifier ID = new Identifier(GUID);
                                                            TSM.ModelObject MYOBJ = new TSM.Model().SelectModelObject(ID);
                                                            BOLTMARK_TO_BE_PROVIDED_SECTION_POS.Add(MYOBJ);

                                                        }
                                                        foreach (var GUID in NEG_LIST)
                                                        {
                                                            Identifier ID = new Identifier(GUID);
                                                            TSM.ModelObject MYOBJ = new TSM.Model().SelectModelObject(ID);
                                                            BOLTMARK_TO_BE_PROVIDED_SECTION_NEG.Add(MYOBJ);

                                                        }
                                                        my_handler.GetDrawingObjectSelector().SelectObjects(BOLTMARK_TO_BE_PROVIDED_SECTION_POS, true);
                                                        Tekla.Structures.Model.Operations.Operation.RunMacro(@"..\drawings\acmd_create_marks_selected.cs");
                                                        my_handler.GetDrawingObjectSelector().UnselectAllObjects();


                                                        my_handler.GetDrawingObjectSelector().SelectObjects(BOLTMARK_TO_BE_PROVIDED_SECTION_NEG, true);
                                                        Tekla.Structures.Model.Operations.Operation.RunMacro(@"..\drawings\acmd_create_marks_selected.cs");
                                                        my_handler.GetDrawingObjectSelector().UnselectAllObjects();


                                                    }



                                                    //not me
                                                    //foreach (TSD.Bolt BOLT_GUID in BOLTMARK_TO_BE_PROVIDED_SECTION)
                                                    //{

                                                    //    my_handler.GetDrawingObjectSelector().SelectObject(BOLT_GUID);
                                                    //    builder.Callback("acmd_create_marks_selected", "", "View_10 window_1");


                                                    //    builder.Run();
                                                    //    my_handler.GetDrawingObjectSelector().UnselectAllObjects();
                                                    //}

                                                    foreach (TSD.Part PART_GUID in PARTMARK_TO_BE_PROVIDED_SECTION)
                                                    {

                                                        my_handler.GetDrawingObjectSelector().SelectObject(PART_GUID);
                                                        Tekla.Structures.Model.Operations.Operation.RunMacro(@"..\drawings\acmd_create_marks_selected.cs");
                                                        my_handler.GetDrawingObjectSelector().UnselectAllObjects();
                                                    }









                                                }













                                            }


















                                            #endregion


                                            //list_section_flange


                                            #region SECTION_VIEW2
                                            /////////////////////////////////////////////////bolt gage dimension in section view using matrix function /////////////////////////////////////////////////////////////
                                            for (int z = 0; z < list_section_flange.Count; z++)
                                            {
                                                ///////////////////////////////////////////////////filtering bolts from all parts in section view/////////////////////////////////////////////////////////////////////////////

                                                TSD.View current_view = list_section_flange[z].myview;

                                                if (current_view != null)
                                                {
                                                    Type[] type_for_dim = new Type[] { typeof(TSD.StraightDimension), typeof(TSD.StraightDimensionSet), typeof(TSD.AngleDimension) };
                                                    TSD.DrawingObjectEnumerator dim_drg = current_view.GetAllObjects(type_for_dim);
                                                    while (dim_drg.MoveNext())
                                                    {
                                                        var obj = dim_drg.Current;
                                                        obj.Delete();

                                                    }

                                                    if (chksecscale.Checked == true)
                                                    {
                                                        current_view.Attributes.Scale = SCALE + Convert.ToDouble(cmbsecscale.Text);
                                                        current_view.Modify();
                                                    }
                                                    else
                                                    {
                                                        current_view.Attributes.Scale = SCALE;
                                                        current_view.Modify();
                                                    }
                                                    List<Guid> SECTION_VIEW_BOLTMARK_TO_RETAIN_POS = new List<Guid>();
                                                    List<Guid> SECTION_VIEW_BOLTMARK_TO_RETAIN_NEG = new List<Guid>();

                                                    List<Guid> SECTION_VIEW_PARTMARK_TO_RETAIN = new List<Guid>();
                                                    current_view.Modify();
                                                    sectionviews_in_drawing.Add(current_view);
                                                    SECTION_VIEW_PART_MARK_DELETE(current_view, my_handler);
                                                    TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                    List<TSD.Bolt> bolt_list = new List<TSD.Bolt>();

                                                    double minx = current_view.RestrictionBox.MinPoint.X;
                                                    double miny = current_view.RestrictionBox.MinPoint.Y;
                                                    double maxx = current_view.RestrictionBox.MaxPoint.X;
                                                    double maxy = current_view.RestrictionBox.MaxPoint.Y;

                                                    foreach (var list_of_parts in list_section_flange[z].partlist)
                                                    {
                                                        TSD.PointList rd_point_list = new TSD.PointList();
                                                        TSM.Part mypart = list_of_parts as TSM.Part;
                                                        SECTION_VIEW_PARTMARK_TO_RETAIN.Add(mypart.Identifier.GUID);

                                                        TSD.PointList angle_hole_locking_check = bounding_box_sort_y(list_of_parts as TSM.ModelObject, current_view);


                                                        TSM.ModelObjectEnumerator enum_for_bolt = list_of_parts.GetBolts();
                                                        //ts.DrawingObjectEnumerator enum_for_bolt = current_view.GetAllObjects(type_for_bolt);
                                                        string prof_typ = get_report_properties(mypart, "PROFILE_TYPE");

                                                        if (list_of_parts.Identifier.ID.Equals(670665))
                                                        {
                                                        }

                                                        if (prof_typ == "L")
                                                        {

                                                            angle_place_check_for_hole_locking(angle_hole_locking_check, out rd_point_list, enum_for_bolt, current_view, ref SECTION_VIEW_PARTMARK_TO_RETAIN, ref SECTION_VIEW_BOLTMARK_TO_RETAIN_POS, ref SECTION_VIEW_BOLTMARK_TO_RETAIN_NEG);
                                                            /////////////////////////////////////////////////// removing duplicate points from boltpoints///////////////////////////////////////////////////////////////////////////////           
                                                            TSD.PointList FINAL_RD_LIST = new TSD.PointList();
                                                            FINAL_RD_LIST = pointlist_remove_duplicate_Xvalues(rd_point_list);

                                                            /////////////////////////////////////////////////// inserting bolt gage dimension ////////////////////////////////////////////////////////////////////////////////////////
                                                            double ht = Convert.ToInt64(MAINPART_PROFILE_VALUES[0]);
                                                            double height = Convert.ToInt64(ht / 2);

                                                            TSD.PointList FINAL_RD_LIST_within_ht = new TSD.PointList();

                                                            TSD.PointList FINAL_RD_LIST_above_fl = new TSD.PointList();
                                                            TSD.PointList FINAL_RD_LIST_below_fl = new TSD.PointList();


                                                            string profile_type_for_section = "";
                                                            main_part.GetReportProperty("PROFILE_TYPE", ref profile_type_for_section);

                                                            if (profile_type_for_section == "U")
                                                            {
                                                                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
                                                                TSG.Vector zvector = main_part.GetCoordinateSystem().AxisX.Cross(main_part.GetCoordinateSystem().AxisY);
                                                                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                                                                zvector.Normalize();
                                                                double WT = 0;


                                                                double WT2 = Convert.ToDouble(catalog_values[1]);
                                                                if (zvector.X > 0)
                                                                {
                                                                    WT = (-WT2 / 2);
                                                                }
                                                                else
                                                                {
                                                                    WT = (WT2 / 2);
                                                                }
                                                                FINAL_RD_LIST_within_ht.Add(new TSG.Point(WT, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_above_fl.Add(new TSG.Point(WT, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_below_fl.Add(new TSG.Point(WT, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));

                                                            }
                                                            else
                                                            {

                                                                FINAL_RD_LIST_within_ht.Add(new TSG.Point(0, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_above_fl.Add(new TSG.Point(0, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_below_fl.Add(new TSG.Point(0, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                            }
                                                            foreach (TSG.Point PT in FINAL_RD_LIST)
                                                            {
                                                                if ((Convert.ToInt64(PT.Y) < height) && (Convert.ToInt64(PT.Y) > -height))
                                                                {
                                                                    FINAL_RD_LIST_within_ht.Add(PT);

                                                                }
                                                                else if (Convert.ToInt64(PT.Y) > height)
                                                                {
                                                                    FINAL_RD_LIST_above_fl.Add(PT);

                                                                }
                                                                else if (Convert.ToInt64(PT.Y) < -height)
                                                                {
                                                                    FINAL_RD_LIST_below_fl.Add(PT);

                                                                }
                                                            }




                                                            sorting_points_by_y_des(FINAL_RD_LIST_within_ht);
                                                            sorting_points_by_y_asc(FINAL_RD_LIST_above_fl);
                                                            sorting_points_by_y_des(FINAL_RD_LIST_below_fl);
                                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes inside = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                                            inside.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                                            {
                                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                                {
                                                                    inside.Text.Font.Height = 3.571875;
                                                                }
                                                                else
                                                                {
                                                                    inside.Text.Font.Height = 3.175;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                inside.Text.Font.Height = 2.38125;


                                                            }


                                                            //inside.ShortDimension = TSD.DimensionSetBaseAttributes.ShortDimensionTypes.Inside;

                                                            try
                                                            {
                                                                TSD.StraightDimensionSetHandler bolt_gage_dim = new TSD.StraightDimensionSetHandler();
                                                                ////////////////////////////////////////////////////dimension distance placing linking /////////////////////////////////////////////////////////////////////////////////////////
                                                                //double distance = Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2;
                                                                //TSG.Point p1 = (FINAL_RD_LIST[FINAL_RD_LIST.Count - 2] as TSG.Point);
                                                                //TSG.Point p2 = new TSG.Point((FINAL_RD_LIST[FINAL_RD_LIST.Count - 1] as TSG.Point).X, distance, 0);
                                                                //double distance_value = TSG.Distance.PointToPoint(p1, p2);
                                                                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_within_ht[0].Y) - maxy);
                                                                //////////////////////////////////////////////////// rd dimension creation////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_within_ht, new TSG.Vector(0, 1, 0), distance1 + 75, inside);
                                                            }
                                                            catch
                                                            {
                                                            }


                                                            try
                                                            {
                                                                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_above_fl[0].Y) - maxy);
                                                                TSD.StraightDimensionSetHandler bolt_gage_dim = new TSD.StraightDimensionSetHandler();
                                                                bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_above_fl, new TSG.Vector(0, 1, 0), distance1 + 150, inside);
                                                            }
                                                            catch
                                                            {
                                                            }
                                                            try
                                                            {

                                                                TSD.StraightDimensionSetHandler bolt_gage_dim = new TSD.StraightDimensionSetHandler();
                                                                ///////ROSEPLASTIC
                                                                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_below_fl[0].Y) - miny);
                                                                //bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_below_fl, new TSG.Vector(0, -1, 0), distance1 + 75, inside);
                                                                //double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_below_fl[0].Y) - maxy);
                                                                bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_below_fl, new TSG.Vector(0, -1, 0), distance1 + 75, inside);
                                                            }
                                                            catch
                                                            {
                                                            }
                                                        }
                                                        ///////////////////////////////////////////////////getting bolt matrix points for bolt dimension///////////////////////////////////////////////////////////////////////////


                                                        else
                                                        {


                                                            ///////////////////////////////////////////////////getting bolt matrix points for bolt dimension///////////////////////////////////////////////////////////////////////////

                                                            while (enum_for_bolt.MoveNext())
                                                            {
                                                                //TSD.Bolt drgbolt = enum_for_bolt.Current as TSD.Bolt;
                                                                TSM.BoltGroup drgbolt = enum_for_bolt.Current as TSM.BoltGroup;
                                                                TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(drgbolt, current_view);


                                                                ///////////////////////////////////////////////////condition for depth adjustment////////////////////////////////////////////////////////////////////////////////////////////
                                                                //////////////////////////////////////////////////// filtering bolts which lies within the section depth/////////////////////////////////////////////////////////////////////                       
                                                                double upper_limit = current_view.RestrictionBox.MaxPoint.Z;
                                                                double lower_limit = current_view.RestrictionBox.MinPoint.Z;
                                                                if (POINT_FOR_BOLT_MATRIX != null)
                                                                {
                                                                    if ((POINT_FOR_BOLT_MATRIX[0, 0].Z > lower_limit) && (POINT_FOR_BOLT_MATRIX[0, 0].Z < upper_limit))
                                                                    {
                                                                        int y = POINT_FOR_BOLT_MATRIX.GetLength(0);
                                                                        int x = POINT_FOR_BOLT_MATRIX.GetLength(1);
                                                                        for (int i = 0; i < x; i++)
                                                                        {
                                                                            //////////////////////////////////////////// condition for getting last row of bolts//////////////////////////////////////////////////////////////////////////////////////////////
                                                                            rd_point_list.Add(POINT_FOR_BOLT_MATRIX[y - 1, i]);
                                                                        }
                                                                        if (POINT_FOR_BOLT_MATRIX[0, 0].X > 0)
                                                                        {
                                                                            SECTION_VIEW_BOLTMARK_TO_RETAIN_POS.Add(drgbolt.Identifier.GUID);
                                                                        }
                                                                        if (POINT_FOR_BOLT_MATRIX[0, 0].X < 0)
                                                                        {
                                                                            SECTION_VIEW_BOLTMARK_TO_RETAIN_NEG.Add(drgbolt.Identifier.GUID);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            /////////////////////////////////////////////////// removing duplicate points from boltpoints///////////////////////////////////////////////////////////////////////////////           
                                                            TSD.PointList FINAL_RD_LIST = new TSD.PointList();
                                                            FINAL_RD_LIST = pointlist_remove_duplicate_Xvalues(rd_point_list);

                                                            /////////////////////////////////////////////////// inserting bolt gage dimension ////////////////////////////////////////////////////////////////////////////////////////
                                                            double ht = Convert.ToInt64(MAINPART_PROFILE_VALUES[0]);
                                                            double height = Convert.ToInt64(ht / 2);

                                                            TSD.PointList FINAL_RD_LIST_within_ht = new TSD.PointList();

                                                            TSD.PointList FINAL_RD_LIST_above_fl = new TSD.PointList();
                                                            TSD.PointList FINAL_RD_LIST_below_fl = new TSD.PointList();


                                                            string profile_type_for_section = "";
                                                            main_part.GetReportProperty("PROFILE_TYPE", ref profile_type_for_section);

                                                            if (profile_type_for_section == "U")
                                                            {
                                                                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
                                                                TSG.Vector zvector = main_part.GetCoordinateSystem().AxisX.Cross(main_part.GetCoordinateSystem().AxisY);
                                                                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                                                                zvector.Normalize();
                                                                double WT = 0;


                                                                double WT2 = Convert.ToDouble(catalog_values[1]);
                                                                if (zvector.X > 0)
                                                                {
                                                                    WT = (-WT2 / 2);
                                                                }
                                                                else
                                                                {
                                                                    WT = (WT2 / 2);
                                                                }
                                                                FINAL_RD_LIST_within_ht.Add(new TSG.Point(WT, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_above_fl.Add(new TSG.Point(WT, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_below_fl.Add(new TSG.Point(WT, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));

                                                            }
                                                            else
                                                            {

                                                                FINAL_RD_LIST_within_ht.Add(new TSG.Point(0, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_above_fl.Add(new TSG.Point(0, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                                FINAL_RD_LIST_below_fl.Add(new TSG.Point(0, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
                                                            }
                                                            foreach (TSG.Point PT in FINAL_RD_LIST)
                                                            {
                                                                if ((Convert.ToInt64(PT.Y) < height) && (Convert.ToInt64(PT.Y) > -height))
                                                                {
                                                                    FINAL_RD_LIST_within_ht.Add(PT);

                                                                }
                                                                else if (Convert.ToInt64(PT.Y) > height)
                                                                {
                                                                    FINAL_RD_LIST_above_fl.Add(PT);

                                                                }
                                                                else if (Convert.ToInt64(PT.Y) < -height)
                                                                {
                                                                    FINAL_RD_LIST_below_fl.Add(PT);

                                                                }
                                                            }




                                                            sorting_points_by_y_des(FINAL_RD_LIST_within_ht);
                                                            sorting_points_by_y_asc(FINAL_RD_LIST_above_fl);
                                                            sorting_points_by_y_des(FINAL_RD_LIST_below_fl);
                                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes inside = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                                            inside.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                                            {
                                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                                {
                                                                    inside.Text.Font.Height = 3.571875;
                                                                }
                                                                else
                                                                {
                                                                    inside.Text.Font.Height = 3.175;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                inside.Text.Font.Height = 2.38125;


                                                            }


                                                            //inside.ShortDimension = TSD.DimensionSetBaseAttributes.ShortDimensionTypes.Inside;

                                                            try
                                                            {
                                                                TSD.StraightDimensionSetHandler bolt_gage_dim = new TSD.StraightDimensionSetHandler();
                                                                ////////////////////////////////////////////////////dimension distance placing linking /////////////////////////////////////////////////////////////////////////////////////////
                                                                //double distance = Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2;
                                                                //TSG.Point p1 = (FINAL_RD_LIST[FINAL_RD_LIST.Count - 2] as TSG.Point);
                                                                //TSG.Point p2 = new TSG.Point((FINAL_RD_LIST[FINAL_RD_LIST.Count - 1] as TSG.Point).X, distance, 0);
                                                                //double distance_value = TSG.Distance.PointToPoint(p1, p2);
                                                                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_within_ht[0].Y) - maxy);
                                                                //////////////////////////////////////////////////// rd dimension creation////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_within_ht, new TSG.Vector(0, 1, 0), distance1 + 75, inside);
                                                            }
                                                            catch
                                                            {
                                                            }


                                                            try
                                                            {
                                                                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_above_fl[0].Y) - maxy);
                                                                TSD.StraightDimensionSetHandler bolt_gage_dim = new TSD.StraightDimensionSetHandler();
                                                                bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_above_fl, new TSG.Vector(0, 1, 0), distance1 + 150, inside);
                                                            }
                                                            catch
                                                            {
                                                            }
                                                            try
                                                            {

                                                                TSD.StraightDimensionSetHandler bolt_gage_dim = new TSD.StraightDimensionSetHandler();
                                                                ///////ROSEPLASTIC
                                                                //double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_below_fl[0].Y) - miny);
                                                                //bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_below_fl, new TSG.Vector(0, -1, 0), distance1 + 75, inside);
                                                                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_below_fl[0].Y) - maxy);
                                                                bolt_gage_dim.CreateDimensionSet(current_view, FINAL_RD_LIST_below_fl, new TSG.Vector(0, 1, 0), distance1 + 75, inside);
                                                            }
                                                            catch
                                                            {
                                                            }


                                                        }



                                                    }
                                                    ///////////////////END OF RD DIMENSION//////////////////////
                                                    /////////////////3x3 dimension////////////////////////
                                                    ///////////////////////////////////////////////////filtering bolts from all parts in front view/////////////////////////////////////////////////////////////////////////////

                                                    TSD.StraightDimensionSetHandler dim_3x3 = new TSD.StraightDimensionSetHandler();
                                                    double x1 = 75;
                                                    double x2 = 75;
                                                    foreach (var list_of_parts in list_section_flange[z].partlist)
                                                    {
                                                        TSM.Part mypart = list_of_parts as TSM.Part;
                                                        double ht = Convert.ToInt64(MAINPART_PROFILE_VALUES[0]);
                                                        double height = Convert.ToInt64(ht / 2);


                                                        TSD.PointList list3x3 = new TSD.PointList();
                                                        TSM.ModelObjectEnumerator enum_for_bolt1 = list_of_parts.GetBolts();
                                                        //TSD.DrawingObjectEnumerator enum_for_bolt1 = current_view.GetAllObjects(type_for_bolt);

                                                        ///////////////////////////////////////////////////getting bolt matrix points for bolt 3x3 dimension///////////////////////////////////////////////////////////////////////////
                                                        while (enum_for_bolt1.MoveNext())
                                                        {
                                                            TSM.BoltGroup drgbolt = enum_for_bolt1.Current as TSM.BoltGroup;
                                                            //TSD.Bolt drgbolt = enum_for_bolt1.Current as TSD.Bolt;
                                                            TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(drgbolt, current_view);
                                                            double upper_limit = current_view.RestrictionBox.MaxPoint.Z;
                                                            double lower_limit = current_view.RestrictionBox.MinPoint.Z;
                                                            //TSM.ModelObject mymodel_ = new TSM.Model().SelectModelObject(drgbolt.ModelIdentifier);
                                                            TSM.BoltGroup mybolt = drgbolt;
                                                            if (POINT_FOR_BOLT_MATRIX != null)
                                                            {
                                                                if ((POINT_FOR_BOLT_MATRIX[0, 0].Z > lower_limit) && (POINT_FOR_BOLT_MATRIX[0, 0].Z < upper_limit))
                                                                {
                                                                    int y = POINT_FOR_BOLT_MATRIX.GetLength(0);
                                                                    int x = POINT_FOR_BOLT_MATRIX.GetLength(1);

                                                                    if ((POINT_FOR_BOLT_MATRIX[0, 0].X < 0) && (POINT_FOR_BOLT_MATRIX[0, x - 1].X > 0) || (POINT_FOR_BOLT_MATRIX[0, 0].X > 0) && (POINT_FOR_BOLT_MATRIX[0, x - 1].X < 0))
                                                                    {


                                                                        foreach (TSG.Point pt in mybolt.BoltPositions)
                                                                        {
                                                                            TSG.Point p1 = toviewmatrix.Transform(pt);

                                                                            list3x3.Add(p1);
                                                                        }



                                                                    }

                                                                    else if ((POINT_FOR_BOLT_MATRIX[0, 0].X > 0))
                                                                    {


                                                                        for (int i = 0; i < y; i++)
                                                                        {
                                                                            /////////////////////////////////////////////////// condition for getting last row of bolts//////////////////////////////////////////////////////////////////////////////////////////////
                                                                            list3x3.Add(POINT_FOR_BOLT_MATRIX[i, x - 1]);
                                                                        }

                                                                    }
                                                                    else if ((POINT_FOR_BOLT_MATRIX[0, 0].X < 0))
                                                                    {


                                                                        for (int i = 0; i < y; i++)
                                                                        {
                                                                            /////////////////////////////////////////////////// condition for getting last row of bolts//////////////////////////////////////////////////////////////////////////////////////////////
                                                                            list3x3.Add(POINT_FOR_BOLT_MATRIX[i, 0]);
                                                                        }

                                                                    }
                                                                }
                                                            }
                                                        }

                                                        /////////////////////////////////////////////////// removing duplicate points from boltpoints///////////////////////////////////////////////////////////////////////////////           
                                                        //  TSD.PointList FINAL_list3x3 = pointlist_remove_duplicate_Yvalues(list3x3);
                                                        TSD.PointList FINAL_list3x3 = list3x3;
                                                        TSD.PointList FINAL_list3x3_positive = new TSD.PointList();
                                                        TSD.PointList FINAL_list3x3_negative = new TSD.PointList();
                                                        TSG.Vector VECTOR1 = new TSG.Vector();
                                                        TSG.Vector VECTOR2 = new TSG.Vector();
                                                        /////////////////////////////////////////////////// ASSIGNING VECTOR AND ADDING TOP POINT IN 3X3 DIMENSION(BEAM TOP FLANGE)//////////////////////////////////////////
                                                        try
                                                        {
                                                            foreach (TSG.Point pt in FINAL_list3x3)
                                                            {
                                                                if (Convert.ToInt64(pt.X) > 0)
                                                                {
                                                                    FINAL_list3x3_positive.Add(pt);



                                                                }
                                                                else if (Convert.ToInt64(pt.X) < 0)
                                                                {
                                                                    FINAL_list3x3_negative.Add(pt);


                                                                }
                                                            }
                                                        }
                                                        catch
                                                        {
                                                        }

                                                        string prof_typ = get_report_properties(mypart, "PROFILE_TYPE");

                                                        if (prof_typ == "L")
                                                        {





                                                            ANGLE_BOLT_DIM(FINAL_list3x3_positive, FINAL_list3x3_negative, height, current_view, MAINPART_PROFILE_VALUES, maxx, minx, drg_att);

                                                        }
                                                        else
                                                        {
                                                            FINAL_list3x3_positive.Add(new TSG.Point((Convert.ToDouble(MAINPART_PROFILE_VALUES[1])) / 2, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));

                                                            VECTOR1 = new TSG.Vector(1, 0, 0);

                                                            FINAL_list3x3_negative.Add(new TSG.Point(-(Convert.ToDouble(MAINPART_PROFILE_VALUES[1])) / 2, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));

                                                            VECTOR2 = new TSG.Vector(-1, 0, 0);


                                                            /////////////////////////////////////////////////// inserting bolt 3X3 dimension ////////////////////////////////////////////////////////////////////////////////////////

                                                            try
                                                            {
                                                                double distance1 = Math.Abs(Math.Abs(FINAL_list3x3_positive[0].X) - Math.Abs(maxx));
                                                                dim_3x3.CreateDimensionSet(current_view, FINAL_list3x3_positive, VECTOR1, distance1 + x1, fixed_attributes);
                                                                x1 = x1 + 50;
                                                            }
                                                            catch
                                                            {
                                                            }

                                                            try
                                                            {
                                                                double distance1 = Math.Abs(Math.Abs(FINAL_list3x3_negative[0].X) - Math.Abs(minx));
                                                                dim_3x3.CreateDimensionSet(current_view, FINAL_list3x3_negative, VECTOR2, distance1 + x2, fixed_attributes);
                                                                x2 = x2 + 50;
                                                            }
                                                            catch
                                                            {
                                                            }
                                                        }


                                                    }


                                                    /////////////////END OF 3x3 dimension for SECTION VIEW////////////////////////


                                                    //////////////////////////////////////////pour stopper code//////////////////////////////////////////////////

                                                    foreach (var list_of_parts in list_section_flange[z].partlist)
                                                    {


                                                        TSM.Part mypart = list_of_parts as TSM.Part;
                                                        TSD.PointList mypt = bounding_box_sort_z(list_of_parts, current_view);
                                                        TSD.PointList mypt_final = new TSD.PointList();
                                                        TSD.PointList mypt_finalFOR_LEG = new TSD.PointList();
                                                        double height11 = Convert.ToDouble(MAINPART_PROFILE_VALUES[0]);
                                                        double h1 = Convert.ToInt64(height11 / 2);
                                                        string prof_type = "";
                                                        mypart.GetReportProperty("PROFILE_TYPE", ref prof_type);
                                                        mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                                                        TSG.CoordinateSystem angle_cood = list_of_parts.GetCoordinateSystem();
                                                        mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                                        if (!mypart.Name.Contains("STUD") && !mypart.Equals(main_part) && !mypart.Name.Contains("GUSSET"))
                                                        {

                                                            if ((Convert.ToInt64(mypt[0].Y) >= h1) && (Convert.ToInt64(mypt[1].Y) >= h1))
                                                            {
                                                                TSM.ModelObjectEnumerator enum_for_bolt = mypart.GetBolts();
                                                                int s = enum_for_bolt.GetSize();
                                                                if (s > 0)
                                                                {
                                                                    //if (!angle_cood.AxisX.X.Equals(0))
                                                                    //{
                                                                    List<TSG.Point[,]> check_for_bolt_in_part = new List<TSG.Point[,]>();
                                                                    while (enum_for_bolt.MoveNext())
                                                                    {
                                                                        TSM.BoltGroup drgbolt = enum_for_bolt.Current as TSM.BoltGroup;
                                                                        TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(drgbolt, current_view);
                                                                        check_for_bolt_in_part.Add(POINT_FOR_BOLT_MATRIX);
                                                                    }
                                                                    bool result_for_check_for_bolt_in_part = check_for_bolt_in_part.All(x => x == null);
                                                                    if ((result_for_check_for_bolt_in_part == true) && (prof_type != "L"))
                                                                    {
                                                                        if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {


                                                                                mypt_final.Add(mypt[1]);


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }
                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }




                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) < 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {
                                                                                mypt_final.Add(new TSG.Point(mypt[0].X, mypt[1].Y, 0));


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }




                                                                                ///////////////   face_of_angle_logic_need_to_be_copied////////

                                                                                List<angle_face_area> myreq = getface_for_angle(mypart);
                                                                                TSD.PointList p1 = angle_pts_for_section(myreq, current_view);

                                                                                if (mypt[1].X > mypt[0].X)
                                                                                {
                                                                                    mypt_finalFOR_LEG.Add(new TSG.Point(mypt[0].X, mypt[0].Y, mypt[1].Z));
                                                                                    mypt_finalFOR_LEG.Add(new TSG.Point(mypt[0].X, mypt[1].Y, mypt[0].Z));

                                                                                }
                                                                                else
                                                                                {
                                                                                    mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                    mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                }
                                                                                try
                                                                                {
                                                                                    TSG.Vector myvector = new TSG.Vector();
                                                                                    double distance1 = 0;
                                                                                    if (mypt_finalFOR_LEG[0].X < 0)
                                                                                    {
                                                                                        myvector = new TSG.Vector(-1, 0, 0);
                                                                                        //distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(minx));
                                                                                        distance1 = Math.Abs(minx) - Math.Abs(mypt_finalFOR_LEG[0].X);
                                                                                        distance1 = distance1 + 150;
                                                                                    }
                                                                                    else
                                                                                    {

                                                                                        myvector = new TSG.Vector(1, 0, 0);
                                                                                        distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                        distance1 = distance1 + 150;
                                                                                    }


                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, myvector, distance1, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }


                                                                            }

                                                                        }



                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) > 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }

                                                                    }
                                                                    else
                                                                    {
                                                                        if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {


                                                                                mypt_final.Add(mypt[1]);


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }
                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }




                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) < 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                mypt_final.Add(new TSG.Point(mypt[0].X, mypt[1].Y, 0));


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                                ///////////////////////2018*///////////////////
                                                                                TSG.Vector VECTOR_FOR_ANGLE = new TSG.Vector();
                                                                                if ((mypt[0].X > 0) && (mypt[1].X > 0))
                                                                                {
                                                                                    VECTOR_FOR_ANGLE = new TSG.Vector(1, 0, 0);

                                                                                }
                                                                                else
                                                                                {

                                                                                    VECTOR_FOR_ANGLE = new TSG.Vector(-1, 0, 0);

                                                                                }

                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);

                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(new TSG.Point(mypt[0].X, mypt[1].Y, mypt[1].Z));
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, VECTOR_FOR_ANGLE, distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }


                                                                            }

                                                                        }



                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) > 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                    //////////////////WHY/////////////////
                                                                                    //dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }
                                                                                ///////////////////////////////////2018/////////////////////////////////////////////////////
                                                                                TSG.Vector VECTOR_FOR_ANGLE = new TSG.Vector();
                                                                                if ((mypt[0].X > 0) && (mypt[1].X > 0))
                                                                                {
                                                                                    VECTOR_FOR_ANGLE = new TSG.Vector(1, 0, 0);

                                                                                }
                                                                                else
                                                                                {

                                                                                    VECTOR_FOR_ANGLE = new TSG.Vector(-1, 0, 0);

                                                                                }
                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, VECTOR_FOR_ANGLE, distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }

                                                                    }

                                                                    //}
                                                                    //else
                                                                    //{ 
                                                                    //}
                                                                }


                                                                else
                                                                {


                                                                    if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {



                                                                            mypt_final.Add(mypt[1]);


                                                                            mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }
                                                                            mypt_finalFOR_LEG.Add(mypt[0]);
                                                                            mypt_finalFOR_LEG.Add(mypt[1]);
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }



                                                                        }

                                                                    }




                                                                    if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) < 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {

                                                                            mypt_final.Add(new TSG.Point(mypt[0].X, mypt[1].Y, 0));


                                                                            mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }

                                                                            mypt_finalFOR_LEG.Add(mypt[0]);
                                                                            mypt_finalFOR_LEG.Add(mypt[1]);
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }


                                                                        }

                                                                    }



                                                                    if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) > 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {

                                                                            mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));


                                                                            mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(maxy));
                                                                                dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }

                                                                            mypt_finalFOR_LEG.Add(mypt[0]);
                                                                            mypt_finalFOR_LEG.Add(mypt[1]);
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }



                                                                        }

                                                                    }


                                                                }

                                                            }

                                                            else if ((Convert.ToInt64(mypt[0].Y) <= -h1) && (Convert.ToInt64(mypt[1].Y) >= -h1))
                                                            {
                                                                TSM.ModelObjectEnumerator enum_for_bolt = mypart.GetBolts();
                                                                int s = enum_for_bolt.GetSize();
                                                                if (s > 0)
                                                                {
                                                                    List<TSG.Point[,]> check_for_bolt_in_part = new List<TSG.Point[,]>();
                                                                    while (enum_for_bolt.MoveNext())
                                                                    {
                                                                        TSM.BoltGroup drgbolt = enum_for_bolt.Current as TSM.BoltGroup;
                                                                        TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(drgbolt, current_view);
                                                                        check_for_bolt_in_part.Add(POINT_FOR_BOLT_MATRIX);
                                                                    }
                                                                    bool result_for_check_for_bolt_in_part = check_for_bolt_in_part.All(x => x == null);

                                                                    if ((result_for_check_for_bolt_in_part == true) && (prof_type != "L"))
                                                                    {
                                                                        if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {



                                                                                mypt_final.Add(mypt[1]);

                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));


                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }


                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }




                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) < 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                mypt_final.Add(new TSG.Point(mypt[0].X, mypt[1].Y, 0));


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }



                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) > 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                if ((Convert.ToInt64(mypt[0].Y) < 0) && (Convert.ToInt64(mypt[1].Y) < 0))
                                                                                {

                                                                                    mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                                    mypt_final.Add(new TSG.Point(0, 0, 0));



                                                                                    TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                        dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }

                                                                                    mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                    mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                        dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }

                                                                                }


                                                                                if ((Convert.ToInt64(mypt[0].Y) > 0) && (Convert.ToInt64(mypt[1].Y) > 0))
                                                                                {
                                                                                    mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                                    mypt_final.Add(new TSG.Point(0, 0, 0));



                                                                                    TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                        dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }

                                                                                    mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                    mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                        dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }

                                                                                }

                                                                            }

                                                                        }


                                                                    }
                                                                    else
                                                                    {

                                                                        if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));
                                                                                mypt_final.Add(mypt[1]);




                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }


                                                                                TSG.Vector VECTOR_FOR_ANGLE = new TSG.Vector();
                                                                                if ((mypt[0].X > 0) && (mypt[1].X > 0))
                                                                                {
                                                                                    VECTOR_FOR_ANGLE = new TSG.Vector(1, 0, 0);

                                                                                }
                                                                                else
                                                                                {

                                                                                    VECTOR_FOR_ANGLE = new TSG.Vector(-1, 0, 0);

                                                                                }
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                mypt_finalFOR_LEG.Add(new TSG.Point(mypt[1].X, mypt[0].Y, mypt[0].Z));


                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, VECTOR_FOR_ANGLE, distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }




                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) < 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                mypt_final.Add(new TSG.Point(mypt[0].X, mypt[1].Y, 0));


                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    ///1//////
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(new TSG.Point(mypt[0].X, mypt[1].Y, mypt[1].Z));
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(-1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }



                                                                            }

                                                                        }



                                                                        if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) > 0))
                                                                        {


                                                                            if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                            {

                                                                                if ((Convert.ToInt64(mypt[0].Y) < 0) && (Convert.ToInt64(mypt[1].Y) < 0))
                                                                                {

                                                                                    mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                                    mypt_final.Add(new TSG.Point(0, 0, 0));



                                                                                    TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));

                                                                                        ////////////////////////WHY////////////////
                                                                                        //dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }
                                                                                    ////////////////////////////////////////////////2018////////////////////////////////////////

                                                                                    TSG.Vector VECTOR_FOR_ANGLE = new TSG.Vector();
                                                                                    if ((mypt[0].X > 0) && (mypt[1].X > 0))
                                                                                    {
                                                                                        VECTOR_FOR_ANGLE = new TSG.Vector(1, 0, 0);

                                                                                    }
                                                                                    else
                                                                                    {

                                                                                        VECTOR_FOR_ANGLE = new TSG.Vector(-1, 0, 0);

                                                                                    }

                                                                                    mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                    mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                        dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, VECTOR_FOR_ANGLE, distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }

                                                                                }


                                                                                if ((Convert.ToInt64(mypt[0].Y) > 0) && (Convert.ToInt64(mypt[1].Y) > 0))
                                                                                {
                                                                                    mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                                    mypt_final.Add(new TSG.Point(0, 0, 0));



                                                                                    TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                        dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }

                                                                                    mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                    mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                    try
                                                                                    {
                                                                                        double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                        dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }

                                                                                }

                                                                            }

                                                                        }


                                                                    }


                                                                }
                                                                else
                                                                {


                                                                    if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {


                                                                            mypt_final.Add(mypt[1]);

                                                                            mypt_final.Add(new TSG.Point(0, 0, 0));


                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }


                                                                            mypt_finalFOR_LEG.Add(mypt[0]);
                                                                            mypt_finalFOR_LEG.Add(mypt[1]);
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }



                                                                        }

                                                                    }




                                                                    if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) < 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {


                                                                            mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));


                                                                            mypt_final.Add(new TSG.Point(0, 0, 0));

                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }

                                                                            mypt_finalFOR_LEG.Add(mypt[0]);
                                                                            mypt_finalFOR_LEG.Add(mypt[1]);
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(-1, 0, 0), distance1 + 150, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }



                                                                        }

                                                                    }



                                                                    if ((Convert.ToInt64(mypt[0].X) < 0) && (Convert.ToInt64(mypt[1].X) > 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {

                                                                            if ((Convert.ToInt64(mypt[0].Y) < 0) && (Convert.ToInt64(mypt[1].Y) < 0))
                                                                            {


                                                                                mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));



                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                            }


                                                                            if ((Convert.ToInt64(mypt[0].Y) > 0) && (Convert.ToInt64(mypt[1].Y) > 0))
                                                                            {
                                                                                mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                                mypt_final.Add(new TSG.Point(0, 0, 0));



                                                                                TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                    dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, -1, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                                mypt_finalFOR_LEG.Add(mypt[0]);
                                                                                mypt_finalFOR_LEG.Add(mypt[1]);
                                                                                try
                                                                                {
                                                                                    double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                    dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, new TSG.Vector(1, 0, 0), distance1 + 150, fixed_attributes);
                                                                                }
                                                                                catch
                                                                                {
                                                                                }

                                                                            }

                                                                        }

                                                                    }

                                                                }

                                                            }
                                                            else
                                                            {
                                                                if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                {
                                                                    TSM.ModelObjectEnumerator B = mypart.GetBolts();
                                                                    int C = B.GetSize();
                                                                    if (C == 0)
                                                                    {
                                                                        if (!prof_type.Equals("B"))
                                                                        {
                                                                            mypt_finalFOR_LEG.Add(mypt[0]);
                                                                            mypt_finalFOR_LEG.Add(mypt[1]);
                                                                            if (mypart.Position.Rotation.Equals(TSM.Position.RotationEnum.BACK))
                                                                            {

                                                                                mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                            }
                                                                            if ((mypart.Position.Rotation.Equals(TSM.Position.RotationEnum.FRONT)) && (mypart.Position.Plane.Equals(TSM.Position.PlaneEnum.LEFT)))
                                                                            {
                                                                                mypt_final.Add(new TSG.Point(mypt[1].X, mypt[0].Y, 0));
                                                                            }
                                                                            if ((mypart.Position.Rotation.Equals(TSM.Position.RotationEnum.FRONT)) && (mypart.Position.Plane.Equals(TSM.Position.PlaneEnum.RIGHT)))
                                                                            {
                                                                                mypt_final.Add(new TSG.Point(mypt[1].X, mypt[0].Y, 0));
                                                                            }
                                                                            //if ((mypart.Position.Rotation.Equals(TSM.Position.RotationEnum.TOP)) && (mypart.Position.Plane.Equals(TSM.Position.PlaneEnum.RIGHT)))
                                                                            //{
                                                                            //    mypt_final.Add(new TSG.Point(mypt[1].X, mypt[1].Y, 0));
                                                                            //}
                                                                            TSG.Vector MYVECTOR = new TSG.Vector();
                                                                            if (mypt[1].X > 0)
                                                                            {
                                                                                MYVECTOR = new TSG.Vector(1, 0, 0);
                                                                            }
                                                                            else if (mypt[1].X < 0)
                                                                            {
                                                                                MYVECTOR = new TSG.Vector(-1, 0, 0);
                                                                            }


                                                                            mypt_final.Add(new TSG.Point(0, h1, 0));
                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_final[0].Y) - Math.Abs(miny));
                                                                                dim.CreateDimensionSet(current_view, mypt_final, MYVECTOR, distance1 + 150, fixed_attributes);

                                                                            }
                                                                            catch
                                                                            {
                                                                            }

                                                                            try
                                                                            {
                                                                                double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                dim.CreateDimensionSet(current_view, mypt_finalFOR_LEG, MYVECTOR, distance1 + 150, fixed_attributes);

                                                                            }
                                                                            catch
                                                                            {
                                                                            }

                                                                            ////////////////////////////////2018/////////////////////////////////////////////////////
                                                                            //if (Convert.ToInt64(angle_cood.AxisX.X) != 0)
                                                                            //{
                                                                            try
                                                                            {

                                                                                TSD.PointList pt_lit_for_angle = new TSD.PointList();
                                                                                pt_lit_for_angle.Add(Get_face_point_for_angle_section_view(mypart, current_view));
                                                                                pt_lit_for_angle.Add(new TSG.Point(0, h1, 0));

                                                                                double distance1 = Math.Abs(Math.Abs(mypt_finalFOR_LEG[0].X) - Math.Abs(maxx));
                                                                                dim.CreateDimensionSet(current_view, pt_lit_for_angle, MYVECTOR, distance1 + 200, fixed_attributes);

                                                                            }
                                                                            catch
                                                                            {
                                                                            }
                                                                            //}


                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }









                                                    //////////////////////////////////////////end of pour stopper////////////////////////////////////////////////////////





                                                    Type[] type_for_mark = new Type[] { typeof(TSD.Mark), typeof(TSD.WeldMark) };

                                                    //////////////////////////////////////////seating angle code//////////////////////////////////////////////////
                                                    foreach (var list_of_parts in list_section_flange[z].partlist)
                                                    {



                                                        TSD.DrawingObjectEnumerator enum_for_mark = current_view.GetAllObjects(type_for_mark);


                                                        while (enum_for_mark.MoveNext())
                                                        {
                                                            var mark = enum_for_mark.Current;

                                                            if (mark.GetType().Equals(typeof(TSD.Mark)))
                                                            {
                                                                TSD.Mark mymark = mark as TSD.Mark;

                                                                TSD.DrawingObjectEnumerator enumcheck = mymark.GetRelatedObjects();

                                                                while (enumcheck.MoveNext())
                                                                {
                                                                    var mark_part = enumcheck.Current;
                                                                    if (mark_part.GetType().Equals(typeof(TSD.Part)))
                                                                    {
                                                                        TSM.Part modelpart = new TSM.Model().SelectModelObject((mark_part as TSD.Part).ModelIdentifier) as TSM.Part;

                                                                        Guid guid = modelpart.Identifier.GUID;



                                                                        if (list_section_flange[z].partlist.Any(p => p.Identifier.ID == modelpart.Identifier.ID))
                                                                        {

                                                                        }
                                                                        else
                                                                        {
                                                                            mymark.Delete();
                                                                        }



                                                                    }



                                                                }
                                                            }


                                                            else if (mark.GetType().Equals(typeof(TSD.WeldMark)))
                                                            {
                                                                TSD.WeldMark weldmark = mark as TSD.WeldMark;




                                                                ArrayList MERGE_WELD = new ArrayList();
                                                                //TSD.DrawingObjectEnumerator enumcheck1 = weldmark.GetObjects();
                                                                Identifier id = weldmark.ModelIdentifier;
                                                                TSM.BaseWeld weld = (new TSM.Model().SelectModelObject(id) as TSM.BaseWeld);
                                                                TSM.Part mainpart = (weld.MainObject as TSM.Part);
                                                                TSM.Part secondary_part = (weld.SecondaryObject as TSM.Part);

                                                                if ((list_section_flange[z].partlist.Any(p => p.Identifier.ID == mainpart.Identifier.ID)) || ((list_section_flange[z].partlist.Any(p => p.Identifier.ID == secondary_part.Identifier.ID))))
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    weldmark.Delete();
                                                                }







                                                            }
                                                        }




















                                                        TSM.Part mm = list_of_parts as TSM.Part;
                                                        string prof_type = "";
                                                        mm.GetReportProperty("PROFILE_TYPE", ref prof_type);
                                                        TSD.PointList bounding_box_x = bounding_box_sort_x(mm, current_view);
                                                        TSD.PointList bounding_box_y = bounding_box_sort_y(mm, current_view);

                                                        TSD.PointList mypt = bounding_box_sort_z(list_of_parts, current_view);
                                                        TSD.PointList mypt_final = new TSD.PointList();
                                                        TSD.PointList mypt_final_FOR_LEG = new TSD.PointList();
                                                        double height11 = Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2;
                                                        double h1 = Convert.ToInt64(height11);

                                                        //mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
                                                        TSG.CoordinateSystem PLATE_COORD = mm.GetCoordinateSystem();
                                                        TSG.Vector PLATE_X_VECTOR = PLATE_COORD.AxisX;
                                                        TSG.Vector PLATE_Y_VECTOR = PLATE_COORD.AxisY;
                                                        TSG.Vector PLATE_Z_VECTOR = PLATE_X_VECTOR.Cross(PLATE_Y_VECTOR);
                                                        PLATE_Z_VECTOR.Normalize();
                                                        if ((prof_type == "B") && (PLATE_Z_VECTOR.Z != 0))
                                                        {
                                                            TSM.ModelObjectEnumerator myplate_check_for_bolts = mm.GetBolts();




                                                            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                            int a = myplate_check_for_bolts.GetSize();

                                                            if (a == 0)
                                                            {


                                                                ArrayList PROFILE = Getcatalog_values_WITH_FLANGE_THICK(main_part);
                                                                double HEIGHT = Math.Abs(Convert.ToInt64(mypt[0].Y) - Convert.ToInt64(mypt[1].Y));
                                                                double W_HT = Convert.ToInt16(PROFILE[0]);
                                                                double THICK = Convert.ToInt16(PROFILE[3]);
                                                                double FULL_HT = W_HT - (2 * THICK);
                                                                if (HEIGHT + 5 < FULL_HT)
                                                                {
                                                                    if ((Convert.ToInt64(mypt[0].X) <= 0) && (Convert.ToInt64(mypt[1].X) <= 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {


                                                                            mypt_final.Add(new TSG.Point(mypt[0].X, mypt[1].Y, 0));


                                                                            mypt_final.Add(new TSG.Point(0, height11, 0));


                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();

                                                                            try
                                                                            {
                                                                                dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(0, 1, 0), 200, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }
                                                                            try
                                                                            {
                                                                                dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(-1, 0, 0), 200, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }


                                                                        }

                                                                    }




                                                                    if ((Convert.ToInt64(mypt[0].X) >= 0) && (Convert.ToInt64(mypt[1].X) >= 0))
                                                                    {


                                                                        if ((current_view.RestrictionBox.MaxPoint.X > mypt[0].Z) && (current_view.RestrictionBox.MinPoint.X < mypt[1].Z))
                                                                        {
                                                                            mypt_final.Add(mypt[1]);


                                                                            mypt_final.Add(new TSG.Point(0, height11, 0));

                                                                            TSD.StraightDimensionSetHandler dim = new TSD.StraightDimensionSetHandler();
                                                                            try
                                                                            {
                                                                                //dim.CreateDimensionSet(current_view, mypt_final, new TSG.Vector(1, 0, 0), 200, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }

                                                                            mypt_final_FOR_LEG.Add(mypt[0]);
                                                                            mypt_final_FOR_LEG.Add(mypt[1]);
                                                                            try
                                                                            {
                                                                                //dim.CreateDimensionSet(current_view, mypt_final_FOR_LEG, new TSG.Vector(1, 0, 0), 200, fixed_attributes);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }



                                                                        }



                                                                    }





                                                                }




                                                            }



                                                            else
                                                            {
                                                                ArrayList MM = new ArrayList();
                                                                while (myplate_check_for_bolts.MoveNext())
                                                                {
                                                                    TSD.PointList PLATE_CONNECTING_SIDE_POINTS = new TSD.PointList();

                                                                    TSM.BoltGroup MODELbolt = myplate_check_for_bolts.Current as TSM.BoltGroup;
                                                                    TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(MODELbolt, current_view);
                                                                    ///////////////////////////////////////////////////condition for depth adjustment////////////////////////////////////////////////////////////////////////////////////////////
                                                                    //////////////////////////////////////////////////// filtering bolts which lies within the section depth/////////////////////////////////////////////////////////////////////                       
                                                                    double upper_limit = current_view.RestrictionBox.MaxPoint.Z;
                                                                    double lower_limit = current_view.RestrictionBox.MinPoint.Z;
                                                                    if (POINT_FOR_BOLT_MATRIX != null)
                                                                    {
                                                                    }
                                                                    else
                                                                    {

                                                                        TSD.PointList p1 = bounding_box_sort_y(mm, current_view);



                                                                        TSG.CoordinateSystem m = MODELbolt.GetCoordinateSystem();
                                                                        TSM.Part mw = MODELbolt.PartToBeBolted;
                                                                        TSM.Part mw1 = MODELbolt.PartToBoltTo;
                                                                        ArrayList mw2 = MODELbolt.OtherPartsToBolt;
                                                                        if (bounding_box_x[0].X > 0)
                                                                        {
                                                                            if (!mw.Identifier.ID.Equals(mm.Identifier.ID))
                                                                            {
                                                                                TSG.CoordinateSystem kl = mw.GetCoordinateSystem();

                                                                                TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                                                TSG.Point pz = tokkk.Transform(kl.Origin);
                                                                                double Y_value = pz.Y;

                                                                                if (Convert.ToInt64(Y_value) > Convert.ToInt64(p1[1].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));

                                                                                }
                                                                                else if (Convert.ToInt64(Y_value) < Convert.ToInt64(p1[0].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));

                                                                                }


                                                                            }
                                                                            if (!mw1.Identifier.ID.Equals(mm.Identifier.ID))
                                                                            {
                                                                                TSG.CoordinateSystem kl = mw1.GetCoordinateSystem();

                                                                                TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                                                TSG.Point pz = tokkk.Transform(kl.Origin);
                                                                                double Y_value = pz.Y;

                                                                                if (Convert.ToInt64(Y_value) > Convert.ToInt64(p1[1].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));

                                                                                }
                                                                                else if (Convert.ToInt64(Y_value) < Convert.ToInt64(p1[0].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));

                                                                                }
                                                                            }
                                                                            double DISTANCE = Math.Abs(current_view.RestrictionBox.MaxPoint.X);


                                                                            PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(0, height11, 0));

                                                                            try
                                                                            {
                                                                                dim_3x3.CreateDimensionSet(current_view as TSD.ViewBase, PLATE_CONNECTING_SIDE_POINTS, new TSG.Vector(-1, 0, 0), DISTANCE + 100, dim_font_height1);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }
                                                                        }
                                                                        if (bounding_box_x[0].X < 0)
                                                                        {
                                                                            if (!mw.Identifier.ID.Equals(mm.Identifier.ID))
                                                                            {
                                                                                TSG.CoordinateSystem kl = mw.GetCoordinateSystem();

                                                                                TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                                                TSG.Point pz = tokkk.Transform(kl.Origin);
                                                                                double Y_value = pz.Y;

                                                                                if (Convert.ToInt64(Y_value) > Convert.ToInt64(p1[1].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));

                                                                                }
                                                                                else if (Convert.ToInt64(Y_value) < Convert.ToInt64(p1[0].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[0].Y, bounding_box_y[0].Z));

                                                                                }


                                                                            }
                                                                            if (!mw1.Identifier.ID.Equals(mm.Identifier.ID))
                                                                            {
                                                                                TSG.CoordinateSystem kl = mw1.GetCoordinateSystem();

                                                                                TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                                                TSG.Point pz = tokkk.Transform(kl.Origin);
                                                                                double Y_value = pz.Y;

                                                                                if (Convert.ToInt64(Y_value) > Convert.ToInt64(p1[1].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));

                                                                                }
                                                                                else if (Convert.ToInt64(Y_value) < Convert.ToInt64(p1[0].Y))
                                                                                {
                                                                                    PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));

                                                                                }
                                                                            }

                                                                            double DISTANCE = current_view.RestrictionBox.MaxPoint.X;

                                                                            PLATE_CONNECTING_SIDE_POINTS.Add(new TSG.Point(0, height11, 0));
                                                                            try
                                                                            {
                                                                                dim_3x3.CreateDimensionSet(current_view as TSD.ViewBase, PLATE_CONNECTING_SIDE_POINTS, new TSG.Vector(1, 0, 0), DISTANCE + 100, dim_font_height1);
                                                                            }
                                                                            catch
                                                                            {
                                                                            }
                                                                        }






                                                                    }
                                                                }








                                                            }

                                                        }



                                                    }
                                                    //////////////////////////////////////////end of seating angle code////////////////////////////////////////////////////////
                                                    List<Guid> FINAL_BOLTMARK_POS = new List<Guid>();
                                                    List<Guid> FINAL_BOLTMARK_NEG = new List<Guid>();

                                                    ArrayList PARTMARK_TO_BE_PROVIDED_SECTION = new ArrayList();
                                                    ArrayList BOLTMARK_TO_BE_PROVIDED_SECTION_POS = new ArrayList();
                                                    ArrayList BOLTMARK_TO_BE_PROVIDED_SECTION_NEG = new ArrayList();

                                                    Type type_for_PART = typeof(TSD.Part);
                                                    TSD.DrawingObjectEnumerator my_top_view_dimension_check = current_view.GetAllObjects(type_for_PART);
                                                    while (my_top_view_dimension_check.MoveNext())
                                                    {
                                                        TSD.Part DRG_PART = my_top_view_dimension_check.Current as TSD.Part;
                                                        TSM.ModelObject modelpart = new TSM.Model().SelectModelObject(DRG_PART.ModelIdentifier);


                                                        bool CHECK = SECTION_VIEW_PARTMARK_TO_RETAIN.Any(X => X.Equals(modelpart.Identifier.GUID));

                                                        if (CHECK == true)
                                                        {
                                                            PARTMARK_TO_BE_PROVIDED_SECTION.Add(DRG_PART);

                                                        }

                                                    }
                                                    Type type_for_BOLT = typeof(TSD.Bolt);
                                                    TSD.DrawingObjectEnumerator SECTION_VIEW_BOLTMARK_ENUM = current_view.GetAllObjects(type_for_BOLT);
                                                    while (SECTION_VIEW_BOLTMARK_ENUM.MoveNext())
                                                    {
                                                        TSD.Bolt DRG_BOLT = SECTION_VIEW_BOLTMARK_ENUM.Current as TSD.Bolt;
                                                        TSM.ModelObject modelpart = new TSM.Model().SelectModelObject(DRG_BOLT.ModelIdentifier);

                                                        bool CHECK = SECTION_VIEW_BOLTMARK_TO_RETAIN_POS.Any(X => X.Equals(modelpart.Identifier.GUID));
                                                        bool CHECK1 = SECTION_VIEW_BOLTMARK_TO_RETAIN_NEG.Any(X => X.Equals(modelpart.Identifier.GUID));

                                                        if (CHECK == true)
                                                        {
                                                            BOLTMARK_TO_BE_PROVIDED_SECTION_POS.Add(DRG_BOLT);
                                                            FINAL_BOLTMARK_POS.Add(DRG_BOLT.ModelIdentifier.GUID);


                                                        }
                                                        if (CHECK1 == true)
                                                        {
                                                            BOLTMARK_TO_BE_PROVIDED_SECTION_NEG.Add(DRG_BOLT);
                                                            FINAL_BOLTMARK_NEG.Add(DRG_BOLT.ModelIdentifier.GUID);

                                                        }

                                                    }

                                                    MacroBuilder builder = new MacroBuilder();





                                                    if (list.Count > 0)
                                                    {

                                                    }








                                                    foreach (TSD.Part PART_GUID in PARTMARK_TO_BE_PROVIDED_SECTION)
                                                    {

                                                        my_handler.GetDrawingObjectSelector().SelectObject(PART_GUID);
                                                        Tekla.Structures.Model.Operations.Operation.RunMacro(@"..\drawings\acmd_create_marks_selected.cs");
                                                        my_handler.GetDrawingObjectSelector().UnselectAllObjects();
                                                    }


                                                }


                                            }
                                            #endregion





                                            top_view_check_for_dim(beam_assembly_drg, TOP_VIEW_needed);
                                            orientationmark(beam_assembly_drg, main_part);
                                            BOLTMARK_EXACT(beam_assembly_drg);


                                            //////////////////////////////////////////////////////////////////////////End of ALL views //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                            ArrayList PART_MARK_TO_DELETE = new ArrayList();
                                            TSD.DrawingObjectEnumerator PART_MARK_TEST = beam_assembly_drg.GetSheet().GetAllViews();
                                            while (PART_MARK_TEST.MoveNext())
                                            {
                                                Type type_for_MARK = typeof(TSD.Mark);
                                                TSD.View MYVIEW = PART_MARK_TEST.Current as TSD.View;
                                                if ((MYVIEW.ViewType.Equals(TSD.View.ViewTypes.FrontView)))
                                                {


                                                    TSD.DrawingObjectEnumerator my_top_view_dimension_check = MYVIEW.GetAllObjects(type_for_MARK);
                                                    while (my_top_view_dimension_check.MoveNext())
                                                    {

                                                        TSD.Mark MYMARK = my_top_view_dimension_check.Current as TSD.Mark;

                                                        TSD.DrawingObjectEnumerator MYBJ = MYMARK.GetRelatedObjects();
                                                        while (MYBJ.MoveNext())
                                                        {
                                                            var mark_part = MYBJ.Current;
                                                            if (mark_part.GetType().Equals(typeof(TSD.Part)))
                                                            {
                                                                TSM.Part modelpart = new TSM.Model().SelectModelObject((mark_part as TSD.Part).ModelIdentifier) as TSM.Part;

                                                                Guid guid = modelpart.Identifier.GUID;
                                                                if (guid == main_part.Identifier.GUID)
                                                                {

                                                                    MYMARK.Attributes.PreferredPlacing = TSD.PreferredPlacingTypes.LeaderLinePlacingType();
                                                                    if (MYMARK.Attributes.Frame.Type.Equals(TSD.FrameTypes.None))
                                                                    {

                                                                        MYMARK.Attributes.Frame.Type = TSD.FrameTypes.None;
                                                                    }
                                                                    MYMARK.Modify();
                                                                }
                                                                else
                                                                {

                                                                    PART_MARK_TO_DELETE.Add(MYMARK);


                                                                }
                                                            }
                                                            else if (mark_part.GetType().Equals(typeof(TSD.Bolt)))
                                                            {
                                                                PART_MARK_TO_DELETE.Add(MYMARK);

                                                            }

                                                        }



                                                    }





                                                }
                                                else if (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.TopView))
                                                {
                                                    TSD.DrawingObjectEnumerator my_top_view_dimension_check = MYVIEW.GetAllObjects(type_for_MARK);
                                                    while (my_top_view_dimension_check.MoveNext())
                                                    {

                                                        TSD.Mark MYMARK = my_top_view_dimension_check.Current as TSD.Mark;


                                                        PART_MARK_TO_DELETE.Add(MYMARK);

                                                    }

                                                }


                                            }
                                            PART_MARK_TEST.Reset();

                                            while (PART_MARK_TEST.MoveNext())
                                            {
                                                Type type_for_MARK = typeof(TSD.MarkSet);
                                                TSD.View MYVIEW = PART_MARK_TEST.Current as TSD.View;
                                                if ((MYVIEW.ViewType.Equals(TSD.View.ViewTypes.FrontView)))
                                                {
                                                    TSD.DrawingObjectEnumerator my_top_view_dimension_check = MYVIEW.GetAllObjects(type_for_MARK);
                                                    while (my_top_view_dimension_check.MoveNext())
                                                    {

                                                        TSD.MarkSet MYMARK = my_top_view_dimension_check.Current as TSD.MarkSet;


                                                        PART_MARK_TO_DELETE.Add(MYMARK);


                                                    }


                                                }
                                            }

                                            PART_MARK_TEST.Reset();

                                            while (PART_MARK_TEST.MoveNext())
                                            {
                                                Type type_for_PART = typeof(TSD.Part);
                                                TSD.View MYVIEW = PART_MARK_TEST.Current as TSD.View;
                                                if ((MYVIEW.ViewType.Equals(TSD.View.ViewTypes.FrontView)) || (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.TopView)) || (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.BottomView)))
                                                {
                                                    my_handler.GetDrawingObjectSelector().SelectObjects(PART_MARK_TO_DELETE, true);
                                                    Tekla.Structures.Model.Operations.Operation.RunMacro(@"..\drawings\acmd_delete_selected_dr.cs");
                                                    my_handler.GetDrawingObjectSelector().UnselectAllObjects();

                                                }


                                            }







                                            ArrayList PARTMARK_TO_BE_PROVIDED_FRONT = new ArrayList();
                                            ArrayList PARTMARK_TO_BE_PROVIDED_TOP = new ArrayList();
                                            ArrayList BOLTMARK_TO_BE_PROVIDED_FRONT = new ArrayList();
                                            ArrayList BOLTMARK_TO_BE_PROVIDED_TOP = new ArrayList();
                                            ArrayList BOLTMARK_TO_BE_PROVIDED_BOTTOM = new ArrayList();

                                            PART_MARK_TEST.Reset();

                                            while (PART_MARK_TEST.MoveNext())
                                            {
                                                Type type_for_PART = typeof(TSD.Part);
                                                TSD.View MYVIEW = PART_MARK_TEST.Current as TSD.View;
                                                if (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                                                {

                                                    TSD.DrawingObjectEnumerator my_top_view_dimension_check = MYVIEW.GetAllObjects(type_for_PART);
                                                    while (my_top_view_dimension_check.MoveNext())
                                                    {
                                                        TSD.Part DRG_PART = my_top_view_dimension_check.Current as TSD.Part;
                                                        TSM.ModelObject modelpart = new TSM.Model().SelectModelObject(DRG_PART.ModelIdentifier);


                                                        bool CHECK = FRONT_VIEW_PARTMARK_TO_RETAIN.Any(X => X.Equals(modelpart.Identifier.GUID));

                                                        if (CHECK == true)
                                                        {
                                                            PARTMARK_TO_BE_PROVIDED_FRONT.Add(DRG_PART);

                                                        }

                                                    }
                                                }
                                                if (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.TopView))
                                                {

                                                    TSD.DrawingObjectEnumerator my_top_view_dimension_check = MYVIEW.GetAllObjects(type_for_PART);
                                                    while (my_top_view_dimension_check.MoveNext())
                                                    {
                                                        TSD.Part KK = my_top_view_dimension_check.Current as TSD.Part;
                                                        TSM.ModelObject model_bolt = new TSM.Model().SelectModelObject(KK.ModelIdentifier);


                                                        bool CHECK = TOP_VIEW_PARTMARK_TO_RETAIN.Any(X => X.Equals(model_bolt.Identifier.GUID));
                                                        if (CHECK == true)
                                                        {
                                                            PARTMARK_TO_BE_PROVIDED_TOP.Add(KK);

                                                        }

                                                    }
                                                }


                                            }

                                            PART_MARK_TEST.Reset();

                                            while (PART_MARK_TEST.MoveNext())
                                            {
                                                Type type_for_BOLT = typeof(TSD.Bolt);
                                                TSD.View MYVIEW = PART_MARK_TEST.Current as TSD.View;
                                                if (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                                                {

                                                    TSD.DrawingObjectEnumerator my_top_view_dimension_check = MYVIEW.GetAllObjects(type_for_BOLT);
                                                    while (my_top_view_dimension_check.MoveNext())
                                                    {
                                                        TSD.Bolt DRG_BOLT = my_top_view_dimension_check.Current as TSD.Bolt;
                                                        TSM.ModelObject modelpart = new TSM.Model().SelectModelObject(DRG_BOLT.ModelIdentifier);


                                                        bool CHECK = FRONT_VIEW_BOLTMARK_TO_RETAIN.Any(X => X.Equals(modelpart.Identifier.GUID));

                                                        if (CHECK == true)
                                                        {
                                                            BOLTMARK_TO_BE_PROVIDED_FRONT.Add(DRG_BOLT);

                                                        }

                                                    }
                                                }
                                                else if (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.TopView))
                                                {

                                                    TSD.DrawingObjectEnumerator my_top_view_dimension_check = MYVIEW.GetAllObjects(type_for_BOLT);
                                                    while (my_top_view_dimension_check.MoveNext())
                                                    {
                                                        TSD.Bolt DRG_BOLT = my_top_view_dimension_check.Current as TSD.Bolt;
                                                        TSM.ModelObject model_bolt = new TSM.Model().SelectModelObject(DRG_BOLT.ModelIdentifier);


                                                        bool CHECK = TOP_VIEW_BOLTMARK_TO_RETAIN.Any(X => X.Equals(model_bolt.Identifier.GUID));
                                                        if (CHECK == true)
                                                        {
                                                            BOLTMARK_TO_BE_PROVIDED_TOP.Add(DRG_BOLT);

                                                        }

                                                    }
                                                }



                                            }

                                            PART_MARK_TEST.Reset();

                                            while (PART_MARK_TEST.MoveNext())
                                            {
                                                Type type_for_PART = typeof(TSD.Part);
                                                TSD.View MYVIEW = PART_MARK_TEST.Current as TSD.View;
                                                if (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                                                {
                                                    my_handler.GetDrawingObjectSelector().SelectObjects(PARTMARK_TO_BE_PROVIDED_FRONT, true);

                                                    Tekla.Structures.Model.Operations.Operation.RunMacro(@"..\drawings\acmd_create_marks_selected.cs");
                                                    my_handler.GetDrawingObjectSelector().UnselectAllObjects();
                                                    my_handler.GetDrawingObjectSelector().SelectObjects(BOLTMARK_TO_BE_PROVIDED_FRONT, true);

                                                    Tekla.Structures.Model.Operations.Operation.RunMacro(@"..\drawings\acmd_create_marks_selected.cs");
                                                    my_handler.GetDrawingObjectSelector().UnselectAllObjects();

                                                }
                                                else if (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.TopView))
                                                {
                                                    my_handler.GetDrawingObjectSelector().SelectObjects(PARTMARK_TO_BE_PROVIDED_TOP, true);

                                                    Tekla.Structures.Model.Operations.Operation.RunMacro(@"..\drawings\acmd_create_marks_selected.cs");
                                                    my_handler.GetDrawingObjectSelector().UnselectAllObjects();
                                                    my_handler.GetDrawingObjectSelector().SelectObjects(BOLTMARK_TO_BE_PROVIDED_TOP, true);

                                                    Tekla.Structures.Model.Operations.Operation.RunMacro(@"..\drawings\acmd_create_marks_selected.cs");
                                                    my_handler.GetDrawingObjectSelector().UnselectAllObjects();

                                                }



                                            }










                                            weld_merge(beam_assembly_drg, main_part, my_handler);
                                            centre_line(beam_assembly_drg, main_part);
                                            if (cmbclient.Text == "SME")
                                            {
                                                connecting_side_mark(beam_assembly_drg, main_part);
                                            }
                                            //bolt_mark_detail(beam_assembly_drg, main_part, drg_att);
                                            //bolt_mark_detail(beam_assembly_drg, main_part);
                                            bolt_mark_detail(beam_assembly_drg, main_part, drg_att);
                                            ATT_SETT(beam_assembly_drg, main_part);
                                            Dim_Fix(beam_assembly_drg);
                                            Fall_Tech(beam_assembly_drg);

                                            beam_assembly_drg.PlaceViews();

                                            delete_sec_view_same_dims(beam_assembly_drg, my_handler);

                                            view_placement(beam_assembly_drg, drg_att, start_pt_for_section_view_aling, bottom_view_list, sectionviews_in_drawing, bottom_view_FLANGE_CUT_LIST, TOP_view_FLANGE_CUT_LIST);


                                            #endregion



                                            long sheet_height = Convert.ToInt64(beam_assembly_drg.Layout.SheetSize.Height);
                                            long sheet_width = Convert.ToInt64(beam_assembly_drg.Layout.SheetSize.Width);
                                            //PART_MARK_FREE_FIX(beam_assembly_drg, main_part, my_handler);
                                            List<bool> view_out = new List<bool>();
                                            TSD.DrawingObjectEnumerator view_out_enum = beam_assembly_drg.GetSheet().GetAllViews();
                                            while (view_out_enum.MoveNext())
                                            {
                                                List<TSG.Point> list_of_rbb_points = new List<TSG.Point>();
                                                TSD.View MYVIEW = view_out_enum.Current as TSD.View;
                                                MYVIEW.Modify();
                                                TSD.RectangleBoundingBox rbb = MYVIEW.GetAxisAlignedBoundingBox();
                                                list_of_rbb_points.Add(rbb.UpperLeft);
                                                list_of_rbb_points.Add(rbb.LowerLeft);
                                                list_of_rbb_points.Add(rbb.UpperRight);
                                                list_of_rbb_points.Add(rbb.LowerRight);

                                                foreach (TSG.Point mypoint in list_of_rbb_points)
                                                {
                                                    if ((mypoint.X > 0) && (mypoint.X < Width) && (mypoint.Y > 0) && (mypoint.Y < Height))
                                                    {
                                                        view_out.Add(false);

                                                    }
                                                    else
                                                    {
                                                        view_out.Add(true);
                                                    }

                                                }

                                            }
                                            result_for_view_out = view_out.Any(x => x.Equals(true));

                                            if (result_for_view_out == true)
                                            {


                                                int total_att = required_attribute.Count - 1;
                                                int current = att;
                                                int remaining_att = total_att - current;
                                                //if (remaining_att > 0)
                                                //{

                                                //    my_handler.CloseActiveDrawing();
                                                //    beam_assembly_drg.Delete();
                                                //    continue;
                                                //}
                                                //else
                                                //{
                                                //    break;
                                                //}


                                            }
                                            else
                                            {
                                                break;
                                            }




                                        }
                                        else
                                        {





                                        }


                                    }
                                    my_handler.SaveActiveDrawing();
                                    beam_assembly_drg.PlaceViews();
                                    slot_symbol(beam_assembly_drg, main_part);
                                    beam_assembly_drg.CommitChanges();
                                    my_handler.CloseActiveDrawing(true);
                                    mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                    mymodel.CommitChanges();
                                    DRG_REMARK = "Created";
                                    SKDrawings.Contains(assembly_pos.ToUpper());
                                    span = DateTime.Now.Subtract(start_assy_tm);
                                    //dgvlog.Rows.Add(assembly_pos, span.Minutes.ToString() + "m " + span.Seconds.ToString() + "s" + DRG_REMARK);            
                                    DataGridViewRow MyRow = dgvlog.Rows[dgvlog.Rows.Add()];
                                    MyRow.Cells["drgmark"].Value = assembly_pos;
                                    MyRow.Cells["drgrmk"].Value = span.Minutes.ToString() + "m " + span.Seconds.ToString() + "s" + DRG_REMARK;
                                    proct++;
                                }
                            }
                            else
                            {
                                DRG_REMARK = "Numbering???";
                                errct++;
                                TSM.Part main_part = ATTRIBUTE_CHECK_LENGTH.GetMainPart() as TSM.Part;
                                //dataGridView2.Rows.Add(new object[] { f, get_report_properties(main_part, "PART_POS"), main_part.Identifier.GUID });
                            }

                        }
                        catch
                        {
                            try
                            {
                                TSD.AssemblyDrawing beam_assembly_drg1 = my_handler.GetActiveDrawing() as TSD.AssemblyDrawing;
                                beam_assembly_drg1.CommitChanges();
                                my_handler.SaveActiveDrawing();
                                my_handler.CloseActiveDrawing(true);
                                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                mymodel.CommitChanges();
                                errct++;
                                DRG_REMARK = " Error.";
                                SKDrawings.Contains(assembly_pos.ToUpper());
                                span = DateTime.Now.Subtract(start_assy_tm);
                                //dgvlog.Rows.Add(assembly_pos, span.Minutes.ToString() + "m " + span.Seconds.ToString() + "s" + DRG_REMARK);

                                DataGridViewRow MyRow = dgvlog.Rows[dgvlog.Rows.Add()];
                                MyRow.Cells["drgmark"].Value = assembly_pos;
                                MyRow.Cells["drgrmk"].Value = span.Minutes.ToString() + "m " + span.Seconds.ToString() + "s" + DRG_REMARK;
                            }
                            catch
                            {
                            }
                        }

                        //string assembly_pos = "";
                        //string DRG_NUMBER = "";

                        //drglog.Add(assembly_pos + "|" + DRG_NUMBER);
                        //TimeSpan span = DateTime.Now.Subtract(s_tm);
                        //bool search = false;
                        //foreach(DataGridViewRow dataGridViewRow in dgvlog.Rows)
                        //{
                        //    if (dataGridViewRow.Cells[0].Value.ToString()==assembly_pos)
                        //    {
                        //        search = true;
                        //        break;
                        //    }
                        //}

                        //if(search==false)
                        //{
                        //    dgvlog.Rows.Add(assembly_pos, span.Minutes.ToString() + "m " + span.Seconds.ToString() + "s" + DRG_REMARK);
                        //}
                        //skWinLib.accesslog(skApplicationName, skApplicationVersion, "Create_BeamDrawings" , assembly_pos + ";" + span.Minutes.ToString() + "m " + span.Seconds.ToString() + "s. ; " + DRG_REMARK, "", "");

                    }
                    if (SKDrawings.Count >= 1)
                    {
                        string assymark = "\n";
                        foreach (DataGridViewRow dataGridViewRow in dgvlog.Rows)
                        {
                            if (dataGridViewRow.Cells["drgmark"].Value != null)
                                assymark = assymark  + "\n" + dataGridViewRow.Cells["drgmark"].Value.ToString();          
                      
                        }
                        skWinLib.accesslog(skApplicationName, skApplicationVersion, "Create_BeamDrawings" , assymark, "", "");
                        mymodel.CommitChanges();
                    }                    
                    MessageBox.Show("AUTOMATION COMPLETED");


                }
                else
                {

                    MessageBox.Show("Please open Tekla Structures and a model", "Open Tekla Structures", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    frmdrgeditor.ActiveForm.Close();
                }
            }


            pbar.Value = pbar.Value + 1;
            pbar.Refresh();
            //foreach(string drgdata in drglog)
            //{
            //    string[] split_text = drgdata.Split('|');
            //    dgvlog.Rows.Add(split_text);
            //}
         
           // skWinLib.updaterowheader(dgvlog);

            pbar.Value = pbar.Value + 1;
            pbar.Refresh();
            dgvlog.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCellsExceptHeader;

            pbar.Value = pbar.Value + 1;
            pbar.Refresh();  
            //this.Text = skWinLib.UpdateHeaderInformation(skApplicationName, skApplicationVersion, skTSLib.ModelName, 0, selct, 0, errct, proct);

            pbar.Value = pbar.Maximum;
            pbar.Refresh();
            pbar.Visible = false;

            return " Created Drawing: " + proct + " Error: " + errct;
        }




        public void bolt_rd_in_front_view_for_st_beam(TSD.View current_view, double distance_for_placing, TSD.StraightDimensionSet.StraightDimensionSetAttributes myattribute, double output)
        {
            TSD.PointList boltrdlist = new TSD.PointList();
            TSG.Point mystartbolt_pt = new TSG.Point(0, 0, 0);
            ////////////////////////adding first point //////////////////////////////////////////////////////////////////////////////
            boltrdlist.Add(mystartbolt_pt);
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            ///////////////////////bolt filter //////////////////////////////////////////////////////////////////////////////////////
            Type[] type_for_bolt = new Type[] { typeof(TSD.Bolt) };
            TSD.DrawingObjectEnumerator enum_for_bolt3 = current_view.GetAllObjects(type_for_bolt);
            //////////////////////adding bolt pts in pointlist///////////////////////////////////////////////////////////////////////
            while (enum_for_bolt3.MoveNext())
            {
                TSD.Bolt bolt_drg_part = enum_for_bolt3.Current as TSD.Bolt;
                TSM.BoltArray bolt_front_view = (new TSM.Model().SelectModelObject(bolt_drg_part.ModelIdentifier)) as TSM.BoltArray;
                if (bolt_front_view.BoltType.Equals(TSM.BoltArray.BoltTypeEnum.BOLT_TYPE_SITE))
                {
                    if (bolt_front_view.BoltPositions.Count > 1)
                    {
                        ///////////////////// adding bolt last points in pointlist /////////////////////////////////////////////////////////////////
                        boltrdlist.Add(toviewmatrix.Transform(bolt_front_view.BoltPositions[bolt_front_view.BoltPositions.Count - 1] as TSG.Point));
                    }
                }
            }
            /////////////////////// adding last point/////////////////////////////////////////////////////////////////////////////////
            TSG.Point mylastbolt_pt = new TSG.Point(output, 0, 0);
            boltrdlist.Add(mylastbolt_pt);
            //////////////////////dimension creation /////////////////////////////////////////////////////////////////////////////////
            TSD.StraightDimensionSetHandler bolt_rd = new TSD.StraightDimensionSetHandler();
            bolt_rd.CreateDimensionSet(current_view, boltrdlist, new TSG.Vector(0, 1, 0), distance_for_placing, myattribute);
        }

        public void bolt_3_dim(TSM.ModelObject model_object_of_bolt, TSD.View current_view, TSG.Vector myvector, double distance)
        {
            ///////////////////////////////////////////////////////bolt_dimension_creation_for_3333///////////////////////////////////////////////////////////////////////////////////
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            if (model_object_of_bolt.GetType().Equals(typeof(TSM.BoltArray)))
            {
                TSM.BoltArray mymodelboltarray = model_object_of_bolt as TSM.BoltArray;
                TSD.PointList boltpoints_in_array = new TSD.PointList();
                TSD.PointList boltpoint_for_dim = new TSD.PointList();
                foreach (TSG.Point boltpoint in mymodelboltarray.BoltPositions)
                {
                    TSG.Point mypoint = toviewmatrix.Transform(boltpoint);
                    boltpoint_for_dim.Add(mypoint);
                }
                TSD.StraightDimensionSetHandler bolt_dim = new TSD.StraightDimensionSetHandler();
                bolt_dim.CreateDimensionSet(current_view as TSD.ViewBase, boltpoint_for_dim, myvector, distance);
            }
            if (model_object_of_bolt.GetType().Equals(typeof(TSM.BoltXYList)))
            {
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }

        public ArrayList Getcatalog_values(TSM.Part main_part)
        {
            ArrayList values = new ArrayList();
            double size1_m = 0, size3_m = 0, size2_m = 0;
            LibraryProfileItem mainpro = new LibraryProfileItem { ProfileName = main_part.Profile.ProfileString };
            mainpro.Select();
            ArrayList parameters_for_main = mainpro.aProfileItemParameters;
            ProfileItemParameter bm = parameters_for_main[0] as ProfileItemParameter;
            ProfileItemParameter cm = parameters_for_main[2] as ProfileItemParameter;
            ProfileItemParameter dm = parameters_for_main[1] as ProfileItemParameter;
            size1_m = bm.Value;
            size3_m = cm.Value;
            size2_m = dm.Value;
            values.Add(size1_m);
            values.Add(size2_m);
            values.Add(size3_m);
            return values;
        }

        public ArrayList Getcatalog_values_WITH_FLANGE_THICK(TSM.Part main_part)
        {
            ArrayList values = new ArrayList();
            double size1_m = 0, size3_m = 0, size2_m = 0, size4_m = 0;
            LibraryProfileItem mainpro = new LibraryProfileItem { ProfileName = main_part.Profile.ProfileString };
            mainpro.Select();
            ArrayList parameters_for_main = mainpro.aProfileItemParameters;
            ProfileItemParameter bm = parameters_for_main[0] as ProfileItemParameter;
            ProfileItemParameter cm = parameters_for_main[2] as ProfileItemParameter;
            ProfileItemParameter dm = parameters_for_main[1] as ProfileItemParameter;
            ProfileItemParameter dEm = parameters_for_main[3] as ProfileItemParameter;
            size1_m = bm.Value;
            size3_m = cm.Value;
            size2_m = dm.Value;
            size4_m = dEm.Value;
            values.Add(size1_m);
            values.Add(size2_m);
            values.Add(size3_m);
            values.Add(size4_m);
            return values;
        }

        public void Drawing_create_and_delete_all_dimensions_except_assembly_dim_original(TSM.ModelObjectEnumerator enum_for_picked_assemblies, string drg_attribute, out TSD.AssemblyDrawing ASSEMBLY_DRAWING, out TSM.Part main_part, out double output)
        {
            ////////////////////////////////////////////////////////////Drawing creation and insert////////////////////////////////////////////////////////////////////////////////////
            TSD.DrawingHandler drg_handler = new TSD.DrawingHandler();
            ASSEMBLY_DRAWING = null;
            main_part = null;
            output = 0;
            while (enum_for_picked_assemblies.MoveNext())
            {
                TSM.Assembly ASSEMBLY = enum_for_picked_assemblies.Current as TSM.Assembly;
                ASSEMBLY_DRAWING = new TSD.AssemblyDrawing(ASSEMBLY.Identifier, drg_attribute);
                main_part = (ASSEMBLY.GetMainPart()) as TSM.Beam;
                ASSEMBLY_DRAWING.Insert();
                //////////////////////////////////////////////////////Getting workpoints of assembly from bounding box//////////////////////////////////////////////////////////////////////
                output = 0;
                main_part.GetReportProperty("LENGTH", ref output);
                TSD.DrawingObjectEnumerator enum_for_drg_views_del = ASSEMBLY_DRAWING.GetSheet().GetAllViews();
                TSG.Point workpointst_1 = bounding_box(main_part)[0];
                TSG.Point workpointend_1 = bounding_box(main_part)[1];
                Type[] type_for_dim = new Type[] { typeof(TSD.StraightDimension), typeof(TSD.StraightDimensionSet) };
                drg_handler.SetActiveDrawing(ASSEMBLY_DRAWING, true);
                ///////////////////////////////////////////////////////////////Enumerating different views//////////////////////////////////////////////////////////////////////////////////
                while (enum_for_drg_views_del.MoveNext())
                {
                    TSD.View current_view = enum_for_drg_views_del.Current as TSD.View;
                    TSD.DrawingObjectEnumerator dim_drg = current_view.GetAllObjects(type_for_dim);
                    # region front_view_dimension_delete
                    ///////////////////////////////////////////////Retaining front view assembly dimensions and deleting rest of the dimensions///////////////////////////////////////////////////
                    ////////////////////////////////////////////////////////Comparing the straight dimensions with the actual assembly length////////////////////////////////////////////////////
                    TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                    TSG.Point workpointst2 = toviewmatrix.Transform(workpointst_1);
                    TSG.Point workpointend2 = toviewmatrix.Transform(workpointend_1);
                    double actual_distance = 0;
                    while (dim_drg.MoveNext())
                    {
                        var dim_del = dim_drg.Current;
                        if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                        {
                            if (dim_del.GetType().Equals(typeof(TSD.StraightDimension)))
                            {
                                TSD.StraightDimension dim = dim_del as TSD.StraightDimension;

                                if (main_part.Name.Contains("COLUMN"))
                                {
                                    actual_distance = Math.Abs(workpointend2.Y - workpointst2.Y);
                                    if (Convert.ToInt16(dim.EndPoint.Y) - Convert.ToInt16(dim.StartPoint.Y) == Convert.ToInt16(actual_distance))
                                    {

                                    }
                                    else
                                    {
                                        dim.Delete();
                                    }
                                }
                                else if (main_part.Name.Contains("BEAM"))
                                {
                                    actual_distance = Math.Abs(workpointend2.X - workpointst2.X);
                                    if (Convert.ToInt16(dim.EndPoint.X) - Convert.ToInt16(dim.StartPoint.X) == Convert.ToInt16(actual_distance))
                                    {

                                    }
                                    else if ((dim.StartPoint.X < 0) || (dim.EndPoint.X < 0))
                                    {
                                    }
                                    else if ((dim.StartPoint.X > output) || (dim.EndPoint.X > output))
                                    {
                                    }
                                    else
                                    {
                                        dim.Delete();
                                    }
                                }
                            }
                        }
                        else
                        {
                            dim_del.Delete();
                        }
                    }
                    # endregion
                }
            }
        }
        public void Drawing_create_and_delete_all_dimensions_except_assembly_dim(TSM.Model mymodel, TSM.ModelObject enum_for_picked_assemblies, string drg_attribute, out TSD.AssemblyDrawing ASSEMBLY_DRAWING, out TSM.Part main_part, out double output, out TSM.Assembly ASSEMBLY, out TSD.StraightDimension overall_dim, out double DIM_DISTANCE, out double ACTUAL_DIS, out List<section_loc_with_parts> list2, double SCALE, double MINI_LENGTH, out List<section_loc_with_parts> list_for_flange_section, out List<section_loc_with_parts> list_for_flange_section_for_duplicate, out List<TSM.Part> list_of_parts_for_bottom_part_mark_retain, out List<Guid> list_of_guid_in_top_view_to_delete, out TSD.StraightDimension OVERALL_DIMENSION,out List<TSD.RadiusDimension> list_of_radius_dim)
        {
            /////////////Drawing creation and insert//////////////////////////////////////////////


            TSD.DrawingHandler drg_handler = new TSD.DrawingHandler();
            ASSEMBLY_DRAWING = null;
            ASSEMBLY = null;
            main_part = null;
            DIM_DISTANCE = 0;
            ACTUAL_DIS = 0;
            output = 0;
            overall_dim = null;
            ASSEMBLY = enum_for_picked_assemblies as TSM.Assembly;
            OVERALL_DIMENSION = null;




            main_part = (ASSEMBLY.GetMainPart()) as TSM.Beam;

            list2 = new List<section_loc_with_parts>();
            list_for_flange_section = new List<section_loc_with_parts>();
            list_for_flange_section_for_duplicate = new List<section_loc_with_parts>();
            list_of_parts_for_bottom_part_mark_retain = new List<TSM.Part>();
            list_of_guid_in_top_view_to_delete = new List<Guid>();
            list_of_radius_dim = new List<TSD.RadiusDimension>();



            
            //////////////////////////////Getting workpoints of assembly from bounding box/////////////////////
            output = 0;
            main_part.GetReportProperty("LENGTH", ref output);



            ASSEMBLY_DRAWING = new TSD.AssemblyDrawing(ASSEMBLY.Identifier, drg_attribute);



            ASSEMBLY_DRAWING.Insert();
            drg_handler.SetActiveDrawing(ASSEMBLY_DRAWING,true);



            TSD.DrawingObjectEnumerator enum_for_drg_views_del_1 = ASSEMBLY_DRAWING.GetSheet().GetAllViews();
            while (enum_for_drg_views_del_1.MoveNext())
            {


                TSD.View current_view = enum_for_drg_views_del_1.Current as TSD.View;
                current_view.Attributes.Scale = SCALE;

                current_view.Attributes.Shortening.MinimumLength = MINI_LENGTH;
                current_view.Attributes.Shortening.CutPartType = TSD.View.ShorteningCutPartType.X_Direction;
                //current_view.Modify();
                //current_view.Attributes.Shortening.CutPartType = TSD.View.ShorteningCutPartType.BothDirections;
                current_view.Modify();
                ASSEMBLY_DRAWING.Modify();
                //ASSEMBLY_DRAWING.CommitChanges();

            }
         


            TSD.DrawingObjectEnumerator enum_for_drg_views_del = ASSEMBLY_DRAWING.GetSheet().GetAllViews();

            TSD.PointList ASSEMBLY_BOUNDING_BOX = bounding_box_FOR_DIM(ASSEMBLY);

            TSG.Point workpointst_1 = ASSEMBLY_BOUNDING_BOX[0];
            TSG.Point workpointend_1 = ASSEMBLY_BOUNDING_BOX[1];
            Type[] type_for_dim = new Type[] { typeof(TSD.StraightDimension), typeof(TSD.StraightDimensionSet), typeof(TSD.AngleDimension) };
            List<DIMENSION_WITH_DIFFERNCE> MYDIM_WITH_DIFFER = new List<DIMENSION_WITH_DIFFERNCE>();
            List<DIMENSION_WITH_DIFFERNCE> MYDIM_WITH_DIFFER_ORIGINAL = new List<DIMENSION_WITH_DIFFERNCE>();
            //////////////////Enumerating different views/////////////////////////////
            while (enum_for_drg_views_del.MoveNext())
            {


                TSD.View current_view = enum_for_drg_views_del.Current as TSD.View;

                TSD.DrawingObjectEnumerator dim_drg = current_view.GetAllObjects(type_for_dim);
                # region front_view_dimension_delete

                /////////Retaining front view assembly dimensions and deleting rest of the dimensions/////////////////
                /////////////////////////Comparing the straight dimensions with the actual assembly length////////////////
               
                

                while (dim_drg.MoveNext())
                {
                    var dim_del = dim_drg.Current;
                    if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                    {

                        TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.DisplayCoordinateSystem);
                        TSG.Point workpointst2 = toviewmatrix.Transform(workpointst_1);

                        TSG.Point workpointend2 = toviewmatrix.Transform(workpointend_1);




                       

                        if (dim_del.GetType().Equals(typeof(TSD.StraightDimension)))
                        {
                            TSD.StraightDimension DIM = dim_del as TSD.StraightDimension;
                            double X = DIM.StartPoint.X;
                            double X1 = DIM.EndPoint.X;
                            double DIFFERENCE = X1 - X;
                            TSG.Vector MYVECTOR = DIM.UpDirection;
                        
                            MYDIM_WITH_DIFFER.Add(new DIMENSION_WITH_DIFFERNCE { MTDIM = DIM, DIFFER = DIFFERENCE, MYVECTOR = MYVECTOR });
                            MYDIM_WITH_DIFFER_ORIGINAL.Add(new DIMENSION_WITH_DIFFERNCE { MTDIM = DIM, DIFFER = DIFFERENCE, MYVECTOR = MYVECTOR });

                            
                        }
                        else if (dim_del.GetType().Equals(typeof(TSD.StraightDimensionSet)))
                        {
                            TSD.StraightDimensionSet RD = dim_del as TSD.StraightDimensionSet;
                         
                            if (RD.Attributes.DimensionType == TSD.DimensionSetBaseAttributes.DimensionTypes.Elevation)
                            {
                                dim_del.Delete();
                            }
                            else
                            {
                                
                            }
                        }
                        else if (dim_del.GetType().Equals(typeof(TSD.AngleDimension)))
                        {
                            dim_del.Delete();
                        }
                        else
                        {
                            dim_del.Delete();
                        }

                    }
                    else if (current_view.ViewType.Equals(TSD.View.ViewTypes.TopView))
                    {
                        if (dim_del.GetType().Equals(typeof(TSD.AngleDimension)))
                        {
                            //dim_del.Delete();
                           
                        }
                        else
                        {
                            dim_del.Delete();
                        }
                    }
                    else
                    {
                        dim_del.Delete();
                    }

                }


                # endregion
              

                 MYDIM_WITH_DIFFER.RemoveAll(X => X.MYVECTOR.Y > 0);

           List<DIMENSION_WITH_DIFFERNCE> OVERALL_DIM =      MYDIM_WITH_DIFFER.Where((X =>( X.DIFFER.Equals(MYDIM_WITH_DIFFER.Max(Y => Y.DIFFER)))   )).ToList();
                
         //List<DIMENSION_WITH_DIFFERNCE> IO =        MYDIM_WITH_DIFFER.Where(X =>! X.DIFFER.Equals(MYDIM_WITH_DIFFER.Max(Y => Y.DIFFER))).ToList();
           List<DIMENSION_WITH_DIFFERNCE> IO = MYDIM_WITH_DIFFER_ORIGINAL.Where(X => !X.DIFFER.Equals(OVERALL_DIM[0].DIFFER)).ToList();
         if (chkknockoffdim.Checked == true)
         {
             IO.RemoveAll(X => KNOCKOFF_DIM(X.MTDIM) == true);
         }
         else
         { 
         }
         foreach (var MYDIM in IO)
         {
            
             MYDIM.MTDIM.Delete();
                      
         }
         foreach (var MYDIM in OVERALL_DIM)
         {
             OVERALL_DIMENSION = MYDIM.MTDIM;
         }
            }
            enum_for_drg_views_del.Reset();
            Type[] radius_dim = new Type[] { typeof(TSD.RadiusDimension) };
            while (enum_for_drg_views_del.MoveNext())
            {
                TSD.View current_view = enum_for_drg_views_del.Current as TSD.View;
                TSD.DrawingObjectEnumerator dim_drg = current_view.GetAllObjects(radius_dim);
                while (dim_drg.MoveNext())
                {
                    var dim_del = dim_drg.Current;
                    if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                    {
                        if (dim_del.GetType().Equals(typeof(TSD.RadiusDimension)))
                        {
                            TSD.RadiusDimension dimension = dim_del as TSD.RadiusDimension;
                            list_of_radius_dim.Add(dimension);
                        }
                    }
                }
            }
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(main_part.GetCoordinateSystem()));
            ArrayList list_of = new ArrayList();
            TSD.DrawingObjectEnumerator part_enum_for_section = ASSEMBLY_DRAWING.GetSheet().GetAllViews();
            while (part_enum_for_section.MoveNext())
            {
                TSD.View current_view = part_enum_for_section.Current as TSD.View;
                if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                {
                    TSD.DrawingObjectEnumerator mypart_en = current_view.GetAllObjects(typeof(TSD.Part));
                    while (mypart_en.MoveNext())
                    {
                        TSD.Part mypart = mypart_en.Current as TSD.Part;

                        TSM.ModelObject mymodel_obj = new TSM.Model().SelectModelObject(mypart.ModelIdentifier);
                        TSM.Part mypart_for_sect = mymodel_obj as TSM.Part;
                        if (!mypart_for_sect.Identifier.ID.Equals(main_part.Identifier.ID))
                        {
                            if(mypart_for_sect.Name.Contains("FALLTECH")==false)
                            {
                                list_of.Add(mypart_for_sect);
                            }
                        }
                    }
                }
            }


            ArrayList list_of_obj = new ArrayList();
            foreach (TSM.Part mypl in list_of)
            {

                TSD.PointList ptlist = bounding_box_sort_x(mypl, main_part as TSM.Beam);
                double distance = Convert.ToInt16(ptlist[0].Z) + Convert.ToInt16(ptlist[1].Z);
                TSG.Matrix TO_VIEW_MATRIX = TSG.MatrixFactory.ToCoordinateSystem(main_part.GetCoordinateSystem());
                TSG.Point P1 = TO_VIEW_MATRIX.Transform((main_part as TSM.Beam).StartPoint);
                TSG.Point P2 = TO_VIEW_MATRIX.Transform((main_part as TSM.Beam).EndPoint);

                if (distance != 0)
                {
                    list_of_obj.Add(mypl);
                }

                else if (distance == 0)
                {
                    double plt_condition_start = (P1.X + 200);
                    double plt_condition_end = (P2.X - 200);

                    if ((ptlist[1].X) < (plt_condition_start))
                    {
                        list_of_obj.Add(mypl);

                        string s = "";
                        mypl.GetReportProperty("PROFILE_TYPE", ref s);
                        

                            string name = "(CTRD)";
                            mypl.SetUserProperty("USERDEFINED.NOTES7", name);
                        
                    }
                    else if ((ptlist[0].X) > Convert.ToInt32(plt_condition_end))
                    {
                        list_of_obj.Add(mypl);
                        string s = "";
                        mypl.GetReportProperty("PROFILE_TYPE", ref s);
                       

                            string name = "(CTRD)";
                            mypl.SetUserProperty("USERDEFINED.NOTES7", name);
                        
                    }
                    else
                    {
                        list_of_obj.Add(mypl);
                        string s = "";
                        mypl.GetReportProperty("PROFILE_TYPE", ref s);
                        string name = "(CTRD)";
                        mypl.SetUserProperty("USERDEFINED.NOTES7", name);
                        
                    }
                }

            }

            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            ArrayList mainpart_values = Getcatalog_values(main_part);

            ArrayList MAINPART_PROFILE_VALUES = Getcatalog_values(main_part);
            double heighttt = Convert.ToDouble(MAINPART_PROFILE_VALUES[0]);
            double heightpos_neg = heighttt / 2;
            TSD.View currentview = enum_for_drg_views_del.Current as TSD.View;
            TSD.DrawingObjectEnumerator enum_for_drg_views_del1 = ASSEMBLY_DRAWING.GetSheet().GetAllViews();
            List<List<int>> MYLIST = new List<List<int>>();
            List<req_pts> mypoints1 = new List<req_pts>();
            List<req_pts> mypoints1_duplicate = new List<req_pts>();
            List<req_pts> mypoints_duplicate_for_dimension = new List<req_pts>();
            List<int> list_ide = new List<int>();

            //int while_start = Environment.TickCount;
            while (enum_for_drg_views_del1.MoveNext())
            {


                TSD.View current_view = enum_for_drg_views_del1.Current as TSD.View;
                if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                {

                    ArrayList list_of_x = new ArrayList();
                    List<req_pts> mypoints = new List<req_pts>();
                    ArrayList list_of_points = new ArrayList();
                    foreach (TSM.Part myplaye in list_of_obj)
                    {
                        TSD.PointList ptlist = bounding_box_sort_x(myplaye, main_part as TSM.Beam);


                        TSD.PointList m1 = converted_points(ptlist, main_part as TSM.Beam, current_view);

                       
                        if (((ptlist[0].Y > -heightpos_neg) && (ptlist[1].Y < heightpos_neg)) || ((ptlist[0].Y < -heightpos_neg) && (ptlist[1].Y > heightpos_neg)))
                        {

                            double distanceofx = ((m1[0].X + m1[1].X) / 2);
                            double distanceofy = ((m1[0].Y + m1[1].Y) / 2);
                            double distanceofZ = ((m1[0].Z + m1[1].Z) / 2);


                            TSM.Part mypart = myplaye;
                            string PARTMARK = get_report_properties(myplaye, "PART_POS");
                            mypoints.Add(new req_pts() { distance = distanceofx, list_of_points = m1, distance_for_y = distanceofy, part = mypart, PART_MARK = PARTMARK, distance_for_Z = distanceofZ });
                            mypoints_duplicate_for_dimension.Add(new req_pts() { distance = distanceofx, list_of_points = m1, distance_for_y = distanceofy, part = mypart, PART_MARK = PARTMARK, distance_for_Z = distanceofZ });
                            if (((Convert.ToInt64(m1[0].X) < 0) || (Convert.ToInt64(m1[1].X) < 0)) || ((Convert.ToInt64(m1[0].X) > output) || (Convert.ToInt64(m1[1].X) > output)))
                            {
                                list_of_guid_in_top_view_to_delete.Add(mypart.Identifier.GUID);
                            }

                        }
                        else
                        {
                            double distanceofx = ((m1[0].X + m1[1].X) / 2);
                            double distanceofy = ((m1[0].Y + m1[1].Y) / 2);
                            double distanceofZ = ((m1[0].Z + m1[1].Z) / 2);


                            TSM.Part mypart = myplaye;
                            string PARTMARK = get_report_properties(myplaye, "PART_POS");
                            list_ide.Add(mypart.Identifier.ID);
                            mypoints1.Add(new req_pts() { distance = distanceofx, list_of_points = m1, distance_for_y = distanceofy, part = mypart, PART_MARK = PARTMARK, distance_for_Z = distanceofZ });
                            mypoints1_duplicate.Add(new req_pts() { distance = distanceofx, list_of_points = m1, distance_for_y = distanceofy, part = mypart, PART_MARK = PARTMARK, distance_for_Z = distanceofZ });

                            mypoints_duplicate_for_dimension.Add(new req_pts() { distance = distanceofx, list_of_points = m1, distance_for_y = distanceofy, part = mypart, PART_MARK = PARTMARK, distance_for_Z = distanceofZ });
                            if ((Convert.ToInt64(ptlist[0].Y) <= -Convert.ToInt64(heightpos_neg)) && (Convert.ToInt64(ptlist[1].Y) <= -Convert.ToInt64(heightpos_neg)))
                            {
                                list_of_parts_for_bottom_part_mark_retain.Add(mypart);
                            }

                            //(((Convert.ToInt64(m1[0].Y) < -heightpos_neg)&&(Convert.ToInt64(m1[0].Y) < 0))&&((Convert.ToInt64(m1[1].Y) < -heightpos_neg)&&(Convert.ToInt64(m1[1].Y) < 0)))
                            if (((Convert.ToInt64(m1[0].X) < 0) || (Convert.ToInt64(m1[1].X) < 0)) || ((Convert.ToInt64(m1[0].X) > output) || (Convert.ToInt64(m1[1].X) > output)))
                            {
                                list_of_guid_in_top_view_to_delete.Add(mypart.Identifier.GUID);
                            }


                        }
                    }

                    if (mypoints1.Count > 0)
                    {
                        double change_min = Math.Abs(current_view.RestrictionBox.MinPoint.Y);
                        double change_max = Math.Abs(current_view.RestrictionBox.MaxPoint.Y);
                        if (Convert.ToInt64(change_min) > Convert.ToInt64(change_max))
                        {
                            current_view.RestrictionBox.MaxPoint.Y = change_min;
                            current_view.Modify();

                        }
                        else
                        {
                            current_view.RestrictionBox.MinPoint.Y = -change_max;
                            current_view.Modify();

                        }
                    }
                    else
                    {

                        double change_min = Math.Abs(current_view.RestrictionBox.MinPoint.Y);
                        double change_max = Math.Abs(current_view.RestrictionBox.MaxPoint.Y);

                        current_view.RestrictionBox.MaxPoint.Y = change_max + 65;



                        current_view.RestrictionBox.MinPoint.Y = -change_min - 65;
                        current_view.Modify();



                    }


                    mypoints = mypoints.OrderBy(x => x.distance).ToList();



                    List<req_pts> final_distance = new List<req_pts>();

                    for (int i = 0; i < mypoints.Count; i++)
                    {

                        if (i == Convert.ToInt16(mypoints.Count - 1))
                        {
                            final_distance.Add(mypoints[i]);

                        }
                        else
                        {
                            double ditsnace = (Convert.ToInt16(mypoints[i + 1].distance) - Convert.ToInt16(mypoints[i].distance));
                            //if (ditsnace > 25)
                            if (ditsnace > 125)
                            {
                                final_distance.Add(mypoints[i]);

                            }

                            else
                            {
                                if (mypoints[i].distance != mypoints[i + 1].distance)
                                {
                                    if (mypoints[i].distance_for_y > mypoints[i + 1].distance_for_y)
                                    {
                                        final_distance.Add(mypoints[i]);
                                    }
                                    else
                                    {
                                        final_distance.Add(mypoints[i + 1]);
                                        //final_distance.Add(mypoints[i ]);
                                    }
                                }
                            }
                        }
                    }
                    //for (int i = 0; i < mypoints1.Count; i++)
                    //{

                    //    if (i == Convert.ToInt16(mypoints1.Count - 1))
                    //    {
                    //        final_distance.Add(mypoints1[i]);

                    //    }
                    //    else
                    //    {
                    //        double ditsnace = (Convert.ToInt16(mypoints1[i + 1].distance) - Convert.ToInt16(mypoints1[i].distance));
                    //        //if (ditsnace > 25)
                    //        if (ditsnace > 125)
                    //        {
                    //            final_distance.Add(mypoints1[i]);

                    //        }

                    //        else
                    //        {
                    //            if (mypoints1[i].distance != mypoints1[i + 1].distance)
                    //            {
                    //                if (mypoints1[i].distance_for_y > mypoints1[i + 1].distance_for_y)
                    //                {
                    //                    final_distance.Add(mypoints1[i]);
                    //                }
                    //                else
                    //                {
                    //                    final_distance.Add(mypoints1[i + 1]);
                    //                    //final_distance.Add(mypoints[i ]);
                    //                }
                    //            }
                    //        }
                    //    }
                    //}
                    TSM.Part main = main_part;

                    List<double> final_distance_UNIQUE = new List<double>();


                    section_loc_with_parts obj1 = new section_loc_with_parts();
                    List<TSM.Part> list1 = new List<TSM.Part>();

                    
                    for (int i = 0; i < mypoints.Count; i++)
                    {

                        if (i == Convert.ToInt16(mypoints.Count - 1))
                        {
                            final_distance_UNIQUE.Add(mypoints[i].distance);
                            list1.Add(mypoints[i].part);
                            list2.Add(new section_loc_with_parts() { partlist = list1, distance = mypoints[i].distance });

                        }
                        else
                        {
                            double ditsnace = (Convert.ToInt16(mypoints[i + 1].distance) - Convert.ToInt16(mypoints[i].distance));
                            //if (ditsnace > 25)
                            if (ditsnace > 125)
                            {

                                list1.Add(mypoints[i].part);
                                list2.Add(new section_loc_with_parts() { partlist = list1, distance = mypoints[i].distance });
                                list1 = new List<TSM.Part>();
                            }

                            else
                            {
                                list1.Add(mypoints[i].part);

                            }
                        }
                    }


                    //for (int i = 0; i < mypoints1.Count; i++)
                    //{

                    //    if (i == Convert.ToInt16(mypoints1.Count - 1))
                    //    {
                    //        final_distance_UNIQUE.Add(mypoints1[i].distance);
                    //        list1.Add(mypoints1[i].part);
                    //        list2.Add(new section_loc_with_parts() { partlist = list1, distance = mypoints1[i].distance });

                    //    }
                    //    else
                    //    {
                    //        double ditsnace = (Convert.ToInt16(mypoints1[i + 1].distance) - Convert.ToInt16(mypoints1[i].distance));
                    //        //if (ditsnace > 25)
                    //        if (ditsnace > 125)
                    //        {

                    //            list1.Add(mypoints1[i].part);
                    //            list2.Add(new section_loc_with_parts() { partlist = list1, distance = mypoints1[i].distance });
                    //            list1 = new List<TSM.Part>();
                    //        }

                    //        else
                    //        {
                    //            list1.Add(mypoints1[i].part);

                    //        }
                    //    }
                    //}



                    List<TSM.Part> final_list = new List<TSM.Part>();
                    List<section_loc_with_parts> f1 = new List<section_loc_with_parts>();
                    List<section_loc_with_parts> f2 = new List<section_loc_with_parts>();


                    List<section_loc_with_parts> FINAL = list2.GroupBy(X => X.partlist.Count).Select(Y => Y.FirstOrDefault()).ToList();
                    List<string> final_check_for_unique = new List<string>();
                    for (int i = list2.Count - 1; i >= 0; i--)
                    {
                        if (i == 0)
                        {
                            list2[i].sectionview_needed = "YES";
                        }
                        else
                        {

                            List<string> check_for_unique = new List<string>();
                            for (int j = i - 1; j >= 0; j--)
                            {


                                var first_loop = list2[i].partlist;
                                var second_loop = list2[j].partlist;

                                if (!(first_loop.Count == second_loop.Count))
                                {
                                    check_for_unique.Add("UNIQUE");

                                }
                                else
                                {
                                    bool result = FUNCTION_FOR_COMPARING_PARTMARKS_AND_ORIENTATION(first_loop, second_loop, main_part as TSM.Beam);

                                    if (result == true)
                                    {

                                        check_for_unique.Add("SAME");
                                    }
                                    else
                                    {
                                        check_for_unique.Add("UNIQUE");
                                    }

                                }
                            }

                            if (!check_for_unique.Contains("SAME"))
                            {
                                list2[i].sectionview_needed = "YES";
                            }
                            else
                            {
                                list2[i].sectionview_needed = "NO";
                                int check = check_for_unique.LastIndexOf("SAME");
                                int check2 = check_for_unique.Count - (check + 1);
                                list2[i].index_of_same_sec = check2;
                            }

                        }
                    }





                    list2 = list2.OrderBy(x => x.distance).ToList();
                    List<section_loc_with_parts> section = new List<section_loc_with_parts>();
                    List<TSD.SectionMark> sectionmarklist = new List<TSD.SectionMark>();

                    for (int i = 0; i < list2.Count; i++)
                    {
                        if ((list2[i].sectionview_needed == "YES"))
                        {
                            //if (list2[i].partlist.Count > 1)
                            //{
                            //    List<TSM.Beam> list_of_angles = new List<TSM.Beam>();


                            //}
                            double minx = 0;
                            double maxx = 0;
                            double mny = 0;
                            double mxy = 0;

                            minx = list2[i].partlist.Min(x => bounding_box_sort_x(x, current_view)[0].X);
                            maxx = list2[i].partlist.Max(x => bounding_box_sort_x(x, current_view)[1].X);
                            mny = list2[i].partlist.Min(x => bounding_box_sort_x(x, current_view)[0].Y);
                            mxy = list2[i].partlist.Max(x => bounding_box_sort_x(x, current_view)[1].Y);

                            double miny = Convert.ToInt64(mny);
                            double maxy = Convert.ToInt64(mxy);

                            double distanceofx = ((minx + maxx) / 2);
                            double DISTANCE_TO_COMPARE = Math.Abs((minx - maxx));


                            double distance_of_y = ((miny + maxy) / 2);
                            double height = Convert.ToDouble(mainpart_values[0]);
                            double height_for_view = 0;
                            double height_for_view1 = 0;

                            double POSIH = Convert.ToInt64(height / 2);
                            double NEGAH = -Convert.ToInt64(height / 2);



                            if ((maxy <= POSIH) && (miny >= NEGAH))
                            {
                                height_for_view = -((height / 2));
                                height_for_view1 = (height / 2);
                            }
                            else if ((maxy >= POSIH) && (miny >= POSIH))
                            {
                                height_for_view = (height / 2);
                                height_for_view1 = maxy;

                            }
                            else if ((maxy <= NEGAH) && (miny <= NEGAH))
                            {
                                height_for_view = miny;
                                height_for_view1 = (height / 2);

                            }
                            else if ((maxy >= POSIH) && (miny >= NEGAH))
                            {
                                height_for_view = -((height / 2));
                                height_for_view1 = maxy;
                            }

                            else if ((maxy <= POSIH) && (miny <= NEGAH))
                            {
                                height_for_view = miny;
                                height_for_view1 = (height / 2);
                            }
                            else if ((maxy >= POSIH) && (miny <= NEGAH))
                            {
                                height_for_view = miny;
                                height_for_view1 = maxy;
                            }




                            TSD.View bottom_view = null;
                            TSD.SectionMark sec = null;
                            double distancefor_depthup = 0;
                            double distancefor_depthdown = 0;
                            if (DISTANCE_TO_COMPARE < 300)
                            {
                                distancefor_depthup = Math.Abs(minx - distanceofx);
                                distancefor_depthdown = Math.Abs(maxx - distanceofx);
                            }
                            else if (DISTANCE_TO_COMPARE > 300)
                            {
                                distancefor_depthup = 0;
                                distancefor_depthdown = 0;

                            }

                            //if (height_for_view > 0)
                            //{



                            //    height_for_view = height_for_view + 25.4;

                            //}


                            //else
                            //{
                            //    height_for_view = height_for_view - 25.4;
                            //}

                            //if (height_for_view1 > 0)
                            //{
                            //    if (height_for_view1 > POSIH )
                            //    {
                            //        height_for_view1 = height_for_view1;

                            //    }
                            //    else
                            //    {
                            //        height_for_view1 = height_for_view1 + 25.4;
                            //    }
                            //}
                            //else
                            //{
                            //    height_for_view1 = height_for_view1 - 25.4;
                            //}

                            //TSG.Point P1 = new TSG.Point(distanceofx, height_for_view - 1, 0);
                            //TSG.Point P2 = new TSG.Point(distanceofx, height_for_view1 + 1, 0);
                            height_for_view = current_view.RestrictionBox.MaxPoint.Y;
                            height_for_view1 = current_view.RestrictionBox.MinPoint.Y;
                            TSG.Point P1 = new TSG.Point(distanceofx, height_for_view, 0);
                            TSG.Point P2 = new TSG.Point(distanceofx, height_for_view1, 0);
                            double dep_up = maxx - distanceofx;
                            double dep_down = distanceofx - minx;
                            if (dep_up > 100)
                            {
                                dep_up = 5;
                            }
                            else
                            {
                            }
                            if (dep_down > 100)
                            {
                                dep_down = 5;
                            }
                            else
                            {
                            }


                            try
                            {
                                if (drg_attribute == "SK_BEAM_A1")
                                {
                                    bool result = TSD.View.CreateSectionView(current_view, P2, P1, new TSG.Point(current_view.ExtremaCenter.X, 0, 0), Convert.ToInt64(dep_up) + 100, Convert.ToInt64(dep_down) + 100,new TSD.View.ViewAttributes("SK_BEAM_A1"), new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                                    bottom_view.Modify();
                                }
                                else
                                {
                                    bool result = TSD.View.CreateSectionView(current_view, P2, P1, new TSG.Point(current_view.ExtremaCenter.X, 0, 0), Convert.ToInt64(dep_up) + 100, Convert.ToInt64(dep_down) + 100, new TSD.View.ViewAttributes("SK_BEAM_A1"), new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                                    bottom_view.Modify();

                                }

                                //bool result = TSD.View.CreateSectionView(current_view, P2, P1, new TSG.Point(current_view.ExtremaCenter.X, 0, 0), Convert.ToInt64(dep_up) + 100, Convert.ToInt64(dep_down) + 100, current_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("ESSKAYBEAM"), out bottom_view, out sec);
                              

                                //bool result = TSD.View.CreateSectionView(current_view, P2, P1, new TSG.Point(current_view.ExtremaCenter.X, 0, 0), Convert.ToInt64(dep_up) + 100, Convert.ToInt64(dep_down) + 100, current_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);
                                
                                double change_min = Math.Abs(bottom_view.RestrictionBox.MinPoint.X);
                                double change_max = Math.Abs(bottom_view.RestrictionBox.MaxPoint.X);
                                if (Convert.ToInt64(change_min) > Convert.ToInt64(change_max))
                                {
                                    bottom_view.RestrictionBox.MaxPoint.X = change_min;
                                    bottom_view.Modify();

                                }
                                else
                                {
                                    bottom_view.RestrictionBox.MinPoint.X = -change_max;
                                    bottom_view.Modify();

                                }


                                bottom_view.Attributes.LabelPositionHorizontal = TSD.View.HorizontalLabelPosition.CenteredByViewRestrictionBox;
                                bottom_view.Modify();


                                TSD.FontAttributes FONT = new TSD.FontAttributes();
                                FONT.Color = TSD.DrawingColors.Magenta;
                                FONT.Height = Convert.ToInt16(3.96875);




                                //TSD.PropertyElement VIEW_LABEL = new TSD.PropertyElement(TSD.PropertyElement.PropertyElementType.ViewLabelMarkPropertyElementTypes.ViewName);

                                TSD.PropertyElement.PropertyElementType VIEW_LABEL = TSD.PropertyElement.PropertyElementType.ViewLabelMarkPropertyElementTypes.ViewName();
                                TSD.PropertyElement X = new TSD.PropertyElement(VIEW_LABEL);
                                X.Font.Color = TSD.DrawingColors.Magenta;
                                X.Font.Height = Convert.ToInt64(3.96875);

                                //TSD.TextElement textelement2 = new TSD.TextElement(sec.Attributes.MarkName, FONT);
                                TSD.TextElement textelement3 = new TSD.TextElement("-", FONT);
                                //TSD.ContainerElement sectionmark = new TSD.ContainerElement { textelement2, textelement3, textelement2 };

                                TSD.ContainerElement sectionmark = new TSD.ContainerElement { X, textelement3, X };


                                //sec.Attributes.TagsAttributes



                                sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                                sec.Attributes.TagsAttributes.TagA1 = new TSD.SectionMarkBase.SectionMarkTagAttributes(TSD.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides, TSD.TagLocation.AboveLine, new TSG.Vector(1, 0, 0), TSD.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal, new TSD.ContainerElement { X });

                                bottom_view.Attributes.TagsAttributes.TagA1 = new TSD.View.ViewMarkTagAttributes(new TSG.Vector(0, 0, 0), TSD.TagLocation.AboveLine, TSD.TextAlignment.Center, sectionmark);

                                bottom_view.Attributes.LabelPositionVertical = TSD.View.VerticalLabelPosition.Bottom;

                                bottom_view.Attributes.MarkSymbolColor = TSD.DrawingColors.Magenta;
                                sec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;
                                sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                                bottom_view.Attributes.Scale.Equals(current_view.Attributes.Scale);

                                bottom_view.Modify();
                                //  sec.Modify();
                                list2[i].myview = bottom_view;
                                sectionmarklist.Add(sec);
                                TSD.DrawingObjectEnumerator BOTTOM = bottom_view.GetAllObjects(typeof(TSD.Part));
                                List<int> list_req = new List<int>();
                                List<TSM.Part> mypart_list_for_section = new List<TSM.Part>();
                                while (BOTTOM.MoveNext())
                                {
                                    TSD.Part MYDRG_PART = BOTTOM.Current as TSD.Part;
                                    TSM.ModelObject MMODEL = new TSM.Model().SelectModelObject(MYDRG_PART.ModelIdentifier);
                                    TSD.PointList bounding_box_z = bounding_box_sort_z(MMODEL, bottom_view);

                                    if ((Convert.ToInt64(bounding_box_z[1].Z) >= Convert.ToInt64(bottom_view.RestrictionBox.MinPoint.Z)) && (Convert.ToInt64(bounding_box_z[0].Z) <= Convert.ToInt64(bottom_view.RestrictionBox.MaxPoint.Z)))
                                    {
                                        TSM.Part mmpart = MMODEL as TSM.Part;
                                        if (!mmpart.Identifier.ID.Equals(main_part.Identifier.ID))
                                        {
                                            list_req.Add(mmpart.Identifier.ID);
                                            //try
                                            //{
                                            //list2[i].req_partlist.Add(mmpart);
                                            mypart_list_for_section.Add(mmpart);

                                            //}
                                            //catch
                                            //{
                                            //}
                                            //MYLIST.Add(mmpart.Identifier.ID);
                                        }

                                    }


                                }
                                list2[i].req_partlist = mypart_list_for_section;
                                MYLIST.Add(list_req);
                            }
                            catch
                            {
                            }

                        }

                        else
                        {

                            TSD.SectionMark sec_dummy = null;
                            sectionmarklist.Add(sec_dummy);
                            TSD.SectionMark mysec = sectionmarklist[list2[i].index_of_same_sec];

                            mysec.LeftPoint.X = list2[i].distance;
                            mysec.RightPoint.X = list2[i].distance;
                            mysec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                            mysec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;






                            mysec.Insert();

                        }






                    }



                }
                ASSEMBLY_DRAWING.PlaceViews();





            }
            //int end_while = Environment.TickCount;
            //Console.WriteLine("Time elapsed for outer while ---> " + (end_while-while_start));

            TSD.DrawingObjectEnumerator enum_for_flange_sect = ASSEMBLY_DRAWING.GetSheet().GetAllViews();
            while (enum_for_flange_sect.MoveNext())
            {


                TSD.View current_view = enum_for_flange_sect.Current as TSD.View;
                if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                {
                    List<List<int>> final_result = new List<List<int>>();
                    foreach (List<int> myllist in MYLIST)
                    {

                        List<int> dup_list = myllist.Intersect(list_ide).ToList();
                        final_result.Add(dup_list);



                    }


                    foreach (List<int> section_list in final_result)
                    {
                        for (int p = 0; p < mypoints1.Count; p++)
                        {
                            bool result = section_list.Any(x => x.Equals(mypoints1[p].part.Identifier.ID));
                            if (result == true)
                            {
                                mypoints1_duplicate.RemoveAll(x => x.part.Identifier.ID.Equals(mypoints1[p].part.Identifier.ID));
                            }
                        }

                    }
                    if (mypoints1_duplicate.Count > 0)
                    {



                        SEC_VIEW_COMPARE(mypoints1_duplicate, current_view, main_part, MYLIST, ASSEMBLY_DRAWING, out list_for_flange_section,drg_attribute);

                    }

                    else
                    {
                        list_for_flange_section = new List<section_loc_with_parts>();


                    }
                }
            }











            ASSEMBLY_DRAWING.CommitChanges();
        }
        public void Drawing_create_and_delete_all_dimensions_except_assembly_dim_sheet_check(TSM.Model mymodel, TSM.ModelObject enum_for_picked_assemblies, List<string> drg_attribute, out TSD.AssemblyDrawing ASSEMBLY_DRAWING, out TSM.Part main_part, out double output, out TSM.Assembly ASSEMBLY, out TSD.StraightDimension overall_dim, out double DIM_DISTANCE, out double ACTUAL_DIS, out List<section_loc_with_parts> list2, out List<req_attribute> qwerty)
        {
            /////////////Drawing creation and insert//////////////////////////////////////////////


            TSD.DrawingHandler drg_handler = new TSD.DrawingHandler();
            ASSEMBLY_DRAWING = null;
            ASSEMBLY = null;
            main_part = null;
            DIM_DISTANCE = 0;
            ACTUAL_DIS = 0;
            output = 0;
            overall_dim = null;
            ASSEMBLY = enum_for_picked_assemblies as TSM.Assembly;
            qwerty = new List<req_attribute>();

            string RESULT = "";



            main_part = (ASSEMBLY.GetMainPart()) as TSM.Beam;

            list2 = new List<section_loc_with_parts>();



            //////////////////////////////Getting workpoints of assembly from bounding box/////////////////////
            output = 0;
            main_part.GetReportProperty("LENGTH", ref output);

            foreach (string drg_att in drg_attribute)
            {


                ASSEMBLY_DRAWING = new TSD.AssemblyDrawing(ASSEMBLY.Identifier, drg_att);

                ASSEMBLY_DRAWING.Insert();
                drg_handler.SetActiveDrawing(ASSEMBLY_DRAWING, true);
                double sheet_height = ASSEMBLY_DRAWING.GetSheet().Height;
                double sheet_width = ASSEMBLY_DRAWING.GetSheet().Width;

                TSD.DrawingObjectEnumerator enum_for_drg_views_del = ASSEMBLY_DRAWING.GetSheet().GetAllViews();
                //mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(main_part.GetCoordinateSystem()));


                ArrayList list_of = ASSEMBLY.GetSecondaries();
                TSD.DrawingObjectEnumerator enum_for_drg_views_dell = ASSEMBLY_DRAWING.GetSheet().GetAllViews();
                while (enum_for_drg_views_dell.MoveNext())
                {


                    TSD.View current_view = enum_for_drg_views_dell.Current as TSD.View;
                    double SCALE;
                    double MINIMUM_LENGTH;

                    if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                    {
                        SCALE = current_view.Attributes.Scale;
                        MINIMUM_LENGTH = current_view.Attributes.Shortening.MinimumLength;

                        TSG.CoordinateSystem sheet_coord = new TSG.CoordinateSystem();
                        sheet_coord.Origin = ASSEMBLY_DRAWING.GetSheet().ExtremaCenter;
                        sheet_coord.AxisX = new TSG.Vector(1, 0, 0);
                        sheet_coord.AxisY = new TSG.Vector(0, 1, 0);

                        TSG.Matrix nm = TSG.MatrixFactory.ToCoordinateSystem(sheet_coord);


                        TSG.Point from_sheet_to_view_blue_box_min = nm.Transform(current_view.Origin);
                        double height = 0;
                        double width = 0;
                        height = current_view.Height;
                        width = current_view.Width;



                        TSG.Point frame_origin = current_view.FrameOrigin;

                        double dsist = TSG.Distance.PointToPoint(from_sheet_to_view_blue_box_min, frame_origin);

                        TSG.Point sub_di = from_sheet_to_view_blue_box_min;


                        //TSG.Point from_sheet_to_view_blue_box_max = new TSG.Point(sub_di.X + width, sub_di.Y + height, 0);
                        TSG.Point from_sheet_to_view_blue_box_max = new TSG.Point(width, height, 0);
                        //TSD.LayoutAttributes opt = new TSD.LayoutAttributes();

                        //TSD.Size sheet_size =


                        if ((from_sheet_to_view_blue_box_min.X > 0) && (from_sheet_to_view_blue_box_min.Y > 0) && (from_sheet_to_view_blue_box_max.X < sheet_width) && (from_sheet_to_view_blue_box_max.Y < sheet_height))
                        {
                            RESULT = "true";
                            qwerty.Add(new req_attribute { attribute = drg_att, req_att = RESULT, scale_req = SCALE, min_length_req = MINIMUM_LENGTH });


                        }
                        else
                        {
                            RESULT = "false";
                            qwerty.Add(new req_attribute { attribute = drg_att, req_att = RESULT, scale_req = SCALE, min_length_req = MINIMUM_LENGTH });

                        }

                        drg_handler.SaveActiveDrawing();
                        drg_handler.CloseActiveDrawing(true);
                        ASSEMBLY_DRAWING.Delete();
                    }
                }





            }




        }

        public TSD.PointList bounding_box(TSM.ModelObject mymodel_object)
        {
            TSD.PointList bounding_box_pts = new TSD.PointList();
            //TSM.ModelObject assembly_for_check = mymodel_object;
            ////////////////////////////////////////////////assembly bounding box logic//////////////////////////////////////////////////////////////////
            //double x1 = 0, y1 = 0, z1 = 0, x2 = 0, y2 = 0, z2 = 0;
            //assembly_for_check.GetReportProperty("BOUNDING_BOX_MIN_X", ref x1);
            //assembly_for_check.GetReportProperty("BOUNDING_BOX_MIN_Y", ref y1);
            //assembly_for_check.GetReportProperty("BOUNDING_BOX_MIN_Z", ref z1);
            //assembly_for_check.GetReportProperty("BOUNDING_BOX_MAX_X", ref x2);
            //assembly_for_check.GetReportProperty("BOUNDING_BOX_MAX_Y", ref y2);
            //assembly_for_check.GetReportProperty("BOUNDING_BOX_MAX_Z", ref z2);
            //TSG.Point workpointst_1 = new TSG.Point(x1, y1, z1);
            //TSG.Point workpointend_1 = new TSG.Point(x2, y2, z2);
            //bounding_box_pts.Add(workpointst_1);
            //bounding_box_pts.Add(workpointend_1);


            TSM.Model MYMODEL = new TSM.Model();
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            TSM.Solid MYSOLID = (mymodel_object as TSM.Part).GetSolid();
            TSG.Point MAXPT = MYSOLID.MaximumPoint;
            TSG.Point MINPT = MYSOLID.MinimumPoint;
            bounding_box_pts.Add(MAXPT);
            bounding_box_pts.Add(MINPT);
            return (bounding_box_pts);
        }
        public TSD.PointList bounding_box_FOR_DIM(TSM.ModelObject mymodel_object)
        {
            TSD.PointList bounding_box_pts = new TSD.PointList();
            TSM.ModelObject assembly_for_check = mymodel_object;
            //////////////////////////////////////////////assembly bounding box logic//////////////////////////////////////////////////////////////////
            double x1 = 0, y1 = 0, z1 = 0, x2 = 0, y2 = 0, z2 = 0;
            assembly_for_check.GetReportProperty("BOUNDING_BOX_MIN_X", ref x1);
            assembly_for_check.GetReportProperty("BOUNDING_BOX_MIN_Y", ref y1);
            assembly_for_check.GetReportProperty("BOUNDING_BOX_MIN_Z", ref z1);
            assembly_for_check.GetReportProperty("BOUNDING_BOX_MAX_X", ref x2);
            assembly_for_check.GetReportProperty("BOUNDING_BOX_MAX_Y", ref y2);
            assembly_for_check.GetReportProperty("BOUNDING_BOX_MAX_Z", ref z2);
            TSG.Point workpointst_1 = new TSG.Point(x1, y1, z1);
            TSG.Point workpointend_1 = new TSG.Point(x2+50, y2, z2);
            bounding_box_pts.Add(workpointst_1);
            bounding_box_pts.Add(workpointend_1);


            //TSM.Model MYMODEL = new TSM.Model();
            //MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            //TSM.Solid MYSOLID = (mymodel_object as TSM.Part).GetSolid();
            //TSG.Point MAXPT = MYSOLID.MaximumPoint;
            //TSG.Point MINPT = MYSOLID.MinimumPoint;
            //bounding_box_pts.Add(MAXPT);
            //bounding_box_pts.Add(MINPT);
            return (bounding_box_pts);
        }
        public TSD.PointList sorting_points_by_x_asc(ArrayList list_of_points, TSD.View currentview)
        {
            TSD.PointList boltpts = new TSD.PointList();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(currentview.ViewCoordinateSystem);
            foreach (TSG.Point pt in list_of_points)
            {
                boltpts.Add(toviewmatrix.Transform(pt));
            }
            for (int i = 0; i < boltpts.Count; i++)
            {
                for (int j = 0; j < boltpts.Count; j++)
                {
                    if ((boltpts[i] as TSG.Point).X < (boltpts[j] as TSG.Point).X)
                    {
                        TSG.Point temp_point = (boltpts[i] as TSG.Point);
                        boltpts[i] = boltpts[j];
                        boltpts[j] = temp_point;
                    }
                }
            }
            return boltpts;
        }

        public TSD.PointList sorting_points_by_x_des(ArrayList list_of_points, TSD.View currentview)
        {
            TSD.PointList boltpts = new TSD.PointList();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(currentview.ViewCoordinateSystem);
            foreach (TSG.Point pt in list_of_points)
            {
                boltpts.Add(toviewmatrix.Transform(pt));
            }
            for (int i = 0; i < boltpts.Count; i++)
            {
                for (int j = 0; j < boltpts.Count; j++)
                {
                    if ((boltpts[i] as TSG.Point).X > (boltpts[j] as TSG.Point).X)
                    {
                        TSG.Point temp_point = (boltpts[i] as TSG.Point);
                        boltpts[i] = boltpts[j];
                        boltpts[j] = temp_point;
                    }
                }
            }
            return boltpts;
        }

        public TSD.PointList sorting_points_by_x_des(TSD.PointList list_of_points, TSD.View currentview)
        {
            TSD.PointList boltpts = new TSD.PointList();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(currentview.ViewCoordinateSystem);
            foreach (TSG.Point pt in list_of_points)
            {
                boltpts.Add(toviewmatrix.Transform(pt));
            }
            for (int i = 0; i < boltpts.Count; i++)
            {
                for (int j = 0; j < boltpts.Count; j++)
                {
                    if ((boltpts[i] as TSG.Point).X > (boltpts[j] as TSG.Point).X)
                    {
                        TSG.Point temp_point = (boltpts[i] as TSG.Point);
                        boltpts[i] = boltpts[j];
                        boltpts[j] = temp_point;
                    }
                }
            }
            return boltpts;
        }

        public TSD.PointList sorting_points_by_y_asc(ArrayList list_of_points, TSD.View currentview)
        {
            TSD.PointList boltpts = new TSD.PointList();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(currentview.ViewCoordinateSystem);
            foreach (TSG.Point pt in list_of_points)
            {
                boltpts.Add(toviewmatrix.Transform(pt));
            }
            for (int i = 0; i < boltpts.Count; i++)
            {
                for (int j = 0; j < boltpts.Count; j++)
                {
                    if ((boltpts[i] as TSG.Point).Y < (boltpts[j] as TSG.Point).Y)
                    {
                        TSG.Point temp_point = (boltpts[i] as TSG.Point);
                        boltpts[i] = boltpts[j];
                        boltpts[j] = temp_point;
                    }
                }
            }
            return boltpts;
        }

        public TSD.PointList sorting_points_by_y_des(ArrayList list_of_points, TSD.View currentview)
        {
            TSD.PointList boltpts = new TSD.PointList();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(currentview.ViewCoordinateSystem);
            foreach (TSG.Point pt in list_of_points)
            {
                boltpts.Add(toviewmatrix.Transform(pt));
            }
            for (int i = 0; i < boltpts.Count; i++)
            {
                for (int j = 0; j < boltpts.Count; j++)
                {
                    if ((boltpts[i] as TSG.Point).Y > (boltpts[j] as TSG.Point).Y)
                    {
                        TSG.Point temp_point = (boltpts[i] as TSG.Point);
                        boltpts[i] = boltpts[j];
                        boltpts[j] = temp_point;
                    }
                }
            }
            return boltpts;
        }

        public TSD.PointList sorting_points_by_y_des(TSD.PointList list_of_points, TSD.View currentview)
        {
            TSD.PointList boltpts = new TSD.PointList();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(currentview.ViewCoordinateSystem);
            foreach (TSG.Point pt in list_of_points)
            {
                boltpts.Add(toviewmatrix.Transform(pt));
            }
            for (int i = 0; i < boltpts.Count; i++)
            {
                for (int j = 0; j < boltpts.Count; j++)
                {
                    if ((boltpts[i] as TSG.Point).Y > (boltpts[j] as TSG.Point).Y)
                    {
                        TSG.Point temp_point = (boltpts[i] as TSG.Point);
                        boltpts[i] = boltpts[j];
                        boltpts[j] = temp_point;
                    }
                }
            }
            return boltpts;
        }

        public TSG.Point[,] Get_Bolt_properties_matrix(TSD.Bolt drgbolt, TSD.View currentview, TSM.Beam mainpart)
        {

            TSM.Model mymodel = new TSM.Model();
            ArrayList profile = Getcatalog_values(mainpart);
            TSG.Point[,] pointarray = null;
            ////////////Converting drawing object to model object///////////////////////
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(currentview.ViewCoordinateSystem);
            TSM.ModelObject model_bolt = new TSM.Model().SelectModelObject(drgbolt.ModelIdentifier);
            TSD.PointList bolt_ptlist_sorted = new TSD.PointList();
            //////////////////////////////////////////////////////////////////filtering boltarray/////////////////////////////////////////////////////////////////////////
            if (model_bolt.GetType().Equals(typeof(TSM.BoltArray)))
            {
                TSM.BoltArray boltarray = model_bolt as TSM.BoltArray;
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(currentview.ViewCoordinateSystem));
                /////////////////////////////////////////////////////////getting bolt coordinate system for checking of out of plane bolts/////////////////////////////////////////////////
                TSG.CoordinateSystem boltcoord1 = boltarray.GetCoordinateSystem();
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                //////////////////////////////////////////////////////////assigning no of rows and columns to different bolt groups////////////////////////////////////////////////////////
                double values = Convert.ToDouble(profile[0]) / 2;
                double angle_check = RadianToDegree((boltcoord1.AxisX.GetAngleBetween(new TSG.Vector(1, 0, 0))));
                double value_to_be_compared = toviewmatrix.Transform((boltarray.BoltPositions[0] as TSG.Point)).Y;
                if ((value_to_be_compared > -values) && (value_to_be_compared < values))
                {

                    if ((Convert.ToInt32(boltcoord1.AxisX.Z) == 0) && (Convert.ToInt32(boltcoord1.AxisY.Z) == 0))
                    {
                        if ((Convert.ToInt64(angle_check) == 0) || (Convert.ToInt64(angle_check) == 90) || (Convert.ToInt64(angle_check) == 180) || (Convert.ToInt64(angle_check) == 270) || (Convert.ToInt64(angle_check) == 360))
                        {


                            int count = boltarray.BoltPositions.Count;
                            //////////////////////////////////////////////////Condition for single bolt/////////////////////////////////////////////////////////////////////////////////////////////
                            if (count == 1)
                            {
                                bolt_ptlist_sorted.Add(toviewmatrix.Transform(boltarray.BoltPositions[0] as TSG.Point));

                            }
                            /////////////////////////////////////////////////condition for more than single bolt///////////////////////////////////////////////////////////////////////////////////////////
                            else
                            {
                                bolt_ptlist_sorted = sorting_points_by_x_asc(boltarray.BoltPositions, currentview);
                            }
                            TSD.PointList pointlist_deleted = new TSD.PointList();
                            ////////////////////////////////////////////////////sorting pointlist by y desc////////////////////////////////////////////////////////////////////////////////////////
                            sorting_points_by_y_des(bolt_ptlist_sorted);
                            ArrayList list_of_y = new ArrayList();
                            ////////////////////////////////////////////////////getting unique values of y ///////////////////////////////////////////////////////////////////////////////////////
                            for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                            {
                                double y_value = (bolt_ptlist_sorted[i] as TSG.Point).Y;
                                if (i < bolt_ptlist_sorted.Count - 1)
                                {
                                    if (Convert.ToInt32((bolt_ptlist_sorted[i + 1].Y)) != Convert.ToInt32((bolt_ptlist_sorted[i].Y)))
                                    {
                                        list_of_y.Add(bolt_ptlist_sorted[i].Y);
                                    }
                                }
                                else
                                {
                                    list_of_y.Add(bolt_ptlist_sorted[i].Y);
                                }
                            }
                            /////////////////////////////////////////////////for each unique y values getting the list of points/////////////////////////////////////////////////////////////////////
                            int number_of_rows = list_of_y.Count;
                            int number_of_columns = 1;
                            int b = 0;

                            foreach (double y_value in list_of_y)
                            {
                                TSD.PointList pointlist_y_grp = new TSD.PointList();
                                for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                                {
                                    if (Convert.ToInt64( bolt_ptlist_sorted[i].Y) ==Convert.ToInt64(  y_value))
                                    {
                                        pointlist_y_grp.Add(bolt_ptlist_sorted[i]);
                                    }
                                }
                                number_of_columns = pointlist_y_grp.Count;
                                break;

                            }
                            pointarray = new TSG.Point[number_of_rows, number_of_columns];
                            //////////////////////////////////////////////////////////////////////
                            sorting_points_by_y_des(bolt_ptlist_sorted);
                            list_of_y = new ArrayList();
                            ////////////////////////////////////////////////////getting unique values of y ///////////////////////////////////////////////////////////////////////////////////////
                            for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                            {
                                double y_value = (bolt_ptlist_sorted[i] as TSG.Point).Y;
                                if (i < bolt_ptlist_sorted.Count - 1)
                                {
                                    if (Convert.ToInt32((bolt_ptlist_sorted[i + 1].Y)) != Convert.ToInt32((bolt_ptlist_sorted[i].Y)))
                                    {
                                        list_of_y.Add(bolt_ptlist_sorted[i].Y);
                                    }
                                }
                                else
                                {
                                    list_of_y.Add(bolt_ptlist_sorted[i].Y);
                                }
                            }
                            /////////////////////////////////////////////////for each unique y values getting the list of points/////////////////////////////////////////////////////////////////////

                            b = 0;

                            foreach (double y_value in list_of_y)
                            {
                                int a = 0;
                                TSD.PointList pointlist_y_grp = new TSD.PointList();
                                for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                                {
                                    if (Convert.ToInt64( bolt_ptlist_sorted[i].Y) == Convert.ToInt64( y_value))
                                    {
                                        pointlist_y_grp.Add(bolt_ptlist_sorted[i]);
                                    }
                                }
                                sorting_points_by_x_des(pointlist_y_grp);
                                foreach (TSG.Point pt in pointlist_y_grp)
                                {
                                    pointarray[b, a] = pt;
                                    a++;
                                }
                                b++;
                            }

                        }
                    }

                }

            }
            return pointarray;
        }
        public TSG.Point[,] Get_Bolt_properties_matrix(TSD.Bolt drgbolt, TSD.View currentview)
        {

            TSM.Model mymodel = new TSM.Model();

            TSG.Point[,] pointarray = null;
            ////////////Converting drawing object to model object///////////////////////
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(currentview.ViewCoordinateSystem);
            TSM.ModelObject model_bolt = new TSM.Model().SelectModelObject(drgbolt.ModelIdentifier);
            TSD.PointList bolt_ptlist_sorted = new TSD.PointList();
            //////////////////////////////////////////////////////////////////filtering boltarray/////////////////////////////////////////////////////////////////////////
            if (model_bolt.GetType().Equals(typeof(TSM.BoltArray)))
            {
                TSM.BoltArray boltarray = model_bolt as TSM.BoltArray;
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(currentview.ViewCoordinateSystem));
                /////////////////////////////////////////////////////////getting bolt coordinate system for checking of out of plane bolts/////////////////////////////////////////////////
                TSG.CoordinateSystem boltcoord1 = boltarray.GetCoordinateSystem();
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                //////////////////////////////////////////////////////////assigning no of rows and columns to different bolt groups////////////////////////////////////////////////////////

                double value_to_be_compared = toviewmatrix.Transform((boltarray.BoltPositions[0] as TSG.Point)).Y;

                if ((Convert.ToInt32(boltcoord1.AxisX.Z) == 0) && (Convert.ToInt32(boltcoord1.AxisY.Z) == 0))
                {
                    double angle_check = RadianToDegree((boltcoord1.AxisX.GetAngleBetween(new TSG.Vector(1, 0, 0))));

                    if ((Convert.ToInt64(angle_check) == 0) || (Convert.ToInt64(angle_check) == 90) || (Convert.ToInt64(angle_check) == 180) || (Convert.ToInt64(angle_check) == 270) || (Convert.ToInt64(angle_check) == 360))
                    {
                        //int number_of_rows = boltarray.GetBoltDistXCount();
                        //int number_of_columns = boltarray.GetBoltDistYCount();
                        ///////////////////////////////////////////////////////////1x1 bolt matrix///////////////////////////////////////////////////////////////////////////////////////////////////
                        //if ((boltarray.GetBoltDistY(0) == 0) && ((boltarray.GetBoltDistX(0) == 0)))
                        //{
                        //    pointarray = new TSG.Point[1, 1];
                        //}
                        ///////////////////////////////////////////////////////////mx1 bolt matrix////////////////////////////////////////////////////////////////////////////////////////////////////
                        //else if ((boltarray.GetBoltDistY(0) == 0) && ((boltarray.GetBoltDistX(0) != 0)))
                        //{
                        //    pointarray = new TSG.Point[number_of_rows + 1, number_of_columns];
                        //}
                        ///////////////////////////////////////////////////////////1xn bolt matrix//////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //else if ((boltarray.GetBoltDistY(0) != 0) && ((boltarray.GetBoltDistX(0) == 0)))
                        //{
                        //    pointarray = new TSG.Point[number_of_rows, number_of_columns + 1];
                        //}
                        ///////////////////////////////////////////////////////////mxn bolt matrix/////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //else
                        //{
                        //    pointarray = new TSG.Point[number_of_rows + 1, number_of_columns + 1];
                        //}

                        int count = boltarray.BoltPositions.Count;
                        //////////////////////////////////////////////////Condition for single bolt/////////////////////////////////////////////////////////////////////////////////////////////
                        if (count == 1)
                        {
                            bolt_ptlist_sorted.Add(toviewmatrix.Transform(boltarray.BoltPositions[0] as TSG.Point));

                        }
                        /////////////////////////////////////////////////condition for more than single bolt///////////////////////////////////////////////////////////////////////////////////////////
                        else
                        {
                            bolt_ptlist_sorted = sorting_points_by_x_asc(boltarray.BoltPositions, currentview);
                        }
                        TSD.PointList pointlist_deleted = new TSD.PointList();
                        ////////////////////////////////////////////////////sorting pointlist by y desc////////////////////////////////////////////////////////////////////////////////////////
                        sorting_points_by_y_des(bolt_ptlist_sorted);
                        ArrayList list_of_y = new ArrayList();
                        ////////////////////////////////////////////////////getting unique values of y ///////////////////////////////////////////////////////////////////////////////////////
                        for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                        {
                            double y_value = (bolt_ptlist_sorted[i] as TSG.Point).Y;
                            if (i < bolt_ptlist_sorted.Count - 1)
                            {
                                if (Convert.ToInt32((bolt_ptlist_sorted[i + 1].Y)) != Convert.ToInt32((bolt_ptlist_sorted[i].Y)))
                                {
                                    list_of_y.Add(bolt_ptlist_sorted[i].Y);
                                }
                            }
                            else
                            {
                                list_of_y.Add(bolt_ptlist_sorted[i].Y);
                            }
                        }
                        /////////////////////////////////////////////////for each unique y values getting the list of points/////////////////////////////////////////////////////////////////////

                        int number_of_rows = list_of_y.Count;
                        int number_of_columns = 1;
                        int b = 0;

                        foreach (double y_value in list_of_y)
                        {
                            TSD.PointList pointlist_y_grp = new TSD.PointList();
                            for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                            {
                                if (bolt_ptlist_sorted[i].Y == y_value)
                                {
                                    pointlist_y_grp.Add(bolt_ptlist_sorted[i]);
                                }
                            }
                            number_of_columns = pointlist_y_grp.Count;
                            break;

                        }
                        pointarray = new TSG.Point[number_of_rows, number_of_columns];
                        //////////////////////////////////////////////////////////////////////
                        sorting_points_by_y_des(bolt_ptlist_sorted);
                        list_of_y = new ArrayList();
                        ////////////////////////////////////////////////////getting unique values of y ///////////////////////////////////////////////////////////////////////////////////////
                        for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                        {
                            double y_value = (bolt_ptlist_sorted[i] as TSG.Point).Y;
                            if (i < bolt_ptlist_sorted.Count - 1)
                            {
                                if (Convert.ToInt32((bolt_ptlist_sorted[i + 1].Y)) != Convert.ToInt32((bolt_ptlist_sorted[i].Y)))
                                {
                                    list_of_y.Add(bolt_ptlist_sorted[i].Y);
                                }
                            }
                            else
                            {
                                list_of_y.Add(bolt_ptlist_sorted[i].Y);
                            }
                        }
                        /////////////////////////////////////////////////for each unique y values getting the list of points/////////////////////////////////////////////////////////////////////

                        b = 0;

                        foreach (double y_value in list_of_y)
                        {
                            int a = 0;
                            TSD.PointList pointlist_y_grp = new TSD.PointList();
                            for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                            {
                                if (bolt_ptlist_sorted[i].Y == y_value)
                                {
                                    pointlist_y_grp.Add(bolt_ptlist_sorted[i]);
                                }
                            }
                            sorting_points_by_x_des(pointlist_y_grp);
                            foreach (TSG.Point pt in pointlist_y_grp)
                            {
                                pointarray[b, a] = pt;
                                a++;
                            }
                            b++;
                        }

                    }
                }

            }
            return pointarray;
        }
        public TSG.Point[,] Get_Bolt_properties_matrix_input_as_modelobject(TSM.BoltGroup model_bolt, TSD.View currentview)
        {

            TSM.Model mymodel = new TSM.Model();

            TSG.Point[,] pointarray = null;
            ////////////Converting drawing object to model object///////////////////////
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(currentview.ViewCoordinateSystem);
            //TSM.ModelObject model_bolt = new TSM.Model().SelectModelObject(drgbolt.ModelIdentifier);
            TSD.PointList bolt_ptlist_sorted = new TSD.PointList();
            //////////////////////////////////////////////////////////////////filtering boltarray/////////////////////////////////////////////////////////////////////////
            if (model_bolt.GetType().Equals(typeof(TSM.BoltArray)))
            {
                TSM.BoltGroup boltarray = model_bolt as TSM.BoltGroup;

                int NO_OF_BOLT = boltarray.BoltPositions.Count;
                if (NO_OF_BOLT > 0)
                {

                    mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(currentview.ViewCoordinateSystem));
                    /////////////////////////////////////////////////////////getting bolt coordinate system for checking of out of plane bolts/////////////////////////////////////////////////
                    TSG.CoordinateSystem boltcoord1 = boltarray.GetCoordinateSystem();
                    mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                    //////////////////////////////////////////////////////////assigning no of rows and columns to different bolt groups////////////////////////////////////////////////////////

                    double value_to_be_compared = toviewmatrix.Transform((boltarray.BoltPositions[0] as TSG.Point)).Y;

                    if ((Convert.ToInt64(boltcoord1.AxisX.Z) == 0) && (Convert.ToInt64(boltcoord1.AxisY.Z) == 0))
                    {
                        double angle_check = RadianToDegree((boltcoord1.AxisX.GetAngleBetween(new TSG.Vector(1, 0, 0))));

                        if ((Convert.ToInt64(angle_check) == 0) || (Convert.ToInt64(angle_check) == 90) || (Convert.ToInt64(angle_check) == 180) || (Convert.ToInt64(angle_check) == 270) || (Convert.ToInt64(angle_check) == 360))
                        {

                            int count = boltarray.BoltPositions.Count;
                            //////////////////////////////////////////////////Condition for single bolt/////////////////////////////////////////////////////////////////////////////////////////////
                            if (count == 1)
                            {
                                bolt_ptlist_sorted.Add(toviewmatrix.Transform(boltarray.BoltPositions[0] as TSG.Point));

                            }
                            /////////////////////////////////////////////////condition for more than single bolt///////////////////////////////////////////////////////////////////////////////////////////
                            else
                            {
                                bolt_ptlist_sorted = sorting_points_by_x_asc(boltarray.BoltPositions, currentview);
                            }
                            TSD.PointList pointlist_deleted = new TSD.PointList();
                            ////////////////////////////////////////////////////sorting pointlist by y desc////////////////////////////////////////////////////////////////////////////////////////
                            sorting_points_by_y_des(bolt_ptlist_sorted);
                            ArrayList list_of_y = new ArrayList();
                            ////////////////////////////////////////////////////getting unique values of y ///////////////////////////////////////////////////////////////////////////////////////
                            for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                            {
                                double y_value = (bolt_ptlist_sorted[i] as TSG.Point).Y;
                                if (i < bolt_ptlist_sorted.Count - 1)
                                {
                                    if (Convert.ToInt32((bolt_ptlist_sorted[i + 1].Y)) != Convert.ToInt32((bolt_ptlist_sorted[i].Y)))
                                    {
                                        list_of_y.Add(bolt_ptlist_sorted[i].Y);
                                    }
                                }
                                else
                                {
                                    list_of_y.Add(bolt_ptlist_sorted[i].Y);
                                }
                            }
                            /////////////////////////////////////////////////for each unique y values getting the list of points/////////////////////////////////////////////////////////////////////

                            int number_of_rows = list_of_y.Count;
                            int number_of_columns = 1;
                            int b = 0;

                            foreach (double y_value in list_of_y)
                            {
                                TSD.PointList pointlist_y_grp = new TSD.PointList();
                                for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                                {
                                    if (bolt_ptlist_sorted[i].Y == y_value)
                                    {
                                        pointlist_y_grp.Add(bolt_ptlist_sorted[i]);
                                    }
                                }
                                number_of_columns = pointlist_y_grp.Count;
                                break;

                            }
                            pointarray = new TSG.Point[number_of_rows, number_of_columns];
                            //////////////////////////////////////////////////////////////////////
                            sorting_points_by_y_des(bolt_ptlist_sorted);
                            list_of_y = new ArrayList();
                            ////////////////////////////////////////////////////getting unique values of y ///////////////////////////////////////////////////////////////////////////////////////
                            for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                            {
                                double y_value = (bolt_ptlist_sorted[i] as TSG.Point).Y;
                                if (i < bolt_ptlist_sorted.Count - 1)
                                {
                                    if (Convert.ToInt32((bolt_ptlist_sorted[i + 1].Y)) != Convert.ToInt32((bolt_ptlist_sorted[i].Y)))
                                    {
                                        list_of_y.Add(bolt_ptlist_sorted[i].Y);
                                    }
                                }
                                else
                                {
                                    list_of_y.Add(bolt_ptlist_sorted[i].Y);
                                }
                            }
                            /////////////////////////////////////////////////for each unique y values getting the list of points/////////////////////////////////////////////////////////////////////

                            b = 0;

                            foreach (double y_value in list_of_y)
                            {
                                int a = 0;
                                TSD.PointList pointlist_y_grp = new TSD.PointList();
                                for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                                {
                                    if (bolt_ptlist_sorted[i].Y == y_value)
                                    {
                                        pointlist_y_grp.Add(bolt_ptlist_sorted[i]);
                                    }
                                }
                                sorting_points_by_x_des(pointlist_y_grp);
                                foreach (TSG.Point pt in pointlist_y_grp)
                                {
                                    pointarray[b, a] = pt;
                                    a++;
                                }
                                b++;
                            }

                        }
                    }
                }
                else
                {
 
                }
            }
            return pointarray;
        }

        public TSG.Point[,] Get_Bolt_properties_matrix_input_as_modelobject_for_section(TSM.BoltGroup model_bolt, TSD.View currentview)
        {

            TSM.Model mymodel = new TSM.Model();

            TSG.Point[,] pointarray = null;
            ////////////Converting drawing object to model object///////////////////////
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(currentview.ViewCoordinateSystem);
            //TSM.ModelObject model_bolt = new TSM.Model().SelectModelObject(drgbolt.ModelIdentifier);
            TSD.PointList bolt_ptlist_sorted = new TSD.PointList();
            //////////////////////////////////////////////////////////////////filtering boltarray/////////////////////////////////////////////////////////////////////////
            if (model_bolt.GetType().Equals(typeof(TSM.BoltArray)))
            {
                TSM.BoltArray boltarray = model_bolt as TSM.BoltArray;
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(currentview.ViewCoordinateSystem));
                /////////////////////////////////////////////////////////getting bolt coordinate system for checking of out of plane bolts/////////////////////////////////////////////////
                TSG.CoordinateSystem boltcoord1 = boltarray.GetCoordinateSystem();
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                //////////////////////////////////////////////////////////assigning no of rows and columns to different bolt groups////////////////////////////////////////////////////////
                TSG.Vector Z_AXIS = boltcoord1.AxisX.Cross(boltcoord1.AxisY);
                double value_to_be_compared = toviewmatrix.Transform((boltarray.BoltPositions[0] as TSG.Point)).Y;

                //if ((Convert.ToInt32(boltcoord1.AxisX.Z) == 0) && (Convert.ToInt32(boltcoord1.AxisY.Z) == 0))
                //{
                if(Convert.ToInt64(Z_AXIS.X)!=0)
                {
               
                    double angle_check = RadianToDegree((boltcoord1.AxisX.GetAngleBetween(new TSG.Vector(1, 0, 0))));

                    //if ((Convert.ToInt64(angle_check) == 0) || (Convert.ToInt64(angle_check) == 90) || (Convert.ToInt64(angle_check) == 180) || (Convert.ToInt64(angle_check) == 270) || (Convert.ToInt64(angle_check) == 360))
                    //{
                        //int number_of_rows = boltarray.GetBoltDistXCount();
                        //int number_of_columns = boltarray.GetBoltDistYCount();
                        ///////////////////////////////////////////////////////////1x1 bolt matrix///////////////////////////////////////////////////////////////////////////////////////////////////
                        //if ((boltarray.GetBoltDistY(0) == 0) && ((boltarray.GetBoltDistX(0) == 0)))
                        //{
                        //    pointarray = new TSG.Point[1, 1];
                        //}
                        ///////////////////////////////////////////////////////////mx1 bolt matrix////////////////////////////////////////////////////////////////////////////////////////////////////
                        //else if ((boltarray.GetBoltDistY(0) == 0) && ((boltarray.GetBoltDistX(0) != 0)))
                        //{
                        //    pointarray = new TSG.Point[number_of_rows + 1, number_of_columns];
                        //}
                        ///////////////////////////////////////////////////////////1xn bolt matrix//////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //else if ((boltarray.GetBoltDistY(0) != 0) && ((boltarray.GetBoltDistX(0) == 0)))
                        //{
                        //    pointarray = new TSG.Point[number_of_rows, number_of_columns + 1];
                        //}
                        ///////////////////////////////////////////////////////////mxn bolt matrix/////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //else
                        //{
                        //    pointarray = new TSG.Point[number_of_rows + 1, number_of_columns + 1];
                        //}

                        int count = boltarray.BoltPositions.Count;
                        //////////////////////////////////////////////////Condition for single bolt/////////////////////////////////////////////////////////////////////////////////////////////
                        if (count == 1)
                        {
                            bolt_ptlist_sorted.Add(toviewmatrix.Transform(boltarray.BoltPositions[0] as TSG.Point));

                        }
                        /////////////////////////////////////////////////condition for more than single bolt///////////////////////////////////////////////////////////////////////////////////////////
                        else
                        {
                            bolt_ptlist_sorted = sorting_points_by_x_asc(boltarray.BoltPositions, currentview);
                        }
                        TSD.PointList pointlist_deleted = new TSD.PointList();
                        ////////////////////////////////////////////////////sorting pointlist by y desc////////////////////////////////////////////////////////////////////////////////////////
                        sorting_points_by_y_des(bolt_ptlist_sorted);
                        ArrayList list_of_y = new ArrayList();
                        ////////////////////////////////////////////////////getting unique values of y ///////////////////////////////////////////////////////////////////////////////////////
                        for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                        {
                            double y_value = (bolt_ptlist_sorted[i] as TSG.Point).Y;
                            if (i < bolt_ptlist_sorted.Count - 1)
                            {
                                if (Convert.ToInt32((bolt_ptlist_sorted[i + 1].Y)) != Convert.ToInt32((bolt_ptlist_sorted[i].Y)))
                                {
                                    list_of_y.Add(bolt_ptlist_sorted[i].Y);
                                }
                            }
                            else
                            {
                                list_of_y.Add(bolt_ptlist_sorted[i].Y);
                            }
                        }
                        /////////////////////////////////////////////////for each unique y values getting the list of points/////////////////////////////////////////////////////////////////////

                        int number_of_rows = list_of_y.Count;
                        int number_of_columns = 1;
                        int b = 0;

                        foreach (double y_value in list_of_y)
                        {
                            TSD.PointList pointlist_y_grp = new TSD.PointList();
                            for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                            {
                                if (bolt_ptlist_sorted[i].Y == y_value)
                                {
                                    pointlist_y_grp.Add(bolt_ptlist_sorted[i]);
                                }
                            }
                            number_of_columns = pointlist_y_grp.Count;
                            break;

                        }
                        pointarray = new TSG.Point[number_of_rows, number_of_columns];
                        //////////////////////////////////////////////////////////////////////
                        sorting_points_by_y_des(bolt_ptlist_sorted);
                        list_of_y = new ArrayList();
                        ////////////////////////////////////////////////////getting unique values of y ///////////////////////////////////////////////////////////////////////////////////////
                        for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                        {
                            double y_value = (bolt_ptlist_sorted[i] as TSG.Point).Y;
                            if (i < bolt_ptlist_sorted.Count - 1)
                            {
                                if (Convert.ToInt32((bolt_ptlist_sorted[i + 1].Y)) != Convert.ToInt32((bolt_ptlist_sorted[i].Y)))
                                {
                                    list_of_y.Add(bolt_ptlist_sorted[i].Y);
                                }
                            }
                            else
                            {
                                list_of_y.Add(bolt_ptlist_sorted[i].Y);
                            }
                        }
                        /////////////////////////////////////////////////for each unique y values getting the list of points/////////////////////////////////////////////////////////////////////

                        b = 0;

                        foreach (double y_value in list_of_y)
                        {
                            int a = 0;
                            TSD.PointList pointlist_y_grp = new TSD.PointList();
                            for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                            {
                                if (bolt_ptlist_sorted[i].Y == y_value)
                                {
                                    pointlist_y_grp.Add(bolt_ptlist_sorted[i]);
                                }
                            }
                            sorting_points_by_x_des(pointlist_y_grp);
                            foreach (TSG.Point pt in pointlist_y_grp)
                            {
                                pointarray[b, a] = pt;
                                a++;
                            }
                            b++;
                        }

                    //}
                //}
            }
            }
            return pointarray;
        }
        public TSD.PointList sorting_points_by_y_des(TSD.PointList list_of_points)
        {
            for (int i = 0; i < list_of_points.Count; i++)
            {
                for (int j = 0; j < list_of_points.Count; j++)
                {
                    if ((list_of_points[i] as TSG.Point).Y > (list_of_points[j] as TSG.Point).Y)
                    {
                        TSG.Point temp_point = (list_of_points[i] as TSG.Point);
                        list_of_points[i] = list_of_points[j];
                        list_of_points[j] = temp_point;
                    }
                }
            }
            return list_of_points;
        }

        public TSD.PointList sorting_points_by_x_des(TSD.PointList list_of_points)
        {
            for (int i = 0; i < list_of_points.Count; i++)
            {
                for (int j = 0; j < list_of_points.Count; j++)
                {
                    if ((list_of_points[i] as TSG.Point).X > (list_of_points[j] as TSG.Point).X)
                    {
                        TSG.Point temp_point = (list_of_points[i] as TSG.Point);
                        list_of_points[i] = list_of_points[j];
                        list_of_points[j] = temp_point;
                    }
                }
            }
            return list_of_points;
        }

        public TSD.PointList pointlist_remove_duplicate_Xvalues(TSD.PointList ptlist)
        {
            TSD.PointList pointlist_deleted = new TSD.PointList();
            /////////////////////////////////////////sorting the ptlist by x descending/////////////////////////////////////////////////////////////////////////////////////////////////////
            sorting_points_by_x_des(ptlist);
            ArrayList list_of_X = new ArrayList();
            /////////////////////////////////////////getting unique X values/////////////////////////////////////////////////////////////////////////////////////////////////////
            for (int i = 0; i < ptlist.Count; i++)
            {
                double X_value = (ptlist[i] as TSG.Point).X;
                if (i < ptlist.Count - 1)
                {
                    if (Convert.ToInt32((ptlist[i + 1].X)) != Convert.ToInt32((ptlist[i].X)))
                    {
                        list_of_X.Add(ptlist[i].X);
                    }
                }
                else
                {
                    list_of_X.Add(ptlist[i].X);
                }
            }
            TSD.PointList finaldimpts = new TSD.PointList();
            foreach (double Xvalue in list_of_X)
            {
                TSD.PointList allpts = new TSD.PointList();
                for (int i = 0; i < ptlist.Count; i++)
                {
                    if (Convert.ToInt64(ptlist[i].X) == Convert.ToInt64(Xvalue))
                    {
                        allpts.Add(ptlist[i]);
                    }
                }
                sorting_points_by_y_des(allpts);
                finaldimpts.Add(allpts[allpts.Count - 1]);
            }
            return finaldimpts;

        }



        public TSD.PointList pointlist_remove_duplicate_Yvalues(TSD.PointList ptlist)
        {
            TSD.PointList pointlist_deleted = new TSD.PointList();
            sorting_points_by_y_des(ptlist);
            ArrayList list_of_y = new ArrayList();
            for (int i = 0; i < ptlist.Count; i++)
            {
                double y_value = (ptlist[i] as TSG.Point).Y;

                if (i < ptlist.Count - 1)
                {
                    if (Convert.ToInt32((ptlist[i + 1].Y)) != Convert.ToInt32((ptlist[i].Y)))
                    {
                        list_of_y.Add(ptlist[i].Y);
                    }
                }
                else
                {
                    list_of_y.Add(ptlist[i].Y);
                }

            }
            TSD.PointList finaldimpts = new TSD.PointList();
            foreach (double yvalue in list_of_y)
            {
                TSD.PointList allpts = new TSD.PointList();
                for (int i = 0; i < ptlist.Count; i++)
                {
                    if ((ptlist[i].Y) == yvalue)
                    {
                        allpts.Add(ptlist[i]);

                    }
                }
                sorting_points_by_x_des(allpts);
                finaldimpts.Add(allpts[0]);
            }
            return finaldimpts;
        }

        public void Create_cope_dimensions(TSD.View current_view, TSM.Beam main_part,string drg_att)
        {

            TSD.StraightDimensionSet.StraightDimensionSetAttributes fixed_attributes = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            fixed_attributes.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            fixed_attributes.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    fixed_attributes.Text.Font.Height = 3.571875;
                }
                else
                {
                    fixed_attributes.Text.Font.Height = 3.175;
                }
            } 
            else
            {
                fixed_attributes.Text.Font.Height = 2.38125;


            }
            TSD.StraightDimensionSetHandler cope_locking_dimesion = new TSD.StraightDimensionSetHandler();
          
            //TSD.StraightDimensionSet.StraightDimensionSetAttributes dim_font_height = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            //dim_font_height.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            //if (drg_att == "SK_BEAM_A1")
            //{
            //    dim_font_height.Text.Font.Height = 3.175;
            //}
            //else
            //{
            //    dim_font_height.Text.Font.Height = 2.38125;
            //    //dim_font_height.Text.Font.Height = 3.175;


            //}

            ArrayList values = Getcatalog_values(main_part);
            double size1_m = Convert.ToDouble(values[0]);
            double size2_m = Convert.ToDouble(values[1]);
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.DisplayCoordinateSystem);
            Type type_for_contourplate = typeof(TSM.ContourPlate);
            double size = 0;
            double output = 0;
            main_part.GetReportProperty("LENGTH", ref output);
            if ((current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView)))
            {
                size = size1_m / 2;
            }
            else
            {
                size = size2_m / 2;
            }

            //////copedimesnison/////
            Type bolpart = typeof(TSM.BooleanPart);
            Type fit = typeof(TSM.Fitting);
            TSM.ModelObjectEnumerator test_bool = main_part.GetBooleans();
            ArrayList cuts = new ArrayList();
            TSG.Point fittrans_origin = new TSG.Point();
            double workpoint = output;
            TSG.Point point1 = new TSG.Point();
            TSG.Point point2 = new TSG.Point();
            TSG.Point point3 = new TSG.Point();
            TSG.Point point4 = new TSG.Point();
            while (test_bool.MoveNext())
            {
                int d = 0;
                ArrayList pts_in_viewco = new ArrayList();
                var partcut = test_bool.Current;
                if (partcut.GetType().Equals(bolpart))
                {
                    TSM.BooleanPart fitobj = partcut as TSM.BooleanPart;

                    if (fitobj.OperativePart.GetType().Equals(type_for_contourplate))
                    {
                        TSM.ContourPlate platecut = fitobj.OperativePart as TSM.ContourPlate;
                        ArrayList pts = platecut.Contour.ContourPoints;
                        ArrayList x_list = new ArrayList();
                        ArrayList y_list = new ArrayList();
                        ArrayList z_list = new ArrayList();
                        foreach (TSG.Point bolpart_point in pts)
                        {
                            TSG.Point tran_point = toviewmatrix.Transform(bolpart_point);
                            pts_in_viewco.Add(tran_point);

                        }
                        bool RESULT = false;
                        bool RESULT1 = false;
                        



                        try
                        {
                            long P1 = Convert.ToInt64((pts_in_viewco[0] as TSG.Point).X);
                            long P2 = Convert.ToInt64((pts_in_viewco[1] as TSG.Point).X);
                            long P3 = Convert.ToInt64((pts_in_viewco[2] as TSG.Point).X);
                            long P4 = Convert.ToInt64((pts_in_viewco[3] as TSG.Point).X);

                            RESULT = P1.Equals(P4);
                            RESULT1 = P2.Equals(P3);
                        }
                        catch
                        { 
                        }
                        if (((RESULT == true)&& (RESULT1 == true)||(RESULT == false)&& (RESULT1 == false)))
                        {
                            if (Convert.ToInt16((pts_in_viewco[0] as TSG.Point).Y) != Convert.ToInt16((pts_in_viewco[2] as TSG.Point).Y))
                            {
                                foreach (TSG.Point pt in pts_in_viewco)
                                {


                                    x_list.Add(pt.X);
                                    y_list.Add(pt.Y);
                                    z_list.Add(pt.Z);

                                }

                                x_list.Sort();
                                y_list.Sort();
                                ////////////////////Lower boolean dim///////////////////
                                TSG.Point pt1 = new TSG.Point();
                                TSG.Point pt2 = new TSG.Point();
                                TSG.Vector dim_vect_for_x_dim = new TSG.Vector();
                                TSG.Vector dim_vect_for_y_dim = new TSG.Vector();
                          
                                //////////Third quadrant/////////////////////////
                                if ((Convert.ToDouble(y_list[0]) <= 0) && ((Convert.ToDouble(x_list[0]) <= 0)))
                                {

                                    pt2 = new TSG.Point(0, Convert.ToDouble(y_list[y_list.Count - 1]), 0);
                                    pt1 = new TSG.Point(Convert.ToDouble(x_list[x_list.Count - 1]), -size, 0);
                                    dim_vect_for_x_dim = new TSG.Vector(0, -1, 0);
                                    dim_vect_for_y_dim = new TSG.Vector(-1, 0, 0);
                                    TSD.PointList MYPTLIST = new TSD.PointList();
                                    MYPTLIST.Add(pt1);
                                    MYPTLIST.Add(pt2);
                                    TSD.PointList MYPTLIST1 = new TSD.PointList();
                                    MYPTLIST1.Add(pt2);
                                    MYPTLIST1.Add(pt1);


                                    try
                                    {
                                        cope_locking_dimesion.CreateDimensionSet(current_view, MYPTLIST, dim_vect_for_x_dim, 70, fixed_attributes);
                                       
                                        cope_locking_dimesion.CreateDimensionSet(current_view, MYPTLIST1, dim_vect_for_y_dim, 85, fixed_attributes);
                                    }
                                    catch
                                    { 
                                    }

                                    //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt2, dim_vect_for_x_dim, 70, dim_font_height);
                                    //bool_dim_x.Insert();



                                    //TSD.StraightDimension bool_dim_y = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt2, dim_vect_for_y_dim, 85, dim_font_height);
                                    //bool_dim_y.Insert();


                                }
                                //////////Second quadrant//////////////////////////
                                else if ((Convert.ToDouble(x_list[0]) <= 0) && ((Convert.ToDouble(y_list[0]) >= 0)))
                                {
                                    pt2 = new TSG.Point(0, Convert.ToDouble(y_list[0]), 0);
                                    pt1 = new TSG.Point(Convert.ToDouble(x_list[x_list.Count - 1]), size, 0);
                                    point2 = pt1;
                                    dim_vect_for_x_dim = new TSG.Vector(0, 1, 0);
                                    dim_vect_for_y_dim = new TSG.Vector(-1, 0, 0);
                                    //TSD.PointList final_pts = new TSD.PointList();
                                    //final_pts.Add(pt1);
                                    //final_pts.Add(pt2);
                                    TSD.PointList MYPTLIST = new TSD.PointList();
                                    MYPTLIST.Add(pt1);
                                    MYPTLIST.Add(pt2);
                                    TSD.PointList MYPTLIST1 = new TSD.PointList();
                                    MYPTLIST1.Add(pt2);
                                    MYPTLIST1.Add(pt1);

                                    try
                                    {

                                        cope_locking_dimesion.CreateDimensionSet(current_view, MYPTLIST, dim_vect_for_x_dim, 70, fixed_attributes);
                                        cope_locking_dimesion.CreateDimensionSet(current_view, MYPTLIST1, dim_vect_for_y_dim, 85, fixed_attributes);
                                    }
                                    catch
                                    {
                                    }




                                    //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt2, dim_vect_for_x_dim, 70, dim_font_height);
                                    //bool_dim_x.Insert();
                                   


                                    //TSD.StraightDimension bool_dim_y = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt2, dim_vect_for_y_dim, 85, dim_font_height);
                                    //bool_dim_y.Insert();


                                }
                                /////////Fourth Quadrant////////////////////////////
                                else if ((Convert.ToDouble(x_list[0]) >= 0) && ((Convert.ToDouble(y_list[0]) <= 0)))
                                {

                                    pt1 = new TSG.Point(Convert.ToDouble(x_list[0]), -size, 0);
                                    pt2 = new TSG.Point(workpoint, Convert.ToDouble(y_list[y_list.Count - 1]), 0);
                                    dim_vect_for_x_dim = new TSG.Vector(0, -1, 0);
                                    dim_vect_for_y_dim = new TSG.Vector(1, 0, 0);
                                    TSD.PointList MYPTLIST = new TSD.PointList();
                                    MYPTLIST.Add(pt1);
                                    MYPTLIST.Add(pt2);
                                    TSD.PointList MYPTLIST1 = new TSD.PointList();
                                    MYPTLIST1.Add(pt2);
                                    MYPTLIST1.Add(pt1);
                                    try
                                    {
                                        cope_locking_dimesion.CreateDimensionSet(current_view, MYPTLIST, dim_vect_for_x_dim, 70, fixed_attributes);
                                        cope_locking_dimesion.CreateDimensionSet(current_view, MYPTLIST1, dim_vect_for_y_dim, 85, fixed_attributes);
                                    }
                                    catch
                                    { 
                                    }



                                    //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt2, dim_vect_for_x_dim, 70, dim_font_height);
                                
                                    //bool_dim_x.Insert();


                                    //TSD.StraightDimension bool_dim_y = new TSD.StraightDimension(current_view as TSD.ViewBase, pt2, pt1, dim_vect_for_y_dim, 85, dim_font_height);
                                    //bool_dim_y.Insert();



                                }
                                //////////////First Quadrant////////////////
                                else if ((Convert.ToDouble(x_list[0]) >= 0) && ((Convert.ToDouble(y_list[0]) >= 0)))
                                {

                                    pt1 = new TSG.Point(Convert.ToDouble(x_list[0]), size, 0);
                                    pt2 = new TSG.Point(workpoint, Convert.ToDouble(y_list[0]), 0);
                                    point3 = pt1;
                                    dim_vect_for_x_dim = new TSG.Vector(0, 1, 0);
                                    dim_vect_for_y_dim = new TSG.Vector(1, 0, 0);
                                    TSD.PointList MYPTLIST = new TSD.PointList();
                                    MYPTLIST.Add(pt1);
                                    MYPTLIST.Add(pt2);
                                    TSD.PointList MYPTLIST1 = new TSD.PointList();
                                    MYPTLIST1.Add(pt2);
                                    MYPTLIST1.Add(pt1);
                                    try
                                    {
                                        cope_locking_dimesion.CreateDimensionSet(current_view, MYPTLIST, dim_vect_for_x_dim, 70, fixed_attributes);
                                        cope_locking_dimesion.CreateDimensionSet(current_view, MYPTLIST1, dim_vect_for_y_dim, 85, fixed_attributes);
                                    }
                                    catch
                                    { 
                                    }


                                    //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt2, dim_vect_for_x_dim, 70, dim_font_height);
                                    //bool_dim_x.Insert();

                                    //TSD.StraightDimension bool_dim_y = new TSD.StraightDimension(current_view as TSD.ViewBase, pt2, pt1, dim_vect_for_y_dim, 85, dim_font_height);
                                    //bool_dim_y.Insert();



                                }


                                //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt2, dim_vect_for_x_dim, 200 + d);
                                //bool_dim_x.Insert();


                                //TSD.StraightDimension bool_dim_y = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt2, dim_vect_for_y_dim, 200);
                                //bool_dim_y.Insert();






                                ////////////////
                            }
                        }
                    }

                    cuts.Add(partcut);
                    TSG.Point fittrans_origin1 = toviewmatrix.Transform(main_part.EndPoint);
                }
                else
                {
                    point2 = new TSG.Point(0, size1_m / 2, 0);
                    point3 = new TSG.Point(output, size1_m / 2, 0);
                }
                d = d + 100;
            }
        }
        public static string DateandTime()
        {
            DateTime dateTime = System.DateTime.Now;
            return dateTime.ToString("g").Replace(":", "_").Replace('/', '_');
        }
        public void provide_fitting_cut_dims(TSD.View current_view, TSM.Beam main_part, string drg_att)
        {
            MyModel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            TSS.Face top_face = null;
            TSS.Face btm_face = null;
            List<TSS.Edge> top_edges = new List<TSS.Edge>();
            List<TSS.Edge> btm_edges = new List<TSS.Edge>();
            List<TSG.Point> all_points = new List<TSG.Point>();
            Dictionary<TSG.Point, TSG.Point> all_points_local = new Dictionary<TSG.Point, TSG.Point>();
            double max_Z = 0;
            double min_Z = 0;
            double width = 0;
            main_part.GetReportProperty("WIDTH",ref width);
            TSS.Edge top_chamfer_edge = null;
            TSS.Edge btm_chamfer_edge = null;
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.DisplayCoordinateSystem);
            TSG.Matrix topartmatrix = TSG.MatrixFactory.ToCoordinateSystem(main_part.GetCoordinateSystem());
            Tekla.Structures.Solid.EdgeEnumerator edges = (main_part as TSM.Part).GetSolid().GetEdgeEnumerator();
            
            while (edges.MoveNext())
            {
                TSS.Edge edge = edges.Current as TSS.Edge;
                if(edge!=null)
                { 
                    all_points.Add(edge.StartPoint);
                    all_points.Add(edge.EndPoint);
                }
            }
            all_points = all_points.Distinct().ToList();

            foreach(TSG.Point point in all_points)
            {
                all_points_local.Add(point,topartmatrix.Transform(point));
            }


            TSG.Point min = all_points_local.Aggregate((l, r) => l.Value.Y < r.Value.Y ? l : r).Value;
            TSG.Point max = all_points_local.Aggregate((l, r) => l.Value.Y > r.Value.Y ? l : r).Value;
            min_Z = Math.Round(min.Y,2);
            max_Z = Math.Round(max.Y,2);

            

            //Filter Top Face edges
            edges.Reset();
            while(edges.MoveNext())
            {
                TSS.Edge edge = edges.Current as TSS.Edge;


                if(Math.Round(topartmatrix.Transform(edge.StartPoint).Y,2)==Math.Round(topartmatrix.Transform(edge.EndPoint).Y,2))
                {
                    if(Math.Round(topartmatrix.Transform(edge.StartPoint).Y,2) == max_Z)
                    {
                        top_edges.Add(edge);
                    }
                    
                }
            }
            top_edges = top_edges.Distinct().ToList();

            //Filter Bottom Face edges
            edges.Reset();
            while (edges.MoveNext())
            {
                TSS.Edge edge = edges.Current as TSS.Edge;
                if (Math.Round(topartmatrix.Transform(edge.StartPoint).Y, 2) == Math.Round(topartmatrix.Transform(edge.EndPoint).Y, 2))
                {
                    if (Math.Round(topartmatrix.Transform(edge.StartPoint).Y, 2) == min_Z)
                    {
                        btm_edges.Add(edge);
                    }

                }
            }
            btm_edges = btm_edges.Distinct().ToList();

            
            if(top_edges.Count==5)
            {
                foreach(TSS.Edge edge in top_edges)
                {
                    TSG.Line line = new TSG.Line(edge.StartPoint,edge.EndPoint);
                    double angle = Math.Round(line.Direction.GetAngleBetween(main_part.GetCoordinateSystem().AxisX)*180/Math.PI,2);
                    if(angle!=0 && angle !=90 && angle != 180 && angle != 270 && angle != 360)
                    {
                        top_chamfer_edge = edge;
                        break;
                    }
                }

                foreach (TSS.Edge edge in btm_edges)
                {
                    TSG.Line line = new TSG.Line(edge.StartPoint, edge.EndPoint);
                    double angle = Math.Round(line.Direction.GetAngleBetween(main_part.GetCoordinateSystem().AxisX) * 180 / Math.PI, 2);
                    if (angle != 0 && angle != 90 && angle != 180 && angle != 270 && angle != 360)
                    {
                        btm_chamfer_edge = edge;
                        break;
                    }
                }



                //Create dimnsion for top flange Cut
                TSD.StraightDimensionSet.StraightDimensionSetAttributes dim_font_height = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                dim_font_height.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                {
                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                    {
                        dim_font_height.Text.Font.Height = 3.571875;
                    }
                    else
                    {
                        dim_font_height.Text.Font.Height = 3.175;
                    }
                }
                else
                {
                    dim_font_height.Text.Font.Height = 2.38125;


                }
                TSD.StraightDimensionSetHandler dimset = new TSD.StraightDimensionSetHandler();
                PointList mypt = new PointList();
                TSG.Point ref_pt = toviewmatrix.Transform(main_part.GetCoordinateSystem().Origin);

                //Creating cut dimwnsions based upon flange cut location


                if (toviewmatrix.Transform(top_chamfer_edge.StartPoint).Y > ref_pt.Y && toviewmatrix.Transform(top_chamfer_edge.EndPoint).Y > ref_pt.Y)
                {
                    mypt.Add(toviewmatrix.Transform(top_chamfer_edge.StartPoint));
                    mypt.Add(toviewmatrix.Transform(top_chamfer_edge.EndPoint));
                    dimset.CreateDimensionSet(current_view, mypt, new TSG.Vector(0, 1, 0), 40, dim_font_height);
                }
                else
                {
                    mypt.Add(toviewmatrix.Transform(top_chamfer_edge.StartPoint));
                    mypt.Add(toviewmatrix.Transform(top_chamfer_edge.EndPoint));
                    dimset.CreateDimensionSet(current_view, mypt, new TSG.Vector(0, -1, 0), 40, dim_font_height);
                }

                mypt.Clear();


                if (toviewmatrix.Transform(top_chamfer_edge.StartPoint).X < (toviewmatrix.Transform(main_part.GetSolid().MinimumPoint).X + toviewmatrix.Transform(main_part.GetSolid().MaximumPoint).X) / 2
                    && toviewmatrix.Transform(top_chamfer_edge.EndPoint).X < (toviewmatrix.Transform(main_part.GetSolid().MinimumPoint).X + toviewmatrix.Transform(main_part.GetSolid().MaximumPoint).X) / 2)
                {
                    if(toviewmatrix.Transform(top_chamfer_edge.StartPoint).X < toviewmatrix.Transform(top_chamfer_edge.EndPoint).X)
                    {
                        if(toviewmatrix.Transform(top_chamfer_edge.StartPoint).Y < ref_pt.Y)
                        {
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.StartPoint));
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.EndPoint + new TSG.Point(0,(width/2),0)));
                            dimset.CreateDimensionSet(current_view, mypt, new TSG.Vector(-1, 0, 0), 40, dim_font_height);
                        }
                        else
                        {
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.StartPoint));
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.EndPoint - new TSG.Point(0, (width / 2), 0)));
                            dimset.CreateDimensionSet(current_view, mypt, new TSG.Vector(-1, 0, 0), 40, dim_font_height);
                        }
                        
                    }
                    else
                    {
                        if (toviewmatrix.Transform(top_chamfer_edge.EndPoint).Y < ref_pt.Y)
                        {
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.EndPoint));
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.StartPoint + new TSG.Point(0, (width / 2) , 0)));
                            dimset.CreateDimensionSet(current_view, mypt, new TSG.Vector(-1, 0, 0), 40, dim_font_height);
                        }
                        else
                        {
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.EndPoint));
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.StartPoint - new TSG.Point(0, (width / 2), 0)));
                            dimset.CreateDimensionSet(current_view, mypt, new TSG.Vector(-1, 0, 0), 40, dim_font_height);
                        }
                    }    
                    
                }
                else
                {
                    if (toviewmatrix.Transform(top_chamfer_edge.StartPoint).X < toviewmatrix.Transform(top_chamfer_edge.EndPoint).X)
                    {
                        if (toviewmatrix.Transform(top_chamfer_edge.EndPoint).Y < ref_pt.Y)
                        {
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.EndPoint));
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.StartPoint + new TSG.Point(0, (width / 2),0)));
                            dimset.CreateDimensionSet(current_view, mypt, new TSG.Vector(1, 0, 0), 40, dim_font_height);
                        }
                        else
                        {
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.EndPoint));
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.StartPoint - new TSG.Point(0, (width / 2), 0)));
                            dimset.CreateDimensionSet(current_view, mypt, new TSG.Vector(1, 0, 0), 40, dim_font_height);
                        }

                    }
                    else
                    {
                        if (toviewmatrix.Transform(top_chamfer_edge.StartPoint).Y < ref_pt.Y)
                        {
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.StartPoint));
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.EndPoint + new TSG.Point(0, (width / 2), 0)));
                            dimset.CreateDimensionSet(current_view, mypt, new TSG.Vector(1, 0, 0), 40, dim_font_height);
                        }
                        else
                        {
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.StartPoint));
                            mypt.Add(toviewmatrix.Transform(top_chamfer_edge.EndPoint - new TSG.Point(0, (width / 2), 0)));
                            dimset.CreateDimensionSet(current_view, mypt, new TSG.Vector(1, 0, 0), 40, dim_font_height);
                        }
                    }
                    
                }

                //TSD.AngleDimension angleDimension = new AngleDimension(current_view as TSD.ViewBase, toviewmatrix.Transform(top_chamfer_edge.StartPoint),
                //                                                        new TSG.Point((toviewmatrix.Transform(top_chamfer_edge.StartPoint).X + toviewmatrix.Transform(top_chamfer_edge.EndPoint).X) / 2,
                //                                                        (toviewmatrix.Transform(top_chamfer_edge.StartPoint).Y + toviewmatrix.Transform(top_chamfer_edge.EndPoint).Y) / 2),
                //                                                        toviewmatrix.Transform(top_chamfer_edge.EndPoint), 50);

                //angleDimension.Insert();
                //angleDimension.Attributes.Arrowhead.Head = ArrowheadTypes.NoArrow;
                //angleDimension.Attributes.Color = DrawingColors.Green;
                //angleDimension.Modify();
                //Creating a section view for bottmom flange cut
                AssemblyDrawing beam_dwg = current_view.GetDrawing() as AssemblyDrawing;
                DrawingObjectEnumerator drawingObjectEnumerator = beam_dwg.GetSheet().GetAllViews();
                while (drawingObjectEnumerator.MoveNext())
                {
                    TSD.View view = drawingObjectEnumerator.Current as TSD.View;
                    if (view != null && view.ViewType == TSD.View.ViewTypes.FrontView)
                    {
                        TSD.View section_view = null;
                        TSD.SectionMark sec = null;
                        TSG.Matrix toviewmatrix1 = TSG.MatrixFactory.ToCoordinateSystem(view.DisplayCoordinateSystem);
                        TSG.Point TP1 = toviewmatrix1.Transform(btm_chamfer_edge.StartPoint + new TSG.Point(0,width/2,0));
                        TSG.Point TP2 = toviewmatrix1.Transform(btm_chamfer_edge.EndPoint + new TSG.Point(0, width / 2, 0));
                        TSG.Point P1 = new TSG.Point();
                        TSG.Point P2 = new TSG.Point();
                        if (TP1.X > TP2.X)
                        {
                            P1 = TP1 + new TSG.Point(150, 40, 0);
                            P2 = TP2 - new TSG.Point(150, -40, 0);
                        }
                        else
                        {
                            P1 = TP2 + new TSG.Point(150, 0, 0);
                            P2 = TP1 - new TSG.Point(150, 0, 0);
                        }



                        bool result = TSD.View.CreateSectionView(view, P1, P2, new TSG.Point(current_view.ExtremaCenter.X, 0, 0), 280, 280, new TSD.View.ViewAttributes("SK_BEAM_A1"), new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out section_view, out sec);
                        section_view.Attributes.LoadAttributes("SK_BEAM_A1");
                        section_view.Modify();
                        TSG.Matrix toviewmatrix2 = TSG.MatrixFactory.ToCoordinateSystem(section_view.DisplayCoordinateSystem);

                        TSD.FontAttributes FONT = new TSD.FontAttributes();
                        FONT.Color = TSD.DrawingColors.Magenta;
                        FONT.Height = Convert.ToInt16(3.96875);

                        TSD.TextElement textelement2 = new TSD.TextElement(sec.Attributes.MarkName, FONT);
                        TSD.TextElement textelement3 = new TSD.TextElement("-", FONT);
                        TSD.ContainerElement sectionmark = new TSD.ContainerElement { textelement2, textelement3, textelement2 };



                        sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                        sec.Attributes.TagsAttributes.TagA1 = new TSD.SectionMarkBase.SectionMarkTagAttributes(TSD.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides, TSD.TagLocation.AboveLine, new TSG.Vector(1, 0, 0), TSD.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal, new TSD.ContainerElement { textelement2 });

                        section_view.Attributes.TagsAttributes.TagA1 = new TSD.View.ViewMarkTagAttributes(new TSG.Vector(1, 0, 0), TSD.TagLocation.AboveLine, TSD.TextAlignment.Center, sectionmark);
                        section_view.Attributes.LabelPositionVertical = TSD.View.VerticalLabelPosition.Bottom;
                        section_view.Attributes.MarkSymbolColor = TSD.DrawingColors.Magenta;
                        sec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;
                        sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                        section_view.Modify();
                        Type[] type_for_dim = new Type[] { typeof(TSD.StraightDimension), typeof(TSD.StraightDimensionSet), /*typeof(TSD.AngleDimension),*/ typeof(TSD.Mark) };
                        TSD.DrawingObjectEnumerator dim_drg = section_view.GetAllObjects(type_for_dim);
                        while (dim_drg.MoveNext())
                        {
                            var obj = dim_drg.Current;
                            obj.Delete();

                        }


                        //Creating cut dimwnsions based upon flange cut location at bottom flange

                        TSG.Point ref_pt1 = toviewmatrix2.Transform(main_part.GetCoordinateSystem().Origin);
                        PointList mypt1 = new PointList();


                        if (toviewmatrix2.Transform(btm_chamfer_edge.StartPoint).Y > ref_pt1.Y && toviewmatrix2.Transform(btm_chamfer_edge.EndPoint).Y > ref_pt1.Y)
                        {
                            mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.StartPoint));
                            mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.EndPoint));
                            dimset.CreateDimensionSet(section_view, mypt1, new TSG.Vector(0, 1, 0), 40, dim_font_height);
                        }
                        else
                        {
                            mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.StartPoint));
                            mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.EndPoint));
                            dimset.CreateDimensionSet(section_view, mypt1, new TSG.Vector(0, -1, 0), 40, dim_font_height);
                        }

                        mypt1.Clear();

                        if (toviewmatrix2.Transform(btm_chamfer_edge.StartPoint).X < (toviewmatrix2.Transform(main_part.GetSolid().MinimumPoint).X + toviewmatrix2.Transform(main_part.GetSolid().MaximumPoint).X) / 2
                                 && toviewmatrix2.Transform(btm_chamfer_edge.EndPoint).X < (toviewmatrix2.Transform(main_part.GetSolid().MinimumPoint).X + toviewmatrix2.Transform(main_part.GetSolid().MaximumPoint).X) / 2)
                        {
                            if (toviewmatrix2.Transform(btm_chamfer_edge.StartPoint).X < toviewmatrix2.Transform(btm_chamfer_edge.EndPoint).X)
                            {
                                if (toviewmatrix2.Transform(btm_chamfer_edge.StartPoint).Y < ref_pt1.Y)
                                {
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.StartPoint));
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.EndPoint + new TSG.Point(0, (width / 2), 0)));
                                    dimset.CreateDimensionSet(section_view, mypt1, new TSG.Vector(-1, 0, 0), 40, dim_font_height);
                                }
                                else
                                {
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.StartPoint));
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.EndPoint - new TSG.Point(0, (width / 2), 0)));
                                    dimset.CreateDimensionSet(section_view, mypt1, new TSG.Vector(-1, 0, 0), 40, dim_font_height);
                                }

                            }
                            else
                            {
                                if (toviewmatrix2.Transform(btm_chamfer_edge.EndPoint).Y < ref_pt1.Y)
                                {
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.EndPoint));
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.StartPoint + new TSG.Point(0, (width / 2), 0)));
                                    dimset.CreateDimensionSet(section_view, mypt1, new TSG.Vector(-1, 0, 0), 40, dim_font_height);
                                }
                                else
                                {
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.EndPoint));
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.StartPoint - new TSG.Point(0, (width / 2), 0)));
                                    dimset.CreateDimensionSet(section_view, mypt1, new TSG.Vector(-1, 0, 0), 40, dim_font_height);
                                }
                            }

                        }
                        else
                        {
                            if (toviewmatrix2.Transform(btm_chamfer_edge.StartPoint).X < toviewmatrix2.Transform(btm_chamfer_edge.EndPoint).X)
                            {
                                if (toviewmatrix2.Transform(btm_chamfer_edge.EndPoint).Y < ref_pt1.Y)
                                {
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.EndPoint));
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.StartPoint + new TSG.Point(0, (width / 2), 0)));
                                    dimset.CreateDimensionSet(section_view, mypt1, new TSG.Vector(1, 0, 0), 40, dim_font_height);
                                }
                                else
                                {
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.EndPoint));
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.StartPoint - new TSG.Point(0, (width / 2), 0)));
                                    dimset.CreateDimensionSet(section_view, mypt1, new TSG.Vector(1, 0, 0), 40, dim_font_height);
                                }

                            }
                            else
                            {
                                if (toviewmatrix2.Transform(btm_chamfer_edge.StartPoint).Y < ref_pt1.Y)
                                {
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.StartPoint));
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.EndPoint + new TSG.Point(0, (width / 2), 0)));
                                    dimset.CreateDimensionSet(section_view, mypt1, new TSG.Vector(1, 0, 0), 40, dim_font_height);
                                }
                                else
                                {
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.StartPoint));
                                    mypt1.Add(toviewmatrix2.Transform(btm_chamfer_edge.EndPoint - new TSG.Point(0, (width / 2), 0)));
                                    dimset.CreateDimensionSet(section_view, mypt1, new TSG.Vector(1, 0, 0), 40, dim_font_height);
                                }
                            }

                        }


                        //ON centreline
                        section_view.GetDrawing().CommitChanges();
                        Type type_for_part = typeof(TSD.Part);
                        TSD.DrawingObjectEnumerator drawingObjectEnumerator1 = section_view.GetAllObjects(type_for_part);
                        while (drawingObjectEnumerator1.MoveNext())
                        {
                            TSD.Part part = drawingObjectEnumerator1.Current as TSD.Part;
                            if (part != null)
                            {
                                if ((MyModel.SelectModelObject(part.ModelIdentifier) as TSM.Part).Identifier.GUID.ToString() == main_part.Identifier.GUID.ToString())
                                {
                                    part.Attributes.DrawCenterLine = true;
                                    part.Attributes.DrawOrientationMark = false;
                                    part.Attributes.SymbolOffset = 0;
                                    part.Modify();
                                    section_view.Modify();
                                    section_view.GetDrawing().CommitChanges();
                                }

                            }

                        }


                        TSD.AngleDimension angleDimension1 = null;

                        //if(toviewmatrix2.Transform(btm_chamfer_edge.StartPoint).X> toviewmatrix2.Transform(btm_chamfer_edge.EndPoint).X)
                        //{
                        //    angleDimension1 = new AngleDimension(section_view as TSD.ViewBase, new TSG.Point(toviewmatrix2.Transform(btm_chamfer_edge.EndPoint).X, toviewmatrix2.Transform(top_chamfer_edge.StartPoint).Y), 
                        //                                        toviewmatrix2.Transform(top_chamfer_edge.StartPoint),
                        //                                        toviewmatrix2.Transform(btm_chamfer_edge.EndPoint), 50);
                        //}
                        //else
                        //{
                        //    angleDimension1 = new AngleDimension(section_view as TSD.ViewBase, new TSG.Point(toviewmatrix2.Transform(btm_chamfer_edge.StartPoint).X, toviewmatrix2.Transform(top_chamfer_edge.EndPoint).Y),
                        //                                         toviewmatrix2.Transform(top_chamfer_edge.StartPoint),
                        //                                         toviewmatrix2.Transform(btm_chamfer_edge.EndPoint), 50);
                        //}

                        //angleDimension1.Insert();
                        //angleDimension1.Attributes.Arrowhead.Head = ArrowheadTypes.NoArrow;
                        //angleDimension1.Attributes.Color = DrawingColors.Green;
                        //angleDimension1.Modify();



                    }
                }

            }


           
              











        }
        public void Create_FLANGE_CUT_dimensions_top(TSD.View current_view, TSM.Beam main_part,string drg_att)
        {

            TSD.StraightDimensionSet.StraightDimensionSetAttributes dim_font_height = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            dim_font_height.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    dim_font_height.Text.Font.Height = 3.571875;
                }
                else
                {
                    dim_font_height.Text.Font.Height = 3.175;
                }
            } 
            else
            {
                dim_font_height.Text.Font.Height = 2.38125;


            }
            TSD.StraightDimensionSetHandler dimset = new TSD.StraightDimensionSetHandler();



            if (current_view != null)
            {

                ArrayList values = Getcatalog_values(main_part);
                double size1_m = Convert.ToDouble(values[0]);
                double size2_m = Convert.ToDouble(values[1]);
                TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.DisplayCoordinateSystem);
                Type type_for_contourplate = typeof(TSM.ContourPlate);
                double size = 0;
                double output = 0;
                main_part.GetReportProperty("LENGTH", ref output);
                double DEPTH = Convert.ToDouble(current_view.Width.Equals(current_view.RestrictionBox.MaxPoint.X));
                if ((current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView)))
                {
                    size = size1_m / 2;
                }
                else
                {
                    size = size2_m / 2;
                }

                //////copedimesnison/////
                Type bolpart = typeof(TSM.BooleanPart);
                Type fit = typeof(TSM.Fitting);
                TSM.ModelObjectEnumerator test_bool = main_part.GetBooleans();
                ArrayList cuts = new ArrayList();
                TSG.Point fittrans_origin = new TSG.Point();
                double workpoint = output;
                TSG.Point point1 = new TSG.Point();
                TSG.Point point2 = new TSG.Point();
                TSG.Point point3 = new TSG.Point();
                TSG.Point point4 = new TSG.Point();
                while (test_bool.MoveNext())
                {
                    int d = 0;
                    ArrayList pts_in_viewco = new ArrayList();
                    var partcut = test_bool.Current;
                    //if (partcut.GetType().Equals(fit))
                    ////{
                    ////    TSM.Fitting fitobj = partcut as TSM.Fitting;
                    ////    TSG.Point origin = fitobj.Plane.Origin;


                    ////    fittrans_origin = toviewmatrix.Transform(origin);
                    ////    if (fittrans_origin.X != 0)
                    ////    {
                    ////        workpoint = fittrans_origin.X;
                    ////    }

                    //}
                    if (partcut.GetType().Equals(bolpart))
                    {


                        TSM.BooleanPart fitobj = partcut as TSM.BooleanPart;

                        if (fitobj.OperativePart.GetType().Equals(type_for_contourplate))
                        {
                            TSM.ContourPlate platecut = fitobj.OperativePart as TSM.ContourPlate;
                            ArrayList pts = platecut.Contour.ContourPoints;
                            ArrayList x_list = new ArrayList();
                            ArrayList y_list = new ArrayList();
                            ArrayList z_list = new ArrayList();
                            foreach (TSG.Point bolpart_point in pts)
                            {
                                TSG.Point tran_point = toviewmatrix.Transform(bolpart_point);
                                pts_in_viewco.Add(tran_point);

                            }
                            if (Convert.ToInt16((pts_in_viewco[0] as TSG.Point).Y) != Convert.ToInt16((pts_in_viewco[2] as TSG.Point).Y))
                            {
                                foreach (TSG.Point pt in pts_in_viewco)
                                {


                                    x_list.Add(pt.X);
                                    y_list.Add(pt.Y);
                                    z_list.Add(pt.Z);

                                }

                                x_list.Sort();
                                y_list.Sort();
                                z_list.Sort();
                                ////////////////////Lower boolean dim///////////////////
                                TSG.Point pt1 = new TSG.Point();
                                TSG.Point pt2 = new TSG.Point();
                                TSG.Point pt3 = new TSG.Point();
                                TSG.Point pt4 = new TSG.Point();
                                TSG.Vector dim_vect_for_x_dim = new TSG.Vector();
                                TSG.Vector dim_vect_for_y_dim = new TSG.Vector();

                                //////////Third quadrant/////////////////////////





                                #region top_VIEW_DIM
                                if (Convert.ToInt64(z_list[0]) > 0)
                                {



                                    if ((Convert.ToInt16(y_list[0]) <= 0) && ((Convert.ToInt16(x_list[0]) <= 0)))
                                    {

                                        pt1 = new TSG.Point(0, 0, 0);
                                        pt2 = new TSG.Point(0, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                        pt3 = new TSG.Point(Convert.ToInt16(x_list[x_list.Count - 1]), -size, 0);
                                        pt4 = new TSG.Point(0, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                        dim_vect_for_x_dim = new TSG.Vector(0, -1, 0);
                                        dim_vect_for_y_dim = new TSG.Vector(-1, 0, 0);

                                    }
                                    //////////Second quadrant//////////////////////////
                                    else if ((Convert.ToInt16(x_list[0]) <= 0) && ((Convert.ToInt16(y_list[0]) >= 0)))
                                    {
                                        pt1 = new TSG.Point(0, 0, 0);
                                        pt2 = new TSG.Point(0, Convert.ToInt16(y_list[0]), 0);
                                        pt3 = new TSG.Point(Convert.ToInt16(x_list[x_list.Count - 1]), size, 0);
                                        point2 = pt1;
                                        pt4 = new TSG.Point(0, Convert.ToInt16(y_list[0]), 0);
                                        dim_vect_for_x_dim = new TSG.Vector(0, 1, 0);
                                        dim_vect_for_y_dim = new TSG.Vector(-1, 0, 0);

                                    }
                                    /////////Fourth Quadrant////////////////////////////
                                    else if ((Convert.ToInt16(x_list[0]) >= 0) && ((Convert.ToInt16(y_list[0]) <= 0)))
                                    {
                                        pt1 = new TSG.Point(workpoint, 0, 0);
                                        pt3 = new TSG.Point(Convert.ToInt16(x_list[0]), Convert.ToInt16(y_list[0]), 0);
                                        pt2 = new TSG.Point(workpoint, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                        pt4 = new TSG.Point(workpoint, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                        dim_vect_for_x_dim = new TSG.Vector(0, -1, 0);
                                        dim_vect_for_y_dim = new TSG.Vector(1, 0, 0);


                                    }
                                    //////////////First Quadrant////////////////
                                    else if ((Convert.ToInt16(x_list[0]) >= 0) && ((Convert.ToInt16(y_list[0]) >= 0)))
                                    {
                                        pt1 = new TSG.Point(workpoint, 0, 0);
                                        pt3 = new TSG.Point(Convert.ToInt16(x_list[0]), size, 0);
                                        pt2 = new TSG.Point(workpoint, Convert.ToInt16(y_list[0]), 0);
                                        pt4 = new TSG.Point(workpoint, Convert.ToInt16(y_list[0]), 0);
                                        point3 = pt1;
                                        dim_vect_for_x_dim = new TSG.Vector(0, 1, 0);
                                        dim_vect_for_y_dim = new TSG.Vector(1, 0, 0);


                                    }

                                    if (Convert.ToInt64(z_list[0]) > 0)
                                    {
                                        if ((pt2.X < current_view.RestrictionBox.MaxPoint.X) && (pt1.X > current_view.RestrictionBox.MinPoint.X))
                                        {
                                            TSD.PointList mypt = new TSD.PointList();
                                            mypt.Add(pt2);
                                            mypt.Add(pt3);
                                            try
                                            {
                                                dimset.CreateDimensionSet(current_view, mypt, dim_vect_for_x_dim, 200 + d, dim_font_height);
                                            }
                                            catch
                                            { 
                                            }
                                            TSD.PointList mypt1 = new TSD.PointList();
                                            mypt1.Add(pt1);
                                            mypt1.Add(pt4);
                                            try
                                            {
                                                dimset.CreateDimensionSet(current_view, mypt, dim_vect_for_y_dim, 200, dim_font_height);
                                            }
                                            catch
                                            { 
                                            }



                                            //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt2, pt3, dim_vect_for_x_dim, 200 + d,dim_font_height);
                                            //bool_dim_x.Insert();




                                            //TSD.StraightDimension bool_dim_y = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt4, dim_vect_for_y_dim, 200,dim_font_height);
                                            //bool_dim_y.Insert();
                                        }
                                    }
                                    if (Convert.ToInt64(z_list[0]) < 0)
                                    {
                                        //if (pt2.X > output / 2)
                                        //{
                                        //    TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt2, pt3, dim_vect_for_x_dim, 200 + d,dim_font_height);
                                        //    bool_dim_x.Insert();

                                        //    TSD.StraightDimension bool_dim_y = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt4, dim_vect_for_y_dim, 200,dim_font_height);
                                        //    bool_dim_y.Insert();
                                        //}

                                       
                                        TSD.PointList mypt = new TSD.PointList();
                                        mypt.Add(pt2);
                                        mypt.Add(pt3);
                                        try
                                        {
                                            dimset.CreateDimensionSet(current_view, mypt, dim_vect_for_x_dim, 200 + d, dim_font_height);
                                        }
                                        catch
                                        { 
                                        }

                                        TSD.PointList mypt1 = new TSD.PointList();
                                        mypt1.Add(pt1);
                                        mypt1.Add(pt4);
                                        try
                                        {
                                            dimset.CreateDimensionSet(current_view, mypt, dim_vect_for_y_dim, 200, dim_font_height);
                                        }
                                        catch
                                        { 
                                        }
                                        //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt2, pt3, dim_vect_for_x_dim, 200 + d,dim_font_height);
                                        //bool_dim_x.Insert();




                                        //TSD.StraightDimension bool_dim_y = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt4, dim_vect_for_y_dim, 200,dim_font_height);
                                        //bool_dim_y.Insert();

                                    }




                                    ////////////////
                                }
                                # endregion
                            }
                        }

                        cuts.Add(partcut);
                        TSG.Point fittrans_origin1 = toviewmatrix.Transform(main_part.EndPoint);
                    }
                    else
                    {
                        point2 = new TSG.Point(0, size1_m / 2, 0);
                        point3 = new TSG.Point(output, size1_m / 2, 0);
                    }
                    d = d + 100;
                }

            }


        }
        public void Create_FLANGE_CUT_dimensions_top_view(TSD.View current_view, TSM.Beam main_part)
        {
            if (current_view != null)
            {

                ArrayList values = Getcatalog_values(main_part);
                double size1_m = Convert.ToDouble(values[0]);
                double size2_m = Convert.ToDouble(values[1]);
                TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.DisplayCoordinateSystem);
                Type type_for_contourplate = typeof(TSM.ContourPlate);
                double size = 0;
                double output = 0;
                main_part.GetReportProperty("LENGTH", ref output);
                double DEPTH = Convert.ToDouble(current_view.Width.Equals(current_view.RestrictionBox.MaxPoint.X));
                if ((current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView)))
                {
                    size = size1_m / 2;
                }
                else
                {
                    size = size2_m / 2;
                }

                //////copedimesnison/////
                Type bolpart = typeof(TSM.BooleanPart);
                Type fit = typeof(TSM.Fitting);
                TSM.ModelObjectEnumerator test_bool = main_part.GetBooleans();
                ArrayList cuts = new ArrayList();
                TSG.Point fittrans_origin = new TSG.Point();
                double workpoint = output;
                TSG.Point point1 = new TSG.Point();
                TSG.Point point2 = new TSG.Point();
                TSG.Point point3 = new TSG.Point();
                TSG.Point point4 = new TSG.Point();
                while (test_bool.MoveNext())
                {
                    int d = 0;
                    ArrayList pts_in_viewco = new ArrayList();
                    var partcut = test_bool.Current;
                    //if (partcut.GetType().Equals(fit))
                    ////{
                    ////    TSM.Fitting fitobj = partcut as TSM.Fitting;
                    ////    TSG.Point origin = fitobj.Plane.Origin;


                    ////    fittrans_origin = toviewmatrix.Transform(origin);
                    ////    if (fittrans_origin.X != 0)
                    ////    {
                    ////        workpoint = fittrans_origin.X;
                    ////    }

                    //}
                    if (partcut.GetType().Equals(bolpart))
                    {


                        TSM.BooleanPart fitobj = partcut as TSM.BooleanPart;

                        if (fitobj.OperativePart.GetType().Equals(type_for_contourplate))
                        {
                            TSM.ContourPlate platecut = fitobj.OperativePart as TSM.ContourPlate;
                            ArrayList pts = platecut.Contour.ContourPoints;
                            ArrayList x_list = new ArrayList();
                            ArrayList y_list = new ArrayList();
                            ArrayList z_list = new ArrayList();
                            foreach (TSG.Point bolpart_point in pts)
                            {
                                TSG.Point tran_point = toviewmatrix.Transform(bolpart_point);
                                pts_in_viewco.Add(tran_point);

                            }
                            if (Convert.ToInt16((pts_in_viewco[0] as TSG.Point).Y) != Convert.ToInt16((pts_in_viewco[2] as TSG.Point).Y))
                            {
                                foreach (TSG.Point pt in pts_in_viewco)
                                {


                                    x_list.Add(pt.X);
                                    y_list.Add(pt.Y);
                                    z_list.Add(pt.Z);

                                }

                                x_list.Sort();
                                y_list.Sort();
                                z_list.Sort();
                                ////////////////////Lower boolean dim///////////////////
                                TSG.Point pt1 = new TSG.Point();
                                TSG.Point pt2 = new TSG.Point();
                                TSG.Point pt3 = new TSG.Point();
                                TSG.Point pt4 = new TSG.Point();
                                TSG.Vector dim_vect_for_x_dim = new TSG.Vector();
                                TSG.Vector dim_vect_for_y_dim = new TSG.Vector();

                                //////////Third quadrant/////////////////////////





                                #region top_VIEW_DIM
                                if (Convert.ToInt64(z_list[0]) > 0)
                                {



                                    if ((Convert.ToInt16(y_list[0]) <= 0) && ((Convert.ToInt16(x_list[0]) <= 0)))
                                    {

                                        pt1 = new TSG.Point(0, 0, 0);
                                        pt2 = new TSG.Point(0, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                        pt3 = new TSG.Point(Convert.ToInt16(x_list[x_list.Count - 1]), -size, 0);
                                        pt4 = new TSG.Point(0, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                        dim_vect_for_x_dim = new TSG.Vector(0, -1, 0);
                                        dim_vect_for_y_dim = new TSG.Vector(-1, 0, 0);

                                    }
                                    //////////Second quadrant//////////////////////////
                                    else if ((Convert.ToInt16(x_list[0]) <= 0) && ((Convert.ToInt16(y_list[0]) >= 0)))
                                    {
                                        pt1 = new TSG.Point(0, 0, 0);
                                        pt2 = new TSG.Point(0, Convert.ToInt16(y_list[0]), 0);
                                        pt3 = new TSG.Point(Convert.ToInt16(x_list[x_list.Count - 1]), size, 0);
                                        point2 = pt1;
                                        pt4 = new TSG.Point(0, Convert.ToInt16(y_list[0]), 0);
                                        dim_vect_for_x_dim = new TSG.Vector(0, 1, 0);
                                        dim_vect_for_y_dim = new TSG.Vector(-1, 0, 0);

                                    }
                                    /////////Fourth Quadrant////////////////////////////
                                    else if ((Convert.ToInt16(x_list[0]) >= 0) && ((Convert.ToInt16(y_list[0]) <= 0)))
                                    {
                                        pt1 = new TSG.Point(workpoint, 0, 0);
                                        pt3 = new TSG.Point(Convert.ToInt16(x_list[0]), Convert.ToInt16(y_list[0]), 0);
                                        pt2 = new TSG.Point(workpoint, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                        pt4 = new TSG.Point(workpoint, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                        dim_vect_for_x_dim = new TSG.Vector(0, -1, 0);
                                        dim_vect_for_y_dim = new TSG.Vector(1, 0, 0);


                                    }
                                    //////////////First Quadrant////////////////
                                    else if ((Convert.ToInt16(x_list[0]) >= 0) && ((Convert.ToInt16(y_list[0]) >= 0)))
                                    {
                                        pt1 = new TSG.Point(workpoint, 0, 0);
                                        pt3 = new TSG.Point(Convert.ToInt16(x_list[0]), size, 0);
                                        pt2 = new TSG.Point(workpoint, Convert.ToInt16(y_list[0]), 0);
                                        pt4 = new TSG.Point(workpoint, Convert.ToInt16(y_list[0]), 0);
                                        point3 = pt1;
                                        dim_vect_for_x_dim = new TSG.Vector(0, 1, 0);
                                        dim_vect_for_y_dim = new TSG.Vector(1, 0, 0);


                                    }

                                    if (Convert.ToInt64(z_list[0]) > 0)
                                    {
                                        if ((pt2.X < current_view.RestrictionBox.MaxPoint.X) && (pt1.X > current_view.RestrictionBox.MinPoint.X))
                                        {
                                            TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt2, pt3, dim_vect_for_x_dim, 200 + d);
                                            bool_dim_x.Insert();




                                            TSD.StraightDimension bool_dim_y = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt4, dim_vect_for_y_dim, 200);
                                            bool_dim_y.Insert();
                                        }
                                    }
                                  




                                    ////////////////
                                }
                                # endregion
                            }
                        }

                        cuts.Add(partcut);
                        TSG.Point fittrans_origin1 = toviewmatrix.Transform(main_part.EndPoint);
                    }
                    else
                    {
                        point2 = new TSG.Point(0, size1_m / 2, 0);
                        point3 = new TSG.Point(output, size1_m / 2, 0);
                    }
                    d = d + 100;
                }

            }


        }

        public void Create_FLANGE_CUT_dimensions_bottom(TSD.View current_view, TSM.Beam main_part,string drg_att)
        {

            TSD.StraightDimensionSetHandler dimset = new TSD.StraightDimensionSetHandler();


            ArrayList values = Getcatalog_values(main_part);
            double size1_m = Convert.ToDouble(values[0]);
            double size2_m = Convert.ToDouble(values[1]);
            double size3_m = Convert.ToDouble(values[2]);
            long half_flange = Convert.ToInt64(size2_m / 2);
            long half_s_value = Convert.ToInt64(size3_m / 2);
            long cut_chip_value = half_flange - half_s_value;
            long check_for_flange_cut_and_chip = half_flange - cut_chip_value;
            TSD.StraightDimensionSet.StraightDimensionSetAttributes rd_att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            rd_att.ShortDimension = TSD.DimensionSetBaseAttributes.ShortDimensionTypes.Inside;
            rd_att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    rd_att.Text.Font.Height = 3.571875;
                }
                else
                {
                    rd_att.Text.Font.Height = 3.175;
                }
            } 
            else
            {
                rd_att.Text.Font.Height = 2.38125;


            }
            
    

            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.DisplayCoordinateSystem);
            Type type_for_contourplate = typeof(TSM.ContourPlate);
            double size = 0;
            double output = 0;
            main_part.GetReportProperty("LENGTH", ref output);
            double DEPTH = Convert.ToDouble(current_view.Width.Equals(current_view.RestrictionBox.MaxPoint.X));
            if ((current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView)))
            {
                size = size1_m / 2;
            }
            else
            {
                size = size2_m / 2;
            }

            //////copedimesnison/////
            Type bolpart = typeof(TSM.BooleanPart);
            Type fit = typeof(TSM.Fitting);
            TSM.ModelObjectEnumerator test_bool = main_part.GetBooleans();
            ArrayList cuts = new ArrayList();
            TSG.Point fittrans_origin = new TSG.Point();
            double workpoint = output;
            TSG.Point point1 = new TSG.Point();
            TSG.Point point2 = new TSG.Point();
            TSG.Point point3 = new TSG.Point();
            TSG.Point point4 = new TSG.Point();
            while (test_bool.MoveNext())
            {
                int d = 0;
                ArrayList pts_in_viewco = new ArrayList();
                var partcut = test_bool.Current;

                if (partcut.GetType().Equals(bolpart))
                {


                    TSM.BooleanPart fitobj = partcut as TSM.BooleanPart;

                    if (fitobj.OperativePart.GetType().Equals(type_for_contourplate))
                    {
                        TSM.ContourPlate platecut = fitobj.OperativePart as TSM.ContourPlate;
                        ArrayList pts = platecut.Contour.ContourPoints;
                        ArrayList x_list = new ArrayList();
                        ArrayList y_list = new ArrayList();
                        ArrayList z_list = new ArrayList();
                        foreach (TSG.Point bolpart_point in pts)
                        {
                            TSG.Point tran_point = toviewmatrix.Transform(bolpart_point);
                            pts_in_viewco.Add(tran_point);

                        }
                        if (Convert.ToInt16((pts_in_viewco[0] as TSG.Point).Y) != Convert.ToInt16((pts_in_viewco[2] as TSG.Point).Y))
                        {
                            foreach (TSG.Point pt in pts_in_viewco)
                            {


                                x_list.Add(pt.X);
                                y_list.Add(pt.Y);
                                z_list.Add(pt.Z);

                            }

                            x_list.Sort();
                            y_list.Sort();
                            z_list.Sort();
                            ////////////////////Lower boolean dim///////////////////
                            TSG.Point pt1 = new TSG.Point();
                            TSG.Point pt2 = new TSG.Point();
                            TSG.Point pt3 = new TSG.Point();
                            TSG.Point pt4 = new TSG.Point();
                            TSG.Vector dim_vect_for_x_dim = new TSG.Vector();
                            TSG.Vector dim_vect_for_y_dim = new TSG.Vector();

                            //////////Third quadrant/////////////////////////
                            #region BOTTOM_VIEW_DIM
                            if (Convert.ToInt16(z_list[0]) < 0)
                            {



                                if ((Convert.ToInt16(y_list[0]) <= 0) && ((Convert.ToInt16(x_list[0]) <= 0)))
                                {

                                    pt1 = new TSG.Point(0, 0, 0);
                                    pt2 = new TSG.Point(0, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                    pt3 = new TSG.Point(Convert.ToInt16(x_list[x_list.Count - 1]), -size, 0);
                                    pt4 = new TSG.Point(0, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                    dim_vect_for_x_dim = new TSG.Vector(0, -1, 0);
                                    dim_vect_for_y_dim = new TSG.Vector(-1, 0, 0);

                                }
                                //////////Second quadrant//////////////////////////
                                else if ((Convert.ToInt16(x_list[0]) <= 0) && ((Convert.ToInt16(y_list[0]) >= 0)))
                                {
                                    pt1 = new TSG.Point(0, 0, 0);
                                    pt2 = new TSG.Point(0, Convert.ToInt16(y_list[0]), 0);
                                    pt3 = new TSG.Point(Convert.ToInt16(x_list[x_list.Count - 1]), size, 0);
                                    point2 = pt1;
                                    pt4 = new TSG.Point(0, Convert.ToInt16(y_list[0]), 0);
                                    dim_vect_for_x_dim = new TSG.Vector(0, 1, 0);
                                    dim_vect_for_y_dim = new TSG.Vector(-1, 0, 0);

                                }
                                /////////Fourth Quadrant////////////////////////////
                                else if ((Convert.ToInt16(x_list[0]) >= 0) && ((Convert.ToInt16(y_list[0]) <= 0)))
                                {
                                    pt1 = new TSG.Point(workpoint, 0, 0);
                                    pt3 = new TSG.Point(Convert.ToInt16(x_list[0]), Convert.ToInt16(y_list[0]), 0);
                                    pt2 = new TSG.Point(workpoint, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                    pt4 = new TSG.Point(workpoint, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                    dim_vect_for_x_dim = new TSG.Vector(0, -1, 0);
                                    dim_vect_for_y_dim = new TSG.Vector(1, 0, 0);


                                }
                                //////////////First Quadrant////////////////
                                else if ((Convert.ToInt16(x_list[0]) >= 0) && ((Convert.ToInt16(y_list[0]) >= 0)))
                                {
                                    pt1 = new TSG.Point(workpoint, 0, 0);
                                    pt3 = new TSG.Point(Convert.ToInt16(x_list[0]), size, 0);
                                    pt2 = new TSG.Point(workpoint, Convert.ToInt16(y_list[0]), 0);
                                    pt4 = new TSG.Point(workpoint, Convert.ToInt16(y_list[0]), 0);
                                    point3 = pt1;
                                    dim_vect_for_x_dim = new TSG.Vector(0, 1, 0);
                                    dim_vect_for_y_dim = new TSG.Vector(1, 0, 0);


                                }

                                double pt_to_pt_value = TSG.Distance.PointToPoint(pt1, pt4);

                                bool result_for_cut_chip = check_for_flange_cut_and_chip.Equals(Convert.ToInt64(pt_to_pt_value));


                                if (Convert.ToInt16(z_list[0]) > 0)
                                {
                                    if ((pt2.X < current_view.RestrictionBox.MaxPoint.X) && (pt1.X > current_view.RestrictionBox.MinPoint.X))
                                    {
                                        if (result_for_cut_chip == true)
                                        {


                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes myset = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                            myset.IncludePartCountInTag = false;
                                            myset.RightUpperTag.Clear();
                                            myset.RightLowerTag.Clear();
                                            TSD.TextElement mytext = new TSD.TextElement("");
                                            mytext.Value = "FLANGECUT &";
                                            TSD.TextElement mytext1 = new TSD.TextElement("");
                                            mytext1.Value = "CHIP";

                                            myset.RightUpperTag.Add(mytext);
                                            myset.RightLowerTag.Add(mytext1);
                                            myset.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;

                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                            {
                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                {
                                                    myset.Text.Font.Height = 3.571875;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.571875;
                                                    mytext1.Font.Color = TSD.DrawingColors.Green;
                                                    mytext1.Font.Height = 3.571875;
                                                }
                                                else
                                                {
                                                    myset.Text.Font.Height = 3.175;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.175;
                                                    mytext1.Font.Color = TSD.DrawingColors.Green;
                                                    mytext1.Font.Height = 3.175;
                                                }
                                            } 
                                            else
                                            {
                                                myset.Text.Font.Height = 2.38125;
                                                mytext.Font.Color = TSD.DrawingColors.Green;
                                                mytext.Font.Height = 2.38125;
                                                mytext1.Font.Color = TSD.DrawingColors.Green;
                                                mytext1.Font.Height = 2.38125;
                                            }

                                            TSD.PointList mypt = new TSD.PointList();
                                            mypt.Add(pt2);
                                            mypt.Add(pt3);
                                            try
                                            {
                                                dimset.CreateDimensionSet(current_view, mypt, dim_vect_for_x_dim, 200 + d, myset);
                                            }
                                            catch
                                            { 
                                            }
                                          
                                             

                                            //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt2, pt3, dim_vect_for_x_dim, 200 + d, rd_att);
                                            //TSD.TextElement text = new TSD.TextElement("(FLANGECUT & CHIP)");
                                            //text.Font.Color = TSD.DrawingColors.Green;
                                            //bool_dim_x.Attributes.DimensionValuePostfix.Add(text);
                                            //if (drg_att == "SK_BEAM_A1")
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 3.175;
                                            //}
                                            //else
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 2.38125;
 
                                            //}

                                            //bool_dim_x.Modify();

                                            //bool_dim_x.Insert();
                                     
                                      

                                        }

                                        if (result_for_cut_chip == false)
                                        {


                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes myset = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                            myset.RightUpperTag.Clear();
                                            myset.IncludePartCountInTag = false;
                                            TSD.TextElement mytext = new TSD.TextElement("");
                                            mytext.Value = "FLANGECUT &";
                                            myset.RightUpperTag.Add(mytext);
                                            myset.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;

                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                            {
                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                {
                                                    myset.Text.Font.Height = 3.571875;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.571875;
                                                }
                                                else
                                                {
                                                    myset.Text.Font.Height = 3.175;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.175;
                                                }

                                            }
                                            else
                                            {
                                                myset.Text.Font.Height = 2.38125;
                                                mytext.Font.Color = TSD.DrawingColors.Green;
                                                mytext.Font.Height = 2.38125;

                                            }

                                            TSD.PointList mypt = new TSD.PointList();
                                            mypt.Add(pt2);
                                            mypt.Add(pt3);
                                            try
                                            {
                                                dimset.CreateDimensionSet(current_view, mypt, dim_vect_for_x_dim, 200 + d, myset);
                                            }
                                            catch
                                            { 
                                            }





                                            //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt2, pt3, dim_vect_for_x_dim, 200 + d, rd_att);
                                         
                                            //TSD.TextElement text = new TSD.TextElement("(FLANGECUT)");
                                            //text.Font.Color = TSD.DrawingColors.Green;
                                            //bool_dim_x.Attributes.DimensionValuePostfix.Add(text);

                                            //if (drg_att == "SK_BEAM_A1")
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 3.175;
                                            //}
                                            //else
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 2.38125;

                                            //}
                                            //bool_dim_x.Modify();
                                            //bool_dim_x.Insert();
                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes myset1 = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                            myset1.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;

                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                            {
                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                {
                                                    myset1.Text.Font.Height = 3.571875;
                                                }
                                                else
                                                {
                                                    myset1.Text.Font.Height = 3.175;
                                                }
                                            }
                                            else
                                            {
                                                myset1.Text.Font.Height = 2.38125;


                                            }

                                            TSD.PointList mypt1 = new TSD.PointList();
                                            mypt1.Add(pt1);
                                            mypt1.Add(pt4);
                                            try
                                            {
                                                dimset.CreateDimensionSet(current_view, mypt1, dim_vect_for_y_dim, 200, myset1);
                                            }
                                            catch
                                            { 
                                            }


                                            //TSD.StraightDimension bool_dim_y = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt4, dim_vect_for_y_dim, 200, rd_att);
                                            //if (drg_att == "SK_BEAM_A1")
                                            //{
                                            //    bool_dim_y.GetDimensionSet().Attributes.Text.Font.Height = 3.175;
                                            //}
                                            //else
                                            //{
                                            //    bool_dim_y.GetDimensionSet().Attributes.Text.Font.Height = 2.38125;

                                            //}
                                           
                                            //bool_dim_y.Modify();
                                            //bool_dim_y.Insert();
                                        }
                                    }
                                }
                                if (Convert.ToInt16(z_list[0]) < 0)
                                {

                                    if ((pt2.X < current_view.RestrictionBox.MaxPoint.X) && (pt1.X >= current_view.RestrictionBox.MinPoint.X))
                                    {
                                        if (result_for_cut_chip == true)
                                        {


                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes myset = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                            myset.IncludePartCountInTag = false;
                                            myset.RightUpperTag.Clear();
                                            myset.RightLowerTag.Clear();
                                            TSD.TextElement mytext = new TSD.TextElement("");
                                            mytext.Value = "FLANGECUT &";
                                            TSD.TextElement mytext1 = new TSD.TextElement("");
                                            mytext1.Value = "CHIP";
                                            myset.RightUpperTag.Add(mytext);
                                            myset.RightLowerTag.Add(mytext1);
                                            myset.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;

                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                            {
                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                {
                                                    myset.Text.Font.Height = 3.571875;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.571875;
                                                    mytext1.Font.Color = TSD.DrawingColors.Green;
                                                    mytext1.Font.Height = 3.571875;
                                                }
                                                else
                                                {
                                                    myset.Text.Font.Height = 3.175;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.175;
                                                    mytext1.Font.Color = TSD.DrawingColors.Green;
                                                    mytext1.Font.Height = 3.175;
                                                }
                                            }
                                            else
                                            {
                                                myset.Text.Font.Height = 2.38125;
                                                mytext.Font.Color = TSD.DrawingColors.Green;
                                                mytext.Font.Height = 2.38125;
                                                mytext1.Font.Color = TSD.DrawingColors.Green;
                                                mytext1.Font.Height = 2.38125;
                                            }

                                            TSD.PointList mypt = new TSD.PointList();
                                            mypt.Add(pt2);
                                            mypt.Add(pt3);
                                            try
                                            {
                                                dimset.CreateDimensionSet(current_view, mypt, dim_vect_for_x_dim, 200 + d, myset);
                                            }
                                            catch
                                            { 
                                            }
                                            //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt2, pt3, dim_vect_for_x_dim, 200 + d, rd_att);
                                            //TSD.TextElement text = new TSD.TextElement("(FLANGECUT & CHIP)");
                                            //text.Font.Color = TSD.DrawingColors.Green;
                                            //bool_dim_x.Attributes.DimensionValuePostfix.Add(text);
                                            //if (drg_att == "SK_BEAM_A1")
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 3.175;
                                            //}
                                            //else
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 2.38125;

                                            //}
                                        
                                           
                                            //bool_dim_x.Modify();
                                            //bool_dim_x.Insert();

                                        }

                                        if (result_for_cut_chip == false)
                                        {

                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes myset = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                            myset.IncludePartCountInTag = false;
                                            myset.RightUpperTag.Clear();
                                            TSD.TextElement mytext = new TSD.TextElement("");
                                            mytext.Value = "FLANGECUT &";                      
                                            myset.RightUpperTag.Add(mytext);                                
                                            myset.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;

                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                            {
                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                {
                                                    myset.Text.Font.Height = 3.571875;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.571875;
                                                }
                                                else
                                                {
                                                    myset.Text.Font.Height = 3.175;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.175;
                                                }
                                            }
                                            else
                                            {
                                                myset.Text.Font.Height = 2.38125;
                                                mytext.Font.Color = TSD.DrawingColors.Green;
                                                mytext.Font.Height = 2.38125;
                                           
                                            }

                                            TSD.PointList mypt = new TSD.PointList();
                                            mypt.Add(pt2);
                                            mypt.Add(pt3);
                                            try
                                            {
                                                dimset.CreateDimensionSet(current_view, mypt, dim_vect_for_x_dim, 200 + d, myset);
                                            }
                                            catch
                                            { 
                                            }








                                            //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt2, pt3, dim_vect_for_x_dim, 200 + d, rd_att);
                                                                    
                                          
                                    
                                            //TSD.TextElement text = new TSD.TextElement("(FLANGECUT)");
                                            //text.Font.Color = TSD.DrawingColors.Green;
                                            //bool_dim_x.Attributes.DimensionValuePostfix.Add(text);
                                            //if (drg_att == "SK_BEAM_A1")
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 3.175;
                                            //}
                                            //else
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 2.38125;

                                            //}
                                            //bool_dim_x.Modify();
                                            //bool_dim_x.Insert();

                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes myset1 = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                  
                                            myset1.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;

                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                            {
                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                {
                                                    myset1.Text.Font.Height = 3.571875;
                                                }
                                                else
                                                {
                                                    myset1.Text.Font.Height = 3.175;
                                                }
                                            } 
                                            else
                                            {
                                                myset1.Text.Font.Height = 2.38125;
                                            

                                            }

                                            TSD.PointList mypt1 = new TSD.PointList();
                                            mypt1.Add(pt1);
                                            mypt1.Add(pt4);
                                            try
                                            {
                                                dimset.CreateDimensionSet(current_view, mypt1, dim_vect_for_y_dim, 200, myset1);
                                            }
                                            catch
                                            {
                                            }
                                            //TSD.StraightDimension bool_dim_y = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt4, dim_vect_for_y_dim, 200, rd_att);
                                            //if (drg_att == "SK_BEAM_A1")
                                            //{
                                            //    bool_dim_y.GetDimensionSet().Attributes.Text.Font.Height = 3.175;
                                            //}
                                            //else
                                            //{
                                            //    bool_dim_y.GetDimensionSet().Attributes.Text.Font.Height = 2.38125;

                                            //}
                                            //bool_dim_y.Modify();
                                            //bool_dim_y.Insert();
                                        }
                                    }
                                    else
                                    {
                                    }

                                }




                                ////////////////
                            }
                            # endregion






                        }
                    }

                    cuts.Add(partcut);
                    TSG.Point fittrans_origin1 = toviewmatrix.Transform(main_part.EndPoint);
                }
                else
                {
                    point2 = new TSG.Point(0, size1_m / 2, 0);
                    point3 = new TSG.Point(output, size1_m / 2, 0);
                }
                d = d + 100;
            }




        }



        public void Create_FLANGE_CUT_dimensions_top1(TSD.View current_view, TSM.Beam main_part, string drg_att)
        {

            TSD.StraightDimensionSetHandler dimset = new TSD.StraightDimensionSetHandler();


            ArrayList values = Getcatalog_values(main_part);
            double size1_m = Convert.ToDouble(values[0]);
            double size2_m = Convert.ToDouble(values[1]);
            double size3_m = Convert.ToDouble(values[2]);
            long half_flange = Convert.ToInt64(size2_m / 2);
            long half_s_value = Convert.ToInt64(size3_m / 2);
            long cut_chip_value = half_flange - half_s_value;
            long check_for_flange_cut_and_chip = half_flange - cut_chip_value;
            TSD.StraightDimensionSet.StraightDimensionSetAttributes rd_att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            rd_att.ShortDimension = TSD.DimensionSetBaseAttributes.ShortDimensionTypes.Inside;
            rd_att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    rd_att.Text.Font.Height = 3.571875;
                }
                else
                {
                    rd_att.Text.Font.Height = 3.175;
                }
            }
            else
            {
                rd_att.Text.Font.Height = 2.38125;


            }



            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.DisplayCoordinateSystem);
            Type type_for_contourplate = typeof(TSM.ContourPlate);
            double size = 0;
            double output = 0;
            main_part.GetReportProperty("LENGTH", ref output);
            double DEPTH = Convert.ToDouble(current_view.Width.Equals(current_view.RestrictionBox.MaxPoint.X));
            if ((current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView)))
            {
                size = size1_m / 2;
            }
            else
            {
                size = size2_m / 2;
            }

            //////copedimesnison/////
            Type bolpart = typeof(TSM.BooleanPart);
            Type fit = typeof(TSM.Fitting);
            TSM.ModelObjectEnumerator test_bool = main_part.GetBooleans();
            ArrayList cuts = new ArrayList();
            TSG.Point fittrans_origin = new TSG.Point();
            double workpoint = output;
            TSG.Point point1 = new TSG.Point();
            TSG.Point point2 = new TSG.Point();
            TSG.Point point3 = new TSG.Point();
            TSG.Point point4 = new TSG.Point();
            while (test_bool.MoveNext())
            {
                int d = 0;
                ArrayList pts_in_viewco = new ArrayList();
                var partcut = test_bool.Current;

                if (partcut.GetType().Equals(bolpart))
                {


                    TSM.BooleanPart fitobj = partcut as TSM.BooleanPart;

                    if (fitobj.OperativePart.GetType().Equals(type_for_contourplate))
                    {
                        TSM.ContourPlate platecut = fitobj.OperativePart as TSM.ContourPlate;
                        ArrayList pts = platecut.Contour.ContourPoints;
                        ArrayList x_list = new ArrayList();
                        ArrayList y_list = new ArrayList();
                        ArrayList z_list = new ArrayList();
                        foreach (TSG.Point bolpart_point in pts)
                        {
                            TSG.Point tran_point = toviewmatrix.Transform(bolpart_point);
                            pts_in_viewco.Add(tran_point);

                        }
                        if (Convert.ToInt16((pts_in_viewco[0] as TSG.Point).Y) != Convert.ToInt16((pts_in_viewco[2] as TSG.Point).Y))
                        {
                            foreach (TSG.Point pt in pts_in_viewco)
                            {


                                x_list.Add(pt.X);
                                y_list.Add(pt.Y);
                                z_list.Add(pt.Z);

                            }

                            x_list.Sort();
                            y_list.Sort();
                            z_list.Sort();
                            ////////////////////Lower boolean dim///////////////////
                            TSG.Point pt1 = new TSG.Point();
                            TSG.Point pt2 = new TSG.Point();
                            TSG.Point pt3 = new TSG.Point();
                            TSG.Point pt4 = new TSG.Point();
                            TSG.Vector dim_vect_for_x_dim = new TSG.Vector();
                            TSG.Vector dim_vect_for_y_dim = new TSG.Vector();

                            //////////Third quadrant/////////////////////////
                            #region BOTTOM_VIEW_DIM
                            if (Convert.ToInt16(z_list[0]) > 0)
                            {



                                if ((Convert.ToInt16(y_list[0]) >= 0) && ((Convert.ToInt16(x_list[0]) <= 0)))
                                {

                                    pt1 = new TSG.Point(0, 0, 0);
                                    pt2 = new TSG.Point(0, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                    pt3 = new TSG.Point(Convert.ToInt16(x_list[x_list.Count - 1]), -size, 0);
                                    pt4 = new TSG.Point(0, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                    dim_vect_for_x_dim = new TSG.Vector(0, -1, 0);
                                    dim_vect_for_y_dim = new TSG.Vector(-1, 0, 0);

                                }
                                //////////Second quadrant//////////////////////////
                                else if ((Convert.ToInt16(x_list[0]) <= 0) && ((Convert.ToInt16(y_list[0]) >= 0)))
                                {
                                    pt1 = new TSG.Point(0, 0, 0);
                                    pt2 = new TSG.Point(0, Convert.ToInt16(y_list[0]), 0);
                                    pt3 = new TSG.Point(Convert.ToInt16(x_list[x_list.Count - 1]), size, 0);
                                    point2 = pt1;
                                    pt4 = new TSG.Point(0, Convert.ToInt16(y_list[0]), 0);
                                    dim_vect_for_x_dim = new TSG.Vector(0, 1, 0);
                                    dim_vect_for_y_dim = new TSG.Vector(-1, 0, 0);

                                }
                                /////////Fourth Quadrant////////////////////////////
                                else if ((Convert.ToInt16(x_list[0]) >= 0) && ((Convert.ToInt16(y_list[0]) >= 0)))
                                {
                                    pt1 = new TSG.Point(workpoint, 0, 0);
                                    pt3 = new TSG.Point(Convert.ToInt16(x_list[0]), Convert.ToInt16(y_list[0]), 0);
                                    pt2 = new TSG.Point(workpoint, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                    pt4 = new TSG.Point(workpoint, Convert.ToInt16(y_list[y_list.Count - 1]), 0);
                                    dim_vect_for_x_dim = new TSG.Vector(0, -1, 0);
                                    dim_vect_for_y_dim = new TSG.Vector(1, 0, 0);


                                }
                                //////////////First Quadrant////////////////
                                else if ((Convert.ToInt16(x_list[0]) >= 0) && ((Convert.ToInt16(y_list[0]) >= 0)))
                                {
                                    pt1 = new TSG.Point(workpoint, 0, 0);
                                    pt3 = new TSG.Point(Convert.ToInt16(x_list[0]), size, 0);
                                    pt2 = new TSG.Point(workpoint, Convert.ToInt16(y_list[0]), 0);
                                    pt4 = new TSG.Point(workpoint, Convert.ToInt16(y_list[0]), 0);
                                    point3 = pt1;
                                    dim_vect_for_x_dim = new TSG.Vector(0, 1, 0);
                                    dim_vect_for_y_dim = new TSG.Vector(1, 0, 0);


                                }

                                double pt_to_pt_value = TSG.Distance.PointToPoint(pt1, pt4);

                                bool result_for_cut_chip = check_for_flange_cut_and_chip.Equals(Convert.ToInt64(pt_to_pt_value));


                                if (Convert.ToInt16(z_list[0]) > 0)
                                {
                                    if ((pt2.X < current_view.RestrictionBox.MaxPoint.X) && (pt1.X > current_view.RestrictionBox.MinPoint.X))
                                    {
                                        if (result_for_cut_chip == true)
                                        {


                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes myset = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                            myset.IncludePartCountInTag = false;
                                            myset.RightUpperTag.Clear();
                                            myset.RightLowerTag.Clear();
                                            TSD.TextElement mytext = new TSD.TextElement("");
                                            mytext.Value = "FLANGECUT &";
                                            TSD.TextElement mytext1 = new TSD.TextElement("");
                                            mytext1.Value = "CHIP";

                                            myset.RightUpperTag.Add(mytext);
                                            myset.RightLowerTag.Add(mytext1);
                                            myset.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;

                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                            {
                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                {
                                                    myset.Text.Font.Height = 3.571875;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.571875;
                                                    mytext1.Font.Color = TSD.DrawingColors.Green;
                                                    mytext1.Font.Height = 3.571875;
                                                }
                                                else
                                                {
                                                    myset.Text.Font.Height = 3.175;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.175;
                                                    mytext1.Font.Color = TSD.DrawingColors.Green;
                                                    mytext1.Font.Height = 3.175;
                                                }
                                            }
                                            else
                                            {
                                                myset.Text.Font.Height = 2.38125;
                                                mytext.Font.Color = TSD.DrawingColors.Green;
                                                mytext.Font.Height = 2.38125;
                                                mytext1.Font.Color = TSD.DrawingColors.Green;
                                                mytext1.Font.Height = 2.38125;
                                            }

                                            TSD.PointList mypt = new TSD.PointList();
                                            mypt.Add(pt2);
                                            mypt.Add(pt3);
                                            try
                                            {
                                                dimset.CreateDimensionSet(current_view, mypt, dim_vect_for_x_dim, 200 + d, myset);
                                            }
                                            catch
                                            {
                                            }



                                            //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt2, pt3, dim_vect_for_x_dim, 200 + d, rd_att);
                                            //TSD.TextElement text = new TSD.TextElement("(FLANGECUT & CHIP)");
                                            //text.Font.Color = TSD.DrawingColors.Green;
                                            //bool_dim_x.Attributes.DimensionValuePostfix.Add(text);
                                            //if (drg_att == "SK_BEAM_A1")
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 3.175;
                                            //}
                                            //else
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 2.38125;

                                            //}

                                            //bool_dim_x.Modify();

                                            //bool_dim_x.Insert();



                                        }

                                        if (result_for_cut_chip == false)
                                        {


                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes myset = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                            myset.RightUpperTag.Clear();
                                            myset.IncludePartCountInTag = false;
                                            TSD.TextElement mytext = new TSD.TextElement("");
                                            mytext.Value = "FLANGECUT &";
                                            myset.RightUpperTag.Add(mytext);
                                            myset.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;

                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                            {
                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                {
                                                    myset.Text.Font.Height = 3.571875;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.571875;
                                                }
                                                else
                                                {
                                                    myset.Text.Font.Height = 3.175;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.175;
                                                }

                                            } 
                                            else
                                            {
                                                myset.Text.Font.Height = 2.38125;
                                                mytext.Font.Color = TSD.DrawingColors.Green;
                                                mytext.Font.Height = 2.38125;

                                            }

                                            TSD.PointList mypt = new TSD.PointList();
                                            mypt.Add(pt2);
                                            mypt.Add(pt3);
                                            try
                                            {
                                                dimset.CreateDimensionSet(current_view, mypt, dim_vect_for_x_dim, 200 + d, myset);
                                            }
                                            catch
                                            {
                                            }





                                            //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt2, pt3, dim_vect_for_x_dim, 200 + d, rd_att);

                                            //TSD.TextElement text = new TSD.TextElement("(FLANGECUT)");
                                            //text.Font.Color = TSD.DrawingColors.Green;
                                            //bool_dim_x.Attributes.DimensionValuePostfix.Add(text);

                                            //if (drg_att == "SK_BEAM_A1")
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 3.175;
                                            //}
                                            //else
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 2.38125;

                                            //}
                                            //bool_dim_x.Modify();
                                            //bool_dim_x.Insert();
                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes myset1 = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                            myset1.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;

                                            if (drg_att == "SK_BEAM_A1")
                                            {
                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                {
                                                    myset1.Text.Font.Height = 3.571875;
                                                }
                                                else
                                                {
                                                    myset1.Text.Font.Height = 3.175;
                                                }
                                            } 
                                            else
                                            {
                                                myset1.Text.Font.Height = 2.38125;


                                            }

                                            TSD.PointList mypt1 = new TSD.PointList();
                                            mypt1.Add(pt1);
                                            mypt1.Add(pt4);
                                            try
                                            {
                                                dimset.CreateDimensionSet(current_view, mypt1, dim_vect_for_y_dim, 200, myset1);
                                            }
                                            catch
                                            {
                                            }


                                            //TSD.StraightDimension bool_dim_y = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt4, dim_vect_for_y_dim, 200, rd_att);
                                            //if (drg_att == "SK_BEAM_A1")
                                            //{
                                            //    bool_dim_y.GetDimensionSet().Attributes.Text.Font.Height = 3.175;
                                            //}
                                            //else
                                            //{
                                            //    bool_dim_y.GetDimensionSet().Attributes.Text.Font.Height = 2.38125;

                                            //}

                                            //bool_dim_y.Modify();
                                            //bool_dim_y.Insert();
                                        }
                                    }
                                }
                                if (Convert.ToInt16(z_list[0]) < 0)
                                {

                                    if ((pt2.X < current_view.RestrictionBox.MaxPoint.X) && (pt1.X >= current_view.RestrictionBox.MinPoint.X))
                                    {
                                        if (result_for_cut_chip == true)
                                        {


                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes myset = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                            myset.IncludePartCountInTag = false;
                                            myset.RightUpperTag.Clear();
                                            myset.RightLowerTag.Clear();
                                            TSD.TextElement mytext = new TSD.TextElement("");
                                            mytext.Value = "FLANGECUT &";
                                            TSD.TextElement mytext1 = new TSD.TextElement("");
                                            mytext1.Value = "CHIP";
                                            myset.RightUpperTag.Add(mytext);
                                            myset.RightLowerTag.Add(mytext1);
                                            myset.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;

                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                            {
                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                {
                                                    myset.Text.Font.Height = 3.571875;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.571875;
                                                    mytext1.Font.Color = TSD.DrawingColors.Green;
                                                    mytext1.Font.Height = 3.571875;
                                                }
                                                else
                                                {
                                                    myset.Text.Font.Height = 3.175;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.175;
                                                    mytext1.Font.Color = TSD.DrawingColors.Green;
                                                    mytext1.Font.Height = 3.175;
                                                }
                                            }
                                            else
                                            {
                                                myset.Text.Font.Height = 2.38125;
                                                mytext.Font.Color = TSD.DrawingColors.Green;
                                                mytext.Font.Height = 2.38125;
                                                mytext1.Font.Color = TSD.DrawingColors.Green;
                                                mytext1.Font.Height = 2.38125;
                                            }

                                            TSD.PointList mypt = new TSD.PointList();
                                            mypt.Add(pt2);
                                            mypt.Add(pt3);
                                            try
                                            {
                                                dimset.CreateDimensionSet(current_view, mypt, dim_vect_for_x_dim, 200 + d, myset);
                                            }
                                            catch
                                            {
                                            }
                                            //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt2, pt3, dim_vect_for_x_dim, 200 + d, rd_att);
                                            //TSD.TextElement text = new TSD.TextElement("(FLANGECUT & CHIP)");
                                            //text.Font.Color = TSD.DrawingColors.Green;
                                            //bool_dim_x.Attributes.DimensionValuePostfix.Add(text);
                                            //if (drg_att == "SK_BEAM_A1")
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 3.175;
                                            //}
                                            //else
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 2.38125;

                                            //}


                                            //bool_dim_x.Modify();
                                            //bool_dim_x.Insert();

                                        }

                                        if (result_for_cut_chip == false)
                                        {

                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes myset = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                            myset.IncludePartCountInTag = false;
                                            myset.RightUpperTag.Clear();
                                            TSD.TextElement mytext = new TSD.TextElement("");
                                            mytext.Value = "FLANGECUT &";
                                            myset.RightUpperTag.Add(mytext);
                                            myset.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;

                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                            {
                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                {
                                                    myset.Text.Font.Height = 3.571875;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.571875;
                                                }
                                                else
                                                {
                                                    myset.Text.Font.Height = 3.175;
                                                    mytext.Font.Color = TSD.DrawingColors.Green;
                                                    mytext.Font.Height = 3.175;
                                                }
                                            }
                                            else
                                            {
                                                myset.Text.Font.Height = 2.38125;
                                                mytext.Font.Color = TSD.DrawingColors.Green;
                                                mytext.Font.Height = 2.38125;

                                            }

                                            TSD.PointList mypt = new TSD.PointList();
                                            mypt.Add(pt2);
                                            mypt.Add(pt3);
                                            try
                                            {
                                                dimset.CreateDimensionSet(current_view, mypt, dim_vect_for_x_dim, 200 + d, myset);
                                            }
                                            catch
                                            {
                                            }








                                            //TSD.StraightDimension bool_dim_x = new TSD.StraightDimension(current_view as TSD.ViewBase, pt2, pt3, dim_vect_for_x_dim, 200 + d, rd_att);



                                            //TSD.TextElement text = new TSD.TextElement("(FLANGECUT)");
                                            //text.Font.Color = TSD.DrawingColors.Green;
                                            //bool_dim_x.Attributes.DimensionValuePostfix.Add(text);
                                            //if (drg_att == "SK_BEAM_A1")
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 3.175;
                                            //}
                                            //else
                                            //{
                                            //    bool_dim_x.GetDimensionSet().Attributes.Text.Font.Height = 2.38125;

                                            //}
                                            //bool_dim_x.Modify();
                                            //bool_dim_x.Insert();

                                            TSD.StraightDimensionSet.StraightDimensionSetAttributes myset1 = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();

                                            myset1.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;

                                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                            {
                                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                                {
                                                    myset1.Text.Font.Height = 3.571875;
                                                }
                                                else
                                                {
                                                    myset1.Text.Font.Height = 3.175;
                                                }
                                            } 
                                            else
                                            {
                                                myset1.Text.Font.Height = 2.38125;


                                            }

                                            TSD.PointList mypt1 = new TSD.PointList();
                                            mypt1.Add(pt1);
                                            mypt1.Add(pt4);
                                            try
                                            {
                                                dimset.CreateDimensionSet(current_view, mypt1, dim_vect_for_y_dim, 200, myset1);
                                            }
                                            catch
                                            {
                                            }
                                            //TSD.StraightDimension bool_dim_y = new TSD.StraightDimension(current_view as TSD.ViewBase, pt1, pt4, dim_vect_for_y_dim, 200, rd_att);
                                            //if (drg_att == "SK_BEAM_A1")
                                            //{
                                            //    bool_dim_y.GetDimensionSet().Attributes.Text.Font.Height = 3.175;
                                            //}
                                            //else
                                            //{
                                            //    bool_dim_y.GetDimensionSet().Attributes.Text.Font.Height = 2.38125;

                                            //}
                                            //bool_dim_y.Modify();
                                            //bool_dim_y.Insert();
                                        }
                                    }
                                    else
                                    {
                                    }

                                }




                                ////////////////
                            }
                            # endregion






                        }
                    }

                    cuts.Add(partcut);
                    TSG.Point fittrans_origin1 = toviewmatrix.Transform(main_part.EndPoint);
                }
                else
                {
                    point2 = new TSG.Point(0, size1_m / 2, 0);
                    point3 = new TSG.Point(output, size1_m / 2, 0);
                }
                d = d + 100;
            }




        }

        public void BOTTOMVIEW_CHECK(TSM.Beam MAINPART, out string bottom_view_creation, double height_of_mainpart, out TSG.Point pt1_for_bottom_view, out TSG.Point pt2_for_bottom_view, double output, out string bottom_view_Create_check)
        {

            bottom_view_creation = "";
            bottom_view_Create_check = "";
            Type bolpart1 = typeof(TSM.BooleanPart);
            Type fit1 = typeof(TSM.Fitting);
            Type type_for_contourplate = typeof(TSM.ContourPlate);

            ArrayList pts_in_viewco1 = new ArrayList();
            TSD.PointList POSI = new TSD.PointList();
            TSD.PointList NEGI = new TSD.PointList();
            pt1_for_bottom_view = null;
            pt2_for_bottom_view = null;
            TSG.Matrix toview = TSG.MatrixFactory.ToCoordinateSystem(MAINPART.GetCoordinateSystem());



            TSM.ModelObjectEnumerator ENUM_FOR_BOLT_CHECK = MAINPART.GetBolts();
            while (ENUM_FOR_BOLT_CHECK.MoveNext())
            {
                TSM.BoltGroup MYBOLTGROUP = ENUM_FOR_BOLT_CHECK.Current as TSM.BoltGroup;
                TSG.CoordinateSystem boltcoord1 = MYBOLTGROUP.GetCoordinateSystem();
                TSG.Vector XVECTOR_FOR_BOLT = boltcoord1.AxisX;
                TSG.Vector YVECTOR_FOR_BOLT = boltcoord1.AxisY;
                TSG.Vector ZVECTOR_FOR_BOLT = TSG.Vector.Cross(YVECTOR_FOR_BOLT, XVECTOR_FOR_BOLT);

                int NO_OF_BOLT = MYBOLTGROUP.BoltPositions.Count;
                if (NO_OF_BOLT > 0)
                {
                    if ((MYBOLTGROUP.BoltPositions[0] as TSG.Point).Z < ((MAINPART.EndPoint.Z) - height_of_mainpart / 2))
                    {
                        if ((ZVECTOR_FOR_BOLT.Z != 0))
                        {
                            bottom_view_creation = "ON";
                            bottom_view_Create_check = "ON";
                            break;

                        }
                        else
                        {
                            bottom_view_creation = "OFF";
                        }
                    }
                }
            }
            if ((bottom_view_creation.Equals("OFF")) || (bottom_view_creation.Equals("")))
            {
                TSM.ModelObjectEnumerator test_boolFOR_BOTTOM = MAINPART.GetBooleans();
                while (test_boolFOR_BOTTOM.MoveNext())
                {


                    var partcut1 = test_boolFOR_BOTTOM.Current;
                    if (partcut1.GetType().Equals(fit1))
                    {
                    }
                    else if (partcut1.GetType().Equals(bolpart1))
                    {
                        TSM.BooleanPart fitobj = partcut1 as TSM.BooleanPart;

                        if (fitobj.OperativePart.GetType().Equals(type_for_contourplate))
                        {
                            TSM.ContourPlate platecut = fitobj.OperativePart as TSM.ContourPlate;
                            ArrayList pts = platecut.Contour.ContourPoints;
                            ArrayList x_list = new ArrayList();
                            ArrayList y_list = new ArrayList();
                            ArrayList z_list = new ArrayList();

                            if (Convert.ToInt64(toview.Transform(pts[0] as TSG.Point).Y) == Convert.ToInt64(toview.Transform(pts[2] as TSG.Point).Y))
                            {
                                foreach (TSG.Point bolpart_point in pts)
                                {
                                    TSG.Point CONVERTED_BOLL_POINT = toview.Transform(bolpart_point);


                                    if (Convert.ToInt64(CONVERTED_BOLL_POINT.Y) <= 0)
                                    {


                                        pts_in_viewco1.Add(CONVERTED_BOLL_POINT);
                                    }
                                }
                            }

                        }

                    }
                }



                if (pts_in_viewco1.Count > 1)
                {







                    foreach (TSG.Point PTS in pts_in_viewco1)
                    {
                        if ((Convert.ToInt16(PTS.X) < 1000) && (Convert.ToInt16(PTS.X) > 0))
                        {
                            if (PTS.Y <= 0)
                            {
                                POSI.Add(PTS);
                            }
                        }
                        else if ((Convert.ToInt16(PTS.X) > 1000) && (Convert.ToInt16(PTS.X) < output))
                        {
                            if (PTS.Y <= 0)
                            {
                                NEGI.Add(PTS);
                            }
                        }

                    }
                    try
                    {
                        sorting_points_by_x_asc(POSI);
                    }
                    catch
                    {
                    }
                    try
                    {
                        sorting_points_by_x_asc(NEGI);
                    }
                    catch
                    {
                    }

                    if ((POSI.Count > 1) && (NEGI.Count > 1))
                    {

                        bottom_view_Create_check = "BOTH";
                        pt1_for_bottom_view = POSI[0];
                        pt2_for_bottom_view = NEGI[0];

                    }
                    else if ((POSI.Count) > 1)
                    {

                        bottom_view_Create_check = "LEFT";
                        pt1_for_bottom_view = POSI[0];


                    }
                    else if ((NEGI.Count) > 1)
                    {

                        bottom_view_Create_check = "RIGHT";
                        pt2_for_bottom_view = NEGI[0];

                    }






                }
            }




        }

        public void bottom_view_creation(TSM.Beam MAINPART, TSD.View view_for_bottom_view, double output, double height_of_mainpart, out TSD.View bottom_view, out TSD.View bottom_view1, TSG.Point p1, TSG.Point p2, string BOTTOM, double SHORTNENING_VALUE_FOR_BOTTOM_VIEW, List<TSM.Part> mark_retain_partlist, out List<TSD.View> bottom_view_list,out List<TSD.View> BOTTOM_VIEW_FLANGE_CUT_LIST,string drg_attribute)
        {
            bottom_view = null;
            bottom_view1 = null;

            TSD.SectionMark sec = null;
            TSD.SectionMark sec1 = null;

            Type type_for_weld = typeof(TSD.WeldMark);
            bottom_view_list = new List<TSD.View>();
            BOTTOM_VIEW_FLANGE_CUT_LIST = new List<TSD.View>();


            if ((BOTTOM == "ON"))
            {
                if (drg_attribute == "SK_BEAM_A1")
                {
                    bool result = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 30, 0, 0), new TSG.Point(-30, 0, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, new TSD.View.ViewAttributes("SK_BEAM_A1"), new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view.Modify();

                }
                else
                {
                    bool result = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 30, 0, 0), new TSG.Point(-30, 0, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, new TSD.View.ViewAttributes("SK_BEAM_A1"), new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view.Modify();
                }

                //bool result = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 30, 0, 0), new TSG.Point(-30, 0, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("ESSKAYBEAM"), out bottom_view, out sec);
                   


                //bool result = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 30, 0, 0), new TSG.Point(-30, 0, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);
                bottom_view_list.Add(bottom_view);
                arrange_parts_for_bottom_view(bottom_view, mark_retain_partlist);


                //bottom_view.Attributes.Shortening.MinimumLength = SHORTNENING_VALUE_FOR_BOTTOM_VIEW;
                //bottom_view.Attributes.Shortening.CutPartType = TSD.View.ShorteningCutPartType.X_Direction;
                //bottom_view.Modify();
                double change_min = Math.Abs(bottom_view.RestrictionBox.MinPoint.Y);
                double change_max = Math.Abs(bottom_view.RestrictionBox.MaxPoint.Y);
                if (Convert.ToInt64(change_min) > Convert.ToInt64(change_max))
                {
                    bottom_view.RestrictionBox.MaxPoint.Y = change_min;
                    bottom_view.Modify();

                }
                else
                {
                    bottom_view.RestrictionBox.MinPoint.Y = -change_max;
                    bottom_view.Modify();

                }

                double change_min_x = Math.Abs(view_for_bottom_view.RestrictionBox.MinPoint.X);
                double change_max_x = Math.Abs(view_for_bottom_view.RestrictionBox.MaxPoint.X);

                bottom_view.RestrictionBox.MaxPoint.X = change_max_x;
                bottom_view.RestrictionBox.MinPoint.X = -change_min_x;
                bottom_view.Modify();


                TSD.FontAttributes FONT = new TSD.FontAttributes();
                FONT.Color = TSD.DrawingColors.Magenta;
                FONT.Height = Convert.ToInt16(3.96875);

                bottom_view1 = null;

                TSD.TextElement textelement2 = new TSD.TextElement(sec.Attributes.MarkName, FONT);
                TSD.TextElement textelement3 = new TSD.TextElement("-", FONT);
                TSD.ContainerElement sectionmark = new TSD.ContainerElement { textelement2, textelement3, textelement2 };



                sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                sec.Attributes.TagsAttributes.TagA1 = new TSD.SectionMarkBase.SectionMarkTagAttributes(TSD.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides, TSD.TagLocation.AboveLine, new TSG.Vector(1, 0, 0), TSD.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal, new TSD.ContainerElement { textelement2 });

                bottom_view.Attributes.TagsAttributes.TagA1 = new TSD.View.ViewMarkTagAttributes(new TSG.Vector(1, 0, 0), TSD.TagLocation.AboveLine, TSD.TextAlignment.Center, sectionmark);
                bottom_view.Attributes.LabelPositionVertical = TSD.View.VerticalLabelPosition.Bottom;
                bottom_view.Attributes.MarkSymbolColor = TSD.DrawingColors.Magenta;
                sec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;
                sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                bottom_view.Modify();
                // sec.Modify();
                Type[] type_for_dim = new Type[] { typeof(TSD.StraightDimension), typeof(TSD.StraightDimensionSet), typeof(TSD.AngleDimension) };
                TSD.DrawingObjectEnumerator dim_drg = bottom_view.GetAllObjects(type_for_dim);
                while (dim_drg.MoveNext())
                {
                    var obj = dim_drg.Current;
                    obj.Delete();

                }
                Create_FLANGE_CUT_dimensions_bottom(bottom_view, MAINPART, drg_attribute);

            }
            else if (BOTTOM == "LEFT")
            {
                //   bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(500, -30, 0), new TSG.Point(p1.X - 300, -30, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);

                if (drg_attribute == "SK_BEAM_A1")
                {
                    bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, -30, 0), new TSG.Point(-500, -30, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view.Modify();

                }
                else
                {
                    bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, -30, 0), new TSG.Point(-500, -30, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view.Modify();
                }
                //bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, -30, 0), new TSG.Point(-500, -30, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("ESSKAYBEAM"), out bottom_view, out sec);
                  

                //bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, -30, 0), new TSG.Point(-500, -30, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);
             
               
                BOTTOM_VIEW_FLANGE_CUT_LIST.Add(bottom_view);
                double change_min = Math.Abs(bottom_view.RestrictionBox.MinPoint.Y);
                double change_max = Math.Abs(bottom_view.RestrictionBox.MaxPoint.Y);
                if (Convert.ToInt64(change_min) > Convert.ToInt64(change_max))
                {
                    bottom_view.RestrictionBox.MaxPoint.Y = change_min;
                    bottom_view.Modify();

                }
                else
                {
                    bottom_view.RestrictionBox.MinPoint.Y = -change_max;
                    bottom_view.Modify();

                }
              

                TSD.FontAttributes FONT = new TSD.FontAttributes();
                FONT.Color = TSD.DrawingColors.Green;
                FONT.Height = Convert.ToInt16(3.96875);

                bottom_view1 = null;

                TSD.TextElement textelement2 = new TSD.TextElement(sec.Attributes.MarkName, FONT);
                TSD.TextElement textelement3 = new TSD.TextElement("-", FONT);
                TSD.ContainerElement sectionmark = new TSD.ContainerElement { textelement2, textelement3, textelement2 };



                sec.Attributes.LineColor = TSD.DrawingColors.Blue;
                sec.Attributes.TagsAttributes.TagA1 = new TSD.SectionMarkBase.SectionMarkTagAttributes(TSD.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides, TSD.TagLocation.AboveLine, new TSG.Vector(1, 0, 0), TSD.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal, new TSD.ContainerElement { textelement2 });

                bottom_view.Attributes.TagsAttributes.TagA1 = new TSD.View.ViewMarkTagAttributes(new TSG.Vector(1, 0, 0), TSD.TagLocation.AboveLine, TSD.TextAlignment.Center, sectionmark);
                bottom_view.Attributes.LabelPositionVertical = TSD.View.VerticalLabelPosition.Bottom;
                bottom_view.Attributes.MarkSymbolColor = TSD.DrawingColors.Magenta;
                sec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;
                sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                bottom_view.Modify();
                TSD.SymbolInfo slotsymbol = new TSD.SymbolInfo("sections", 48);
                TSG.Point insertionpoint = new TSG.Point(bottom_view.RestrictionBox.MaxPoint.X, 0, 0);
                TSD.Symbol newsymbol = new TSD.Symbol(bottom_view, insertionpoint, slotsymbol);
                newsymbol.Insert();
                newsymbol.Attributes.Height = 25.4;
                newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                newsymbol.Modify();
                // sec.Modify();
                Type[] type_for_dim = new Type[] { typeof(TSD.StraightDimension), typeof(TSD.StraightDimensionSet), typeof(TSD.AngleDimension) };
                TSD.DrawingObjectEnumerator dim_drg = bottom_view.GetAllObjects(type_for_dim);
                while (dim_drg.MoveNext())
                {
                    var obj = dim_drg.Current;
                    obj.Delete();

                }
                Create_FLANGE_CUT_dimensions_bottom(bottom_view, MAINPART, drg_attribute);

            }
            else if (BOTTOM == "RIGHT")
            {
                if (drg_attribute == "SK_BEAM_A1")
                {
                    bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, -30, 0), new TSG.Point(p2.X - 300, -30, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view.Modify();
                }
                else
                {
                    bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, -30, 0), new TSG.Point(p2.X - 300, -30, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view.Modify();
                }

                //bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, -30, 0), new TSG.Point(p2.X - 300, -30, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("ESSKAYBEAM"), out bottom_view, out sec);
                  
               //bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, -30, 0), new TSG.Point(p2.X - 300, -30, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);
             
                BOTTOM_VIEW_FLANGE_CUT_LIST.Add(bottom_view);
                double change_min = Math.Abs(bottom_view.RestrictionBox.MinPoint.Y);
                double change_max = Math.Abs(bottom_view.RestrictionBox.MaxPoint.Y);
                if (Convert.ToInt64(change_min) > Convert.ToInt64(change_max))
                {
                    bottom_view.RestrictionBox.MaxPoint.Y = change_min;
                    bottom_view.Modify();

                }
                else
                {
                    bottom_view.RestrictionBox.MinPoint.Y = -change_max;
                    bottom_view.Modify();

                }
                
                TSD.FontAttributes FONT = new TSD.FontAttributes();
                FONT.Color = TSD.DrawingColors.Magenta;
                FONT.Height = Convert.ToInt16(3.96875);

                bottom_view1 = null;

                TSD.TextElement textelement2 = new TSD.TextElement(sec.Attributes.MarkName, FONT);
                TSD.TextElement textelement3 = new TSD.TextElement("-", FONT);
                TSD.ContainerElement sectionmark = new TSD.ContainerElement { textelement2, textelement3, textelement2 };



                sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                sec.Attributes.TagsAttributes.TagA1 = new TSD.SectionMarkBase.SectionMarkTagAttributes(TSD.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides, TSD.TagLocation.AboveLine, new TSG.Vector(1, 0, 0), TSD.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal, new TSD.ContainerElement { textelement2 });

                bottom_view.Attributes.TagsAttributes.TagA1 = new TSD.View.ViewMarkTagAttributes(new TSG.Vector(1, 0, 0), TSD.TagLocation.AboveLine, TSD.TextAlignment.Center, sectionmark);
                bottom_view.Attributes.LabelPositionVertical = TSD.View.VerticalLabelPosition.Bottom;
                bottom_view.Attributes.MarkSymbolColor = TSD.DrawingColors.Magenta;
                sec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;
                sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                bottom_view.Modify();
                TSD.SymbolInfo slotsymbol = new TSD.SymbolInfo("sections", 48);
                TSG.Point insertionpoint = new TSG.Point( bottom_view.RestrictionBox.MinPoint.X,0,0);
                TSD.Symbol newsymbol = new TSD.Symbol(bottom_view, insertionpoint, slotsymbol);
                newsymbol.Insert();
                newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                newsymbol.Attributes.Height = 25.4;
                newsymbol.Modify();
                //   sec.Modify();
                Type[] type_for_dim = new Type[] { typeof(TSD.StraightDimension), typeof(TSD.StraightDimensionSet), typeof(TSD.AngleDimension) };
                TSD.DrawingObjectEnumerator dim_drg = bottom_view.GetAllObjects(type_for_dim);
                while (dim_drg.MoveNext())
                {
                    var obj = dim_drg.Current;
                    obj.Delete();

                }
                Create_FLANGE_CUT_dimensions_bottom(bottom_view, MAINPART, drg_attribute);
            }
            //  bool result = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output, 0, 0), new TSG.Point(0, 0, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes,TSD.SectionMarkBase.SectionMarkAttributes.Equals(TSD.View.ViewTypes.FrontView), out bottom_view, out sec);

            else  if (BOTTOM == "BOTH")
            {
                if (drg_attribute == "SK_BEAM_A1")
                {
                    bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, -30, 0), new TSG.Point(-500, -30, 0), new TSG.Point(p1.X + 300, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                    bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, -30, 0), new TSG.Point(p2.X - 300, -30, 0), new TSG.Point(output + 500, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view1, out sec1);
                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view1.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view.Modify();
                    bottom_view1.Modify();

                }
                else
                {
                    bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, -30, 0), new TSG.Point(-500, -30, 0), new TSG.Point(p1.X + 300, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                    bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, -30, 0), new TSG.Point(p2.X - 300, -30, 0), new TSG.Point(output + 500, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view1, out sec1);
                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view1.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view.Modify();
                    bottom_view1.Modify();

                }

                //bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, -30, 0), new TSG.Point(-500, -30, 0), new TSG.Point(p1.X + 300, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("ESSKAYBEAM"), out bottom_view, out sec);
                //bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, -30, 0), new TSG.Point(p2.X - 300, -30, 0), new TSG.Point(output + 500, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("ESSKAYBEAM"), out bottom_view1, out sec1);
                   

                //bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, -30, 0), new TSG.Point(-500, -30, 0), new TSG.Point(p1.X + 300, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);
                //bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, -30, 0), new TSG.Point(p2.X - 300, -30, 0), new TSG.Point(output + 500, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view1, out sec1);
                BOTTOM_VIEW_FLANGE_CUT_LIST.Add(bottom_view);
                BOTTOM_VIEW_FLANGE_CUT_LIST.Add(bottom_view1);
                double change_min = Math.Abs(bottom_view.RestrictionBox.MinPoint.Y);
                double change_max = Math.Abs(bottom_view.RestrictionBox.MaxPoint.Y);
                if (Convert.ToInt64(change_min) > Convert.ToInt64(change_max))
                {
                    bottom_view.RestrictionBox.MaxPoint.Y = change_min;
                    bottom_view.Modify();

                }
                else
                {
                    bottom_view.RestrictionBox.MinPoint.Y = -change_max;
                    bottom_view.Modify();

                }
                double change_min_1 = Math.Abs(bottom_view1.RestrictionBox.MinPoint.Y);
                double change_max_1 = Math.Abs(bottom_view1.RestrictionBox.MaxPoint.Y);
                if (Convert.ToInt64(change_min_1) > Convert.ToInt64(change_max_1))
                {
                    bottom_view1.RestrictionBox.MaxPoint.Y = change_min;
                    bottom_view1.Modify();

                }
                else
                {
                    bottom_view1.RestrictionBox.MinPoint.Y = -change_max;
                    bottom_view1.Modify();

                }
                //bottom_view.RestrictionBox.MaxPoint = new TSG.Point(p1.X + 300, -30, 0);
                //bottom_view.RestrictionBox.MinPoint = new TSG.Point(-500, -30, 0);

                //bottom_view1.RestrictionBox.MaxPoint = new TSG.Point(output + 500, -30, 0);
                //bottom_view1.RestrictionBox.MinPoint = new TSG.Point(p2.X - 300, -30, 0);
                //bottom_view.Modify();
                //bottom_view1.Modify();

                TSD.FontAttributes FONT = new TSD.FontAttributes();
                FONT.Color = TSD.DrawingColors.Magenta;
                FONT.Height = Convert.ToInt16(3.96875);



                TSD.TextElement textelement2 = new TSD.TextElement(sec.Attributes.MarkName, FONT);
                TSD.TextElement textelement3 = new TSD.TextElement("-", FONT);
                TSD.ContainerElement sectionmark = new TSD.ContainerElement { textelement2, textelement3, textelement2 };



                sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                sec.Attributes.TagsAttributes.TagA1 = new TSD.SectionMarkBase.SectionMarkTagAttributes(TSD.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides, TSD.TagLocation.AboveLine, new TSG.Vector(1, 0, 0), TSD.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal, new TSD.ContainerElement { textelement2 });

                bottom_view.Attributes.TagsAttributes.TagA1 = new TSD.View.ViewMarkTagAttributes(new TSG.Vector(1, 0, 0), TSD.TagLocation.AboveLine, TSD.TextAlignment.Center, sectionmark);
                bottom_view.Attributes.LabelPositionVertical = TSD.View.VerticalLabelPosition.Bottom;
                bottom_view.Attributes.MarkSymbolColor = TSD.DrawingColors.Magenta;
                sec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;
                sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                bottom_view.Modify();

                TSD.SymbolInfo slotsymbol = new TSD.SymbolInfo("sections", 48);
                TSG.Point insertionpoint = new TSG.Point(bottom_view.RestrictionBox.MaxPoint.X, 0, 0);
                TSD.Symbol newsymbol = new TSD.Symbol(bottom_view, insertionpoint, slotsymbol);

                newsymbol.Insert();
                newsymbol.Attributes.Height = 25.4;
                newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                newsymbol.Modify();
              
                // sec.Modify();
                Type[] type_for_dim = new Type[] { typeof(TSD.StraightDimension), typeof(TSD.StraightDimensionSet), typeof(TSD.AngleDimension) };
                TSD.DrawingObjectEnumerator dim_drg = bottom_view.GetAllObjects(type_for_dim);
                while (dim_drg.MoveNext())
                {
                    var obj = dim_drg.Current;
                    obj.Delete();

                }
                   TSD.DrawingObjectEnumerator dim_drg1 = bottom_view1.GetAllObjects(type_for_dim);
                while (dim_drg1.MoveNext())
                {
                    var obj = dim_drg1.Current;
                    obj.Delete();

                }
                Create_FLANGE_CUT_dimensions_bottom(bottom_view, MAINPART, drg_attribute);
                Create_FLANGE_CUT_dimensions_bottom(bottom_view1, MAINPART, drg_attribute);



                TSD.FontAttributes FONT1 = new TSD.FontAttributes();
                FONT1.Color = TSD.DrawingColors.Magenta;
                FONT1.Height = Convert.ToInt16(3.96875);




                TSD.TextElement textelement21 = new TSD.TextElement(sec1.Attributes.MarkName, FONT);
                TSD.TextElement textelement31 = new TSD.TextElement("-", FONT1);
                TSD.ContainerElement sectionmark1 = new TSD.ContainerElement { textelement21, textelement31, textelement21 };



                sec1.Attributes.LineColor = TSD.DrawingColors.Magenta;
                sec1.Attributes.TagsAttributes.TagA1 = new TSD.SectionMarkBase.SectionMarkTagAttributes(TSD.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides, TSD.TagLocation.AboveLine, new TSG.Vector(1, 0, 0), TSD.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal, new TSD.ContainerElement { textelement21 });

                bottom_view1.Attributes.TagsAttributes.TagA1 = new TSD.View.ViewMarkTagAttributes(new TSG.Vector(1, 0, 0), TSD.TagLocation.AboveLine, TSD.TextAlignment.Center, sectionmark1);
                bottom_view1.Attributes.LabelPositionVertical = TSD.View.VerticalLabelPosition.Bottom;
                bottom_view1.Attributes.MarkSymbolColor = TSD.DrawingColors.Magenta;
                sec1.Attributes.SymbolColor = TSD.DrawingColors.Magenta;
                sec1.Attributes.LineColor = TSD.DrawingColors.Magenta;
                bottom_view1.Modify();
                TSD.SymbolInfo slotsymbol1 = new TSD.SymbolInfo("sections", 48);
                TSG.Point insertionpoint1 = new TSG.Point(bottom_view1.RestrictionBox.MinPoint.X, 0, 0);
                TSD.Symbol newsymbol1 = new TSD.Symbol(bottom_view1, insertionpoint1, slotsymbol1);
                newsymbol1.Insert();
                newsymbol1.Attributes.Height = 25.4;
                newsymbol1.Attributes.Color = TSD.DrawingColors.Green;
                newsymbol1.Modify();
                //   sec1.Modify();

            }
            try
            {
                TSD.DrawingObjectEnumerator weld_marks = bottom_view.GetAllObjects(type_for_weld);
                while (weld_marks.MoveNext())
                {
                    var weldmark = weld_marks.Current;
                    weldmark.Delete();
                }
            }
            catch
            {
            }
            try
            {
                TSD.DrawingObjectEnumerator weld_marks = bottom_view1.GetAllObjects(type_for_weld);
                while (weld_marks.MoveNext())
                {
                    var weldmark = weld_marks.Current;
                    weldmark.Delete();
                }
            }
            catch
            {
            }


        }

        public void TOPVIEW_CHECK(TSM.Beam MAINPART, out string top_view_creation, double height_of_mainpart, out TSG.Point pt1_for_bottom_view, out TSG.Point pt2_for_bottom_view, double output, out string top_view_Create_check)
        {

            top_view_creation = "";
            top_view_Create_check = "";
            Type bolpart1 = typeof(TSM.BooleanPart);
            Type fit1 = typeof(TSM.Fitting);
            Type type_for_contourplate = typeof(TSM.ContourPlate);

            ArrayList pts_in_viewco1 = new ArrayList();
            TSD.PointList POSI = new TSD.PointList();
            TSD.PointList NEGI = new TSD.PointList();
            pt1_for_bottom_view = null;
            pt2_for_bottom_view = null;
            TSG.Matrix toview = TSG.MatrixFactory.ToCoordinateSystem(MAINPART.GetCoordinateSystem());

            if ((top_view_creation.Equals("OFF")) || (top_view_creation.Equals("")))
            {
                TSM.ModelObjectEnumerator test_boolFOR_BOTTOM = MAINPART.GetBooleans();
                while (test_boolFOR_BOTTOM.MoveNext())
                {
                    var partcut1 = test_boolFOR_BOTTOM.Current;
                    if (partcut1.GetType().Equals(fit1))
                    {
                    }
                    else if (partcut1.GetType().Equals(bolpart1))
                    {
                        TSM.BooleanPart fitobj = partcut1 as TSM.BooleanPart;

                        if (fitobj.OperativePart.GetType().Equals(type_for_contourplate))
                        {
                            TSM.ContourPlate platecut = fitobj.OperativePart as TSM.ContourPlate;
                            ArrayList pts = platecut.Contour.ContourPoints;
                            ArrayList x_list = new ArrayList();
                            ArrayList y_list = new ArrayList();
                            ArrayList z_list = new ArrayList();
                            if (pts.Count > 3)
                            {
                                if (Convert.ToInt64(toview.Transform(pts[0] as TSG.Point).Y) == Convert.ToInt64(toview.Transform(pts[2] as TSG.Point).Y))
                                {
                                    foreach (TSG.Point bolpart_point in pts)
                                    {
                                        TSG.Point CONVERTED_BOLL_POINT = toview.Transform(bolpart_point);
                                        if (Convert.ToInt64(CONVERTED_BOLL_POINT.Y) >= 0)
                                        {
                                            pts_in_viewco1.Add(CONVERTED_BOLL_POINT);
                                        }
                                    }
                                }
                            }

                        }

                    }
                }

                if (pts_in_viewco1.Count > 1)
                {

                    foreach (TSG.Point PTS in pts_in_viewco1)
                    {
                        if ((Convert.ToInt16(PTS.X) < 1000) && (Convert.ToInt16(PTS.X) > 0))
                        {
                            if (PTS.Y >= 0)
                            {
                                POSI.Add(PTS);
                            }
                        }
                        else if ((Convert.ToInt16(PTS.X) > 1000) && (Convert.ToInt16(PTS.X) < output))
                        {
                            if (PTS.Y >= 0)
                            {
                                NEGI.Add(PTS);
                            }
                        }

                    }
                    try
                    {
                        sorting_points_by_x_asc(POSI);
                    }
                    catch
                    {
                    }
                    try
                    {
                        sorting_points_by_x_asc(NEGI);
                    }
                    catch
                    {
                    }

                    if ((POSI.Count > 1) && (NEGI.Count > 1))
                    {

                        top_view_Create_check = "BOTH";
                        pt1_for_bottom_view = POSI[0];
                        pt2_for_bottom_view = NEGI[0];

                    }
                    else if ((POSI.Count) > 1)
                    {

                        top_view_Create_check = "LEFT";
                        pt1_for_bottom_view = POSI[0];


                    }
                    else if ((NEGI.Count) > 1)
                    {

                        top_view_Create_check = "RIGHT";
                        pt2_for_bottom_view = NEGI[0];

                    }






                }
            }




        }


        public void TOPVIEW_needed(TSM.Beam MAINPART, double height_of_mainpart, double output, out string top_view_Create_check)
        {

            TSM.Model mymodel = new TSM.Model();
            top_view_Create_check = "";
            Type bolpart1 = typeof(TSM.BooleanPart);
            Type fit1 = typeof(TSM.Fitting);
            Type cut_plane = typeof(TSM.CutPlane);

            Type type_for_contourplate = typeof(TSM.ContourPlate);
             
            ArrayList pts_in_viewco1 = new ArrayList();
            TSD.PointList POSI = new TSD.PointList();
            TSD.PointList NEGI = new TSD.PointList();

            TSG.Matrix toview = TSG.MatrixFactory.ToCoordinateSystem(MAINPART.GetCoordinateSystem());





            TSM.ModelObjectEnumerator test_boolFOR_BOTTOM = MAINPART.GetBooleans();
            while (test_boolFOR_BOTTOM.MoveNext())
            {


                var partcut1 = test_boolFOR_BOTTOM.Current;
                if (partcut1.GetType().Equals(fit1))
                {
                }
                else if (partcut1.GetType().Equals(cut_plane))
                {
                    TSM.CutPlane fitobj = partcut1 as TSM.CutPlane;
                    TSG.Vector x_vector = fitobj.Plane.AxisX;
                    TSG.Vector y_vector = fitobj.Plane.AxisY;
                    TSG.Vector Z_vector = (y_vector.Cross(x_vector));
                    Z_vector.Normalize();
                    if ((Z_vector.X != 0) && (Z_vector.Y != 0))
                    {
                        top_view_Create_check = "yes";
                    }


                }
                else if (partcut1.GetType().Equals(bolpart1))
                {
                    TSM.BooleanPart fitobj = partcut1 as TSM.BooleanPart;

                    if (fitobj.OperativePart.GetType().Equals(type_for_contourplate))
                    {
                        TSM.ContourPlate platecut = fitobj.OperativePart as TSM.ContourPlate;
                        ArrayList pts = platecut.Contour.ContourPoints;
                        ArrayList x_list = new ArrayList();
                        ArrayList y_list = new ArrayList();
                        ArrayList z_list = new ArrayList();
                        if (pts.Count > 2)
                        {
                            if (Convert.ToInt16(toview.Transform(pts[0] as TSG.Point).Y) == Convert.ToInt16(toview.Transform(pts[2] as TSG.Point).Y))
                            {
                                foreach (TSG.Point bolpart_point in pts)
                                {
                                    TSG.Point CONVERTED_BOLL_POINT = toview.Transform(bolpart_point);

                                    if (Convert.ToInt16(CONVERTED_BOLL_POINT.Y) > -10)
                                    {
                                        top_view_Create_check = "yes";
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public void TOP_view_creation(TSM.Beam MAINPART, TSD.View view_for_bottom_view, double output, double height_of_mainpart, out TSD.View bottom_view, out TSD.View bottom_view1, TSG.Point p1, TSG.Point p2, string BOTTOM,out List<TSD.View> TOP_VIEW_FLANGE_CUT_LIST,string drg_attribute)
        {
            bottom_view = null;
            bottom_view1 = null;

            TSD.SectionMark sec = null;
            TSD.SectionMark sec1 = null;
            TOP_VIEW_FLANGE_CUT_LIST = new List<TSD.View>();
            //if ((BOTTOM == "ON"))
            //{

            //    bool result = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output, 0, 0), new TSG.Point(0, 0, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);
            //    TSD.FontAttributes FONT = new TSD.FontAttributes();
            //    FONT.Color = TSD.DrawingColors.Green;

            //    bottom_view1 = null;

            //    TSD.TextElement textelement2 = new TSD.TextElement(sec.Attributes.MarkName, FONT);
            //    TSD.TextElement textelement3 = new TSD.TextElement("-", FONT);
            //    TSD.ContainerElement sectionmark = new TSD.ContainerElement { textelement2, textelement3, textelement2 };



            //    sec.Attributes.LineColor = TSD.DrawingColors.Blue;
            //    sec.Attributes.TagsAttributes.TagA1 = new TSD.SectionMarkBase.SectionMarkTagAttributes(TSD.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides, TSD.TagLocation.AboveLine, new TSG.Vector(1, 0, 0), TSD.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal, new TSD.ContainerElement { textelement2 });

            //    bottom_view.Attributes.TagsAttributes.TagA1 = new TSD.View.ViewMarkTagAttributes(new TSG.Vector(1, 0, 0), TSD.TagLocation.AboveLine, TSD.TextAlignment.Center, sectionmark);
            //    bottom_view.Attributes.LabelPositionVertical = TSD.View.VerticalLabelPosition.Bottom;
            //    bottom_view.Attributes.MarkSymbolColor = TSD.DrawingColors.Magenta;
            //    sec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;
            //    sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
            //    bottom_view.Modify();
            //    double size = 0;
            //    sec.Modify();
            //    Create_FLANGE_CUT_dimensions_bottom(bottom_view, MAINPART);
            //}
            if (BOTTOM == "LEFT")
            {
                if (drg_attribute == "SK_BEAM_A1")
                {
                    bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(-500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view.Modify();

                }
                else
                {
                    bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(-500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view.Modify();

                }
                //bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(-500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("ESSKAYBEAM"), out bottom_view, out sec);
                  

                 //bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(-500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);
                TOP_VIEW_FLANGE_CUT_LIST.Add(bottom_view);
                double change_min = Math.Abs(bottom_view.RestrictionBox.MinPoint.Y);
                double change_max = Math.Abs(bottom_view.RestrictionBox.MaxPoint.Y);
                if (Convert.ToInt64(change_min) > Convert.ToInt64(change_max))
                {
                    bottom_view.RestrictionBox.MaxPoint.Y = change_min;
                    bottom_view.Modify();

                }
                else
                {
                    bottom_view.RestrictionBox.MinPoint.Y = -change_max;
                    bottom_view.Modify();

                }
                TSD.FontAttributes FONT = new TSD.FontAttributes();
                FONT.Color = TSD.DrawingColors.Magenta;
                FONT.Height = Convert.ToInt16(3.96875);

                bottom_view1 = null;

                TSD.TextElement textelement2 = new TSD.TextElement(sec.Attributes.MarkName, FONT);
                TSD.TextElement textelement3 = new TSD.TextElement("-", FONT);
                TSD.ContainerElement sectionmark = new TSD.ContainerElement { textelement2, textelement3, textelement2 };



                sec.Attributes.LineColor = TSD.DrawingColors.Blue;
                sec.Attributes.TagsAttributes.TagA1 = new TSD.SectionMarkBase.SectionMarkTagAttributes(TSD.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides, TSD.TagLocation.AboveLine, new TSG.Vector(1, 0, 0), TSD.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal, new TSD.ContainerElement { textelement2 });

                bottom_view.Attributes.TagsAttributes.TagA1 = new TSD.View.ViewMarkTagAttributes(new TSG.Vector(1, 0, 0), TSD.TagLocation.AboveLine, TSD.TextAlignment.Center, sectionmark);
                bottom_view.Attributes.LabelPositionVertical = TSD.View.VerticalLabelPosition.Bottom;
                bottom_view.Attributes.MarkSymbolColor = TSD.DrawingColors.Magenta;
                sec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;
                sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                bottom_view.Modify();
                TSD.SymbolInfo slotsymbol = new TSD.SymbolInfo("sections", 48);
                TSG.Point insertionpoint = new TSG.Point(bottom_view.RestrictionBox.MaxPoint.X, 0, 0);
                TSD.Symbol newsymbol = new TSD.Symbol(bottom_view, insertionpoint, slotsymbol);
                newsymbol.Insert();
                newsymbol.Attributes.Height = 25.4;
                newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                newsymbol.Modify();
                //   sec.Modify();
                Type[] type_for_dim = new Type[] { typeof(TSD.StraightDimension), typeof(TSD.StraightDimensionSet), typeof(TSD.AngleDimension) };
                TSD.DrawingObjectEnumerator dim_drg = bottom_view.GetAllObjects(type_for_dim);
                while (dim_drg.MoveNext())
                {
                    var obj = dim_drg.Current;
                    obj.Delete();

                }
                Create_FLANGE_CUT_dimensions_bottom(bottom_view, MAINPART, drg_attribute);
            }
            
            if (BOTTOM == "RIGHT")
            {
                if (drg_attribute == "SK_BEAM_A1")
                {
                    bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(p2.X - 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view.Modify();


                }
                else
                {
                    bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(p2.X - 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view.Modify();

                }
                //bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(p2.X - 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("ESSKAYBEAM"), out bottom_view, out sec);
                  
                //bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(p2.X - 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);
                TOP_VIEW_FLANGE_CUT_LIST.Add(bottom_view);
                double change_min = Math.Abs(bottom_view.RestrictionBox.MinPoint.Y);
                double change_max = Math.Abs(bottom_view.RestrictionBox.MaxPoint.Y);
                if (Convert.ToInt64(change_min) > Convert.ToInt64(change_max))
                {
                    bottom_view.RestrictionBox.MaxPoint.Y = change_min;
                    bottom_view.Modify();

                }
                else
                {
                    bottom_view.RestrictionBox.MinPoint.Y = -change_max;
                    bottom_view.Modify();

                }
                TSD.FontAttributes FONT = new TSD.FontAttributes();
                FONT.Color = TSD.DrawingColors.Magenta;
                FONT.Height = Convert.ToInt16(3.96875);

                bottom_view1 = null;

                TSD.TextElement textelement2 = new TSD.TextElement(sec.Attributes.MarkName, FONT);
                TSD.TextElement textelement3 = new TSD.TextElement("-", FONT);
                TSD.ContainerElement sectionmark = new TSD.ContainerElement { textelement2, textelement3, textelement2 };



                sec.Attributes.LineColor = TSD.DrawingColors.Blue;
                sec.Attributes.TagsAttributes.TagA1 = new TSD.SectionMarkBase.SectionMarkTagAttributes(TSD.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides, TSD.TagLocation.AboveLine, new TSG.Vector(1, 0, 0), TSD.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal, new TSD.ContainerElement { textelement2 });

                bottom_view.Attributes.TagsAttributes.TagA1 = new TSD.View.ViewMarkTagAttributes(new TSG.Vector(1, 0, 0), TSD.TagLocation.AboveLine, TSD.TextAlignment.Center, sectionmark);
                bottom_view.Attributes.LabelPositionVertical = TSD.View.VerticalLabelPosition.Bottom;
                bottom_view.Attributes.MarkSymbolColor = TSD.DrawingColors.Magenta;
                sec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;
                sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                bottom_view.Modify();
                TSD.SymbolInfo slotsymbol = new TSD.SymbolInfo("sections", 48);
                TSG.Point insertionpoint = new TSG.Point(bottom_view.RestrictionBox.MinPoint.X, 0, 0);
                TSD.Symbol newsymbol = new TSD.Symbol(bottom_view, insertionpoint, slotsymbol);
                newsymbol.Insert();
                newsymbol.Attributes.Height = 25.4;
                newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                newsymbol.Modify();
                //  sec.Modify();
                Type[] type_for_dim = new Type[] { typeof(TSD.StraightDimension), typeof(TSD.StraightDimensionSet), typeof(TSD.AngleDimension) };
                TSD.DrawingObjectEnumerator dim_drg = bottom_view.GetAllObjects(type_for_dim);
                while (dim_drg.MoveNext())
                {
                    var obj = dim_drg.Current;
                    obj.Delete();

                }
                Create_FLANGE_CUT_dimensions_bottom(bottom_view, MAINPART, drg_attribute);
            }
            //  bool result = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output, 0, 0), new TSG.Point(0, 0, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes,TSD.SectionMarkBase.SectionMarkAttributes.Equals(TSD.View.ViewTypes.FrontView), out bottom_view, out sec);

            if (BOTTOM == "BOTH")
            {
                //bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, -30, 0), new TSG.Point(-500, -30, 0), new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);
                //bool result12 = TSD.View.CreateSectionView(view_for_bottom_view,new TSG.Point(output +500, -30, 0), new TSG.Point(p2.X-300, -30, 0),  new TSG.Point(view_for_bottom_view.ExtremaCenter.X, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view1, out sec1);
                //bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, -30, 0), new TSG.Point(-500, -30, 0), new TSG.Point(p1.X + 300, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);
                //bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, -30, 0), new TSG.Point(p2.X - 300, -30, 0), new TSG.Point(output + 500, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view1, out sec1);

                if (drg_attribute == "SK_BEAM_A1")
                {
                    bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(-500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(p1.X + 300, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                    bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(p2.X - 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(output + 500, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view1, out sec1);
                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view1.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view.Modify();
                    bottom_view1.Modify();
            
                }
                else
                {
                    bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(-500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(p1.X + 300, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                    bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(p2.X - 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(output + 500, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view1, out sec1);
                    bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view1.Attributes.LoadAttributes("SK_BEAM_A1");
                    bottom_view.Modify();
                    bottom_view1.Modify();
 
                }

                //bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(-500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(p1.X + 300, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("ESSKAYBEAM"), out bottom_view, out sec);
                //bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(p2.X - 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(output + 500, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("ESSKAYBEAM"), out bottom_view1, out sec1);
                  

                //bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p1.X + 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(-500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(p1.X + 300, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);
                //bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(output + 500, 30 + (height_of_mainpart / 2), 0), new TSG.Point(p2.X - 300, 30 + (height_of_mainpart / 2), 0), new TSG.Point(output + 500, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view1, out sec1);
                TOP_VIEW_FLANGE_CUT_LIST.Add(bottom_view);
                TOP_VIEW_FLANGE_CUT_LIST.Add(bottom_view1);
                double change_min = Math.Abs(bottom_view.RestrictionBox.MinPoint.Y);
                double change_max = Math.Abs(bottom_view.RestrictionBox.MaxPoint.Y);
                if (Convert.ToInt64(change_min) > Convert.ToInt64(change_max))
                {
                    bottom_view.RestrictionBox.MaxPoint.Y = change_min;
                    bottom_view.Modify();

                }
                else
                {
                    bottom_view.RestrictionBox.MinPoint.Y = -change_max;
                    bottom_view.Modify();

                }
                double change_min_1 = Math.Abs(bottom_view1.RestrictionBox.MinPoint.Y);
                double change_max_1 = Math.Abs(bottom_view1.RestrictionBox.MaxPoint.Y);
                if (Convert.ToInt64(change_min_1) > Convert.ToInt64(change_max_1))
                {
                    bottom_view1.RestrictionBox.MaxPoint.Y = change_min;
                    bottom_view1.Modify();

                }
                else
                {
                    bottom_view1.RestrictionBox.MinPoint.Y = -change_max;
                    bottom_view1.Modify();

                }
                //bool result11 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(-500, -30, 0), new TSG.Point(p1.X + 300, -30, 0), new TSG.Point(p1.X + 300, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);
                //bool result12 = TSD.View.CreateSectionView(view_for_bottom_view, new TSG.Point(p2.X - 300, -30, 0), new TSG.Point(output + 500, -30, 0), new TSG.Point(output + 500, 200, 0), height_of_mainpart / 2 + 50, 30, view_for_bottom_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view1, out sec1);




                //bottom_view.RestrictionBox.MaxPoint = new TSG.Point(p1.X + 300, -30, 0);
                //bottom_view.RestrictionBox.MinPoint = new TSG.Point(-500, -30, 0);

                //bottom_view1.RestrictionBox.MaxPoint = new TSG.Point(output + 500, -30, 0);
                //bottom_view1.RestrictionBox.MinPoint = new TSG.Point(p2.X - 300, -30, 0);
                //bottom_view.Modify();
                //bottom_view1.Modify();

                TSD.FontAttributes FONT = new TSD.FontAttributes();
                FONT.Color = TSD.DrawingColors.Magenta;
                FONT.Height = Convert.ToInt16(3.96875);



                TSD.TextElement textelement2 = new TSD.TextElement(sec.Attributes.MarkName, FONT);
                TSD.TextElement textelement3 = new TSD.TextElement("-", FONT);
                TSD.ContainerElement sectionmark = new TSD.ContainerElement { textelement2, textelement3, textelement2 };



                sec.Attributes.LineColor = TSD.DrawingColors.Blue;
                sec.Attributes.TagsAttributes.TagA1 = new TSD.SectionMarkBase.SectionMarkTagAttributes(TSD.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides, TSD.TagLocation.AboveLine, new TSG.Vector(1, 0, 0), TSD.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal, new TSD.ContainerElement { textelement2 });

                bottom_view.Attributes.TagsAttributes.TagA1 = new TSD.View.ViewMarkTagAttributes(new TSG.Vector(1, 0, 0), TSD.TagLocation.AboveLine, TSD.TextAlignment.Center, sectionmark);
                bottom_view.Attributes.LabelPositionVertical = TSD.View.VerticalLabelPosition.Bottom;
                bottom_view.Attributes.MarkSymbolColor = TSD.DrawingColors.Magenta;
                sec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;
                sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                bottom_view.Modify();
                TSD.SymbolInfo slotsymbol = new TSD.SymbolInfo("sections", 48);
                TSG.Point insertionpoint = new TSG.Point(bottom_view.RestrictionBox.MaxPoint.X, 0, 0);
                TSD.Symbol newsymbol = new TSD.Symbol(bottom_view, insertionpoint, slotsymbol);
                newsymbol.Insert();
                newsymbol.Attributes.Height = 25.4;
                newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                newsymbol.Modify();
                //  sec.Modify();
                Type[] type_for_dim = new Type[] { typeof(TSD.StraightDimension), typeof(TSD.StraightDimensionSet), typeof(TSD.AngleDimension) };
                TSD.DrawingObjectEnumerator dim_drg = bottom_view.GetAllObjects(type_for_dim);
                while (dim_drg.MoveNext())
                {
                    var obj = dim_drg.Current;
                    obj.Delete();

                }
               TSD.DrawingObjectEnumerator dim_drg1 = bottom_view1.GetAllObjects(type_for_dim);
                while (dim_drg1.MoveNext())
                {
                    var obj = dim_drg1.Current;
                    obj.Delete();

                }
                Create_FLANGE_CUT_dimensions_bottom(bottom_view, MAINPART, drg_attribute);
                Create_FLANGE_CUT_dimensions_bottom(bottom_view1, MAINPART, drg_attribute);



                TSD.FontAttributes FONT1 = new TSD.FontAttributes();
                FONT1.Color = TSD.DrawingColors.Magenta;
                FONT.Height = Convert.ToInt16(3.96875);



                TSD.TextElement textelement21 = new TSD.TextElement(sec1.Attributes.MarkName, FONT);
                TSD.TextElement textelement31 = new TSD.TextElement("-", FONT1);
                TSD.ContainerElement sectionmark1 = new TSD.ContainerElement { textelement21, textelement31, textelement21 };



                sec1.Attributes.LineColor = TSD.DrawingColors.Blue;
                sec1.Attributes.TagsAttributes.TagA1 = new TSD.SectionMarkBase.SectionMarkTagAttributes(TSD.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides, TSD.TagLocation.AboveLine, new TSG.Vector(1, 0, 0), TSD.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal, new TSD.ContainerElement { textelement21 });

                bottom_view1.Attributes.TagsAttributes.TagA1 = new TSD.View.ViewMarkTagAttributes(new TSG.Vector(1, 0, 0), TSD.TagLocation.AboveLine, TSD.TextAlignment.Center, sectionmark1);
                bottom_view1.Attributes.LabelPositionVertical = TSD.View.VerticalLabelPosition.Bottom;
                bottom_view1.Attributes.MarkSymbolColor = TSD.DrawingColors.Magenta;
                sec1.Attributes.SymbolColor = TSD.DrawingColors.Magenta;
                sec1.Attributes.LineColor = TSD.DrawingColors.Magenta;
                bottom_view1.Modify();
                TSD.SymbolInfo slotsymbol1 = new TSD.SymbolInfo("sections", 48);
                TSG.Point insertionpoint1 = new TSG.Point(bottom_view1.RestrictionBox.MinPoint.X, 0, 0);
                TSD.Symbol newsymbol1 = new TSD.Symbol(bottom_view1, insertionpoint1, slotsymbol1);
                newsymbol1.Insert();
                newsymbol1.Attributes.Height = 25.4;
                newsymbol1.Attributes.Color = TSD.DrawingColors.Green;
                newsymbol1.Modify();
                //  sec1.Modify();

            }


        }

        public void connecting_side_mark(TSD.Drawing mydrg, TSM.Part part)
        {
            Type type_for_part = typeof(TSD.Part);
            TSD.DrawingObjectEnumerator enum_for_views = mydrg.GetSheet().GetAllViews();
            while (enum_for_views.MoveNext())
            {
                TSD.View current_view = enum_for_views.Current as TSD.View;
                if (current_view.ViewType == TSD.View.ViewTypes.TopView)
                {
                    TSD.DrawingObjectEnumerator enum_for_orientation = current_view.GetAllObjects(type_for_part);
                    while (enum_for_orientation.MoveNext())
                    {
                        TSD.Part mypart = enum_for_orientation.Current as TSD.Part;
                        mypart.Attributes.DrawConnectingSideMarks = true;
                        mypart.Modify();
                        current_view.Modify();
                        mydrg.CommitChanges();
                    }
                }
                else if(current_view.ViewType == TSD.View.ViewTypes.BottomView)
                {
                    TSD.DrawingObjectEnumerator enum_for_orientation = current_view.GetAllObjects(type_for_part);
                    while (enum_for_orientation.MoveNext())
                    {
                        TSD.Part mypart = enum_for_orientation.Current as TSD.Part;
                        mypart.Attributes.DrawConnectingSideMarks = true;
                        mypart.Modify();
                        current_view.Modify();
                    }
                }
                else if (current_view.ViewType == TSD.View.ViewTypes.SectionView)
                {
                    TSD.DrawingObjectEnumerator enum_for_orientation = current_view.GetAllObjects(type_for_part);
                    while (enum_for_orientation.MoveNext())
                    {
                        TSD.Part mypart = enum_for_orientation.Current as TSD.Part;
                        if (mypart!=null)
                        
                        {
                            if(  (MyModel.SelectModelObject(mypart.ModelIdentifier) as TSM.Part).Identifier.GUID.ToString()!=part.Identifier.GUID.ToString())
                            {
                                mypart.Attributes.DrawConnectingSideMarks = true;
                                mypart.Modify();
                                current_view.Modify();
                            }
                        }
                    }
                }
            }
            mydrg.CommitChanges();
        }

        public void orientationmark(TSD.Drawing mydrg, TSM.Part part)
        {
            Type type_for_part = typeof(TSD.Part);
            TSD.DrawingObjectEnumerator enum_for_views = mydrg.GetSheet().GetAllViews();
            while (enum_for_views.MoveNext())
            {
                TSD.View current_view = enum_for_views.Current as TSD.View;
                TSD.Part.PartAttributes orientation = new TSD.Part.PartAttributes();

                TSD.DrawingObjectEnumerator enum_for_orientation = current_view.GetAllObjects(type_for_part);
                while (enum_for_orientation.MoveNext())
                {

                    TSD.Part mypart = enum_for_orientation.Current as TSD.Part;
                    if ((current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView)))
                    {
                        if ((MyModel.SelectModelObject(mypart.ModelIdentifier) as TSM.Part).Identifier.GUID.ToString() == part.Identifier.GUID.ToString())
                        {
                            if (mypart.Attributes.DrawOrientationMark.Equals(false))
                            {
                                orientation.DrawOrientationMark = true;
                                mypart.Attributes = orientation;
                                mypart.Modify();
                                current_view.Modify();
                            }
                        }
                        else
                        {
                            if (mypart.Attributes.DrawOrientationMark.Equals(true))
                            {
                                orientation.DrawOrientationMark = false;
                                mypart.Attributes = orientation;
                                current_view.Modify();
                                mypart.Modify();
                            }
                        }
                    }

                    else if ((current_view.ViewType.Equals(TSD.View.ViewTypes.TopView) && mypart.Attributes.DrawOrientationMark.Equals(true)))
                    {
                        orientation.DrawOrientationMark = false;
                        mypart.Attributes = orientation;
                        current_view.Modify();
                        mypart.Modify();

                    }
                    else if ((current_view.ViewType.Equals(TSD.View.ViewTypes.SectionView) && mypart.Attributes.DrawOrientationMark.Equals(true)))
                    {
                        orientation.DrawOrientationMark = false;
                        current_view.Modify();
                        mypart.Modify();

                    }

                }

            }

        }
        public void BOLTMARK_EXACT(TSD.Drawing mydrg)
        {
            Type type_for_BOLT = typeof(TSD.Bolt);
            TSD.DrawingObjectEnumerator enum_for_views = mydrg.GetSheet().GetAllViews();
            while (enum_for_views.MoveNext())
            {
                TSD.View current_view = enum_for_views.Current as TSD.View;
                TSD.Part.PartAttributes orientation = new TSD.Part.PartAttributes();

                TSD.DrawingObjectEnumerator enum_for_orientation = current_view.GetAllObjects(type_for_BOLT);
                while (enum_for_orientation.MoveNext())
                {

                    TSD.Bolt mypart = enum_for_orientation.Current as TSD.Bolt;
                    TSM.ModelObject model_bolt = new TSM.Model().SelectModelObject(mypart.ModelIdentifier);
                    TSM.BoltGroup MYBOLT = model_bolt as TSM.BoltGroup;
                    if (MYBOLT.BoltType.Equals(TSM.BoltGroup.BoltTypeEnum.BOLT_TYPE_WORKSHOP))
                    {
                        mypart.Attributes.Representation = TSD.Bolt.Representation.ExactSolid;
                        mypart.Attributes.Color = TSD.DrawingColors.Green;
                        mypart.Modify();
                    }

                   

                  

                }

            }
            mydrg.CommitChanges();

        }

        public TSD.PointList sorting_points_by_x_asc(TSD.PointList list_of_points)
        {


            for (int i = 0; i < list_of_points.Count; i++)
            {

                for (int j = 0; j < list_of_points.Count; j++)
                {
                    if ((list_of_points[i] as TSG.Point).X < (list_of_points[j] as TSG.Point).X)
                    {
                        TSG.Point temp_point = (list_of_points[i] as TSG.Point);
                        list_of_points[i] = list_of_points[j];
                        list_of_points[j] = temp_point;

                    }

                }
            }
            return list_of_points;

        }

        private double RadianToDegree(double angle)
        {
            return angle * (180.0 / Math.PI);
        }
        public TSG.Point[,] Get_Bolt_properties_matrix_ori(TSD.Bolt drgbolt, TSD.View currentview)
        {

            TSM.Model mymodel = new TSM.Model();

            TSG.Point[,] pointarray = null;
            ////////////Converting drawing object to model object///////////////////////
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(currentview.ViewCoordinateSystem);
            TSM.ModelObject model_bolt = new TSM.Model().SelectModelObject(drgbolt.ModelIdentifier);
            TSD.PointList bolt_ptlist_sorted = new TSD.PointList();
            //////////////////////////////////////////////////////////////////filtering boltarray/////////////////////////////////////////////////////////////////////////
            if (model_bolt.GetType().Equals(typeof(TSM.BoltArray)))
            {
                TSM.BoltArray boltarray = model_bolt as TSM.BoltArray;
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(currentview.ViewCoordinateSystem));
                /////////////////////////////////////////////////////////getting bolt coordinate system for checking of out of plane bolts/////////////////////////////////////////////////
                TSG.CoordinateSystem boltcoord1 = boltarray.GetCoordinateSystem();
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                //////////////////////////////////////////////////////////assigning no of rows and columns to different bolt groups////////////////////////////////////////////////////////



                if ((Convert.ToInt32(boltcoord1.AxisX.Z) == 0) && (Convert.ToInt32(boltcoord1.AxisY.Z) == 0))
                {
                    int number_of_rows = boltarray.GetBoltDistXCount();
                    int number_of_columns = boltarray.GetBoltDistYCount();
                    /////////////////////////////////////////////////////////1x1 bolt matrix///////////////////////////////////////////////////////////////////////////////////////////////////
                    if ((boltarray.GetBoltDistY(0) == 0) && ((boltarray.GetBoltDistX(0) == 0)))
                    {
                        pointarray = new TSG.Point[1, 1];
                    }
                    /////////////////////////////////////////////////////////mx1 bolt matrix////////////////////////////////////////////////////////////////////////////////////////////////////
                    else if ((boltarray.GetBoltDistY(0) == 0) && ((boltarray.GetBoltDistX(0) != 0)))
                    {
                        pointarray = new TSG.Point[number_of_rows + 1, number_of_columns];
                    }
                    /////////////////////////////////////////////////////////1xn bolt matrix//////////////////////////////////////////////////////////////////////////////////////////////////////////
                    else if ((boltarray.GetBoltDistY(0) != 0) && ((boltarray.GetBoltDistX(0) == 0)))
                    {
                        pointarray = new TSG.Point[number_of_rows, number_of_columns + 1];
                    }
                    /////////////////////////////////////////////////////////mxn bolt matrix/////////////////////////////////////////////////////////////////////////////////////////////////////////
                    else
                    {
                        pointarray = new TSG.Point[number_of_rows + 1, number_of_columns + 1];
                    }

                    int count = boltarray.BoltPositions.Count;
                    //////////////////////////////////////////////////Condition for single bolt/////////////////////////////////////////////////////////////////////////////////////////////
                    if (count == 1)
                    {
                        bolt_ptlist_sorted.Add(toviewmatrix.Transform(boltarray.BoltPositions[0] as TSG.Point));

                    }
                    /////////////////////////////////////////////////condition for more than single bolt///////////////////////////////////////////////////////////////////////////////////////////
                    else
                    {
                        bolt_ptlist_sorted = sorting_points_by_x_asc(boltarray.BoltPositions, currentview);
                    }
                    TSD.PointList pointlist_deleted = new TSD.PointList();
                    ////////////////////////////////////////////////////sorting pointlist by y desc////////////////////////////////////////////////////////////////////////////////////////
                    sorting_points_by_y_des(bolt_ptlist_sorted);
                    ArrayList list_of_y = new ArrayList();
                    ////////////////////////////////////////////////////getting unique values of y ///////////////////////////////////////////////////////////////////////////////////////
                    for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                    {
                        double y_value = (bolt_ptlist_sorted[i] as TSG.Point).Y;
                        if (i < bolt_ptlist_sorted.Count - 1)
                        {
                            if (Convert.ToInt32((bolt_ptlist_sorted[i + 1].Y)) != Convert.ToInt32((bolt_ptlist_sorted[i].Y)))
                            {
                                list_of_y.Add(bolt_ptlist_sorted[i].Y);
                            }
                        }
                        else
                        {
                            list_of_y.Add(bolt_ptlist_sorted[i].Y);
                        }
                    }
                    /////////////////////////////////////////////////for each unique y values getting the list of points/////////////////////////////////////////////////////////////////////
                    int b = 0;
                    foreach (double y_value in list_of_y)
                    {
                        int a = 0;
                        TSD.PointList pointlist_y_grp = new TSD.PointList();
                        for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                        {
                            if (bolt_ptlist_sorted[i].Y == y_value)
                            {
                                pointlist_y_grp.Add(bolt_ptlist_sorted[i]);
                            }
                        }
                        sorting_points_by_x_des(pointlist_y_grp);
                        foreach (TSG.Point pt in pointlist_y_grp)
                        {
                            pointarray[b, a] = pt;
                            a++;
                        }
                        b++;
                    }
                    //////////////////////////////////////////////////////////////////////
                }

            }
            return pointarray;
        }
        public void Gusset_Dimensions_with_bolts_reworked(TSM.Beam main_part, TSD.View current_view, ref List<Guid> PARTMARK_TO_RETAIN, ref List<Guid> BOLTMARK_TO_RETAIN,string drg_att)
        {

            TSD.StraightDimensionSet.StraightDimensionSetAttributes dim_font_height = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            dim_font_height.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    dim_font_height.Text.Font.Height = 3.571875;
                }
                else
                {
                    dim_font_height.Text.Font.Height = 3.175;
                }
            } 
            else
            {
                dim_font_height.Text.Font.Height = 2.38125;


            }


            TSD.AngleDimensionAttributes angle_dim_font_height = new TSD.AngleDimensionAttributes();
            angle_dim_font_height.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    angle_dim_font_height.Text.Font.Height = 3.571875;
                }
                else
                {
                    angle_dim_font_height.Text.Font.Height = 3.175;
                }
            }
            else
            {
                angle_dim_font_height.Text.Font.Height = 2.38125;


            }


            TSD.StraightDimensionSet.StraightDimensionSetAttributes fixed_attributes = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            fixed_attributes.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            fixed_attributes.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    fixed_attributes.Text.Font.Height = 3.571875;
                }
                else
                {
                    fixed_attributes.Text.Font.Height = 3.175;
                }
            }
            else
            {
                fixed_attributes.Text.Font.Height = 2.38125;


            }

            ArrayList catalog_values = Getcatalog_values(main_part);
            double top_front;
            if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))

            ///////////////////Values based on which gusset plates are filtered, Outside flange or Web based on view type///////////////////
            {
                top_front = Convert.ToDouble(catalog_values[0]);
            }
            else
            {
                top_front = Convert.ToDouble(catalog_values[2]);
            }

            TSM.Model model = new TSM.Model();
            TSD.DrawingHandler drg_handler = new TSD.DrawingHandler();
            TSD.StraightDimensionSetHandler dim_set_handler = new TSD.StraightDimensionSetHandler();
            TSD.DrawingObjectEnumerator enum_for_parts_drg = current_view.GetAllObjects(typeof(TSD.Part));

            TSD.PointList sorted_pt_y_list_top = new TSD.PointList();
            TSD.PointList sorted_pt_y_list_bottom = new TSD.PointList();

            TSD.PointList final_pt_list_for_rd_top = new TSD.PointList();
            TSD.PointList final_pt_list_for_rd_bottom = new TSD.PointList();

            TSD.PointList final_pt_list_for_rd_top_without_bolt = new TSD.PointList();
            TSD.PointList final_pt_list_for_rd_bottom_without_bolt = new TSD.PointList();
            final_pt_list_for_rd_top.Add(new TSG.Point(0, 0, 0));
            final_pt_list_for_rd_bottom.Add(new TSG.Point(0, 0, 0));
            final_pt_list_for_rd_top_without_bolt.Add(new TSG.Point(0, 0, 0));
            final_pt_list_for_rd_bottom_without_bolt.Add(new TSG.Point(0, 0, 0));

            TSD.StraightDimensionSet.StraightDimensionSetAttributes rdattr = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            rdattr.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
            rdattr.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
            rdattr.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            rdattr.Arrowhead.Head = ArrowheadTypes.FilledArrow;
            rdattr.Text.Font.Color = DrawingColors.Gray70;
            rdattr.Color = DrawingColors.Gray70;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    rdattr.Text.Font.Height = 3.571875;
                }
                else
                {
                    rdattr.Text.Font.Height = 3.175;
                }
            } 
            else
            {
                rdattr.Text.Font.Height = 2.38125;


            }

            ///////////////////////////////Getting all parts/////////////////////////////////////////////////
            while (enum_for_parts_drg.MoveNext())
            {
                TSD.Part mypart = enum_for_parts_drg.Current as TSD.Part;
                TSD.PointList bolt_first_points_list_top_flange = new TSD.PointList();
                TSD.PointList bolt_first_points_list_bottom_flange = new TSD.PointList();
                ArrayList top_left_bolts_list = new ArrayList();
                ArrayList top_right_bolts_list = new ArrayList();
                ArrayList bottom_left_bolts_list = new ArrayList();
                ArrayList bottom_right_bolts_list = new ArrayList();
                ArrayList vertical_bolt_top_list = new ArrayList();
                ArrayList vertical_bolt_bottom_list = new ArrayList();
                TSM.Part plate = new TSM.Model().SelectModelObject(mypart.ModelIdentifier) as TSM.Part;


                string prof_type = "";

                plate.GetReportProperty("PROFILE_TYPE", ref prof_type);
                //////////////////////////////////Filtering all the plates////////////////////////////////
                if (prof_type == "B")
                {

                    ///////////////////////Converting to view coordinate system and getting plate z vector for filtering//////////////////
                    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                    TSG.Vector x_vector_plate = plate.GetCoordinateSystem().AxisX;
                    TSG.Vector y_vector_plate = plate.GetCoordinateSystem().AxisY;
                    TSG.Vector z_vector_plate = TSG.Vector.Cross(x_vector_plate, y_vector_plate);
                    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());


                    TSD.PointList bounding_box_x = bounding_box_sort_x(plate, current_view);
                    TSD.PointList bounding_box_y = bounding_box_sort_y(plate, current_view);

                    TSD.PointList pointlist_plate_corner_points = Get_plate_corner_points(bounding_box_x, bounding_box_y);

                    TSM.ContourPlate contourplate = plate as TSM.ContourPlate;
                    ///////////////////////Filtering the plates whichis normal to the view coordinate system///////////////////
                    if ((Convert.ToInt32(z_vector_plate.Z) != 0))
                    {

                        ///////Filtering for plates which are on the positive side of flange///////////////
                        if ((Convert.ToInt64(bounding_box_y[0].Y) >= Convert.ToInt64(top_front / 2)))
                        {

                            TSM.ModelObjectEnumerator bolt_enum = plate.GetBolts();
                            int a = bolt_enum.GetSize();
                            TSG.Vector vector_for_dim = new TSG.Vector();


                            ////Bolt enum for each gusset/////////////////////////////////

                            if (a > 0)
                            {
                                while (bolt_enum.MoveNext())
                                {
                                    TSM.BoltGroup bolt = bolt_enum.Current as TSM.BoltGroup;
                                    if (bolt.BoltType.Equals(TSM.BoltGroup.BoltTypeEnum.BOLT_TYPE_SITE))
                                    {

                                        //////////Getting point matrix for each bolts/////////////////////////
                                        TSG.Point[,] point_matrix = Get_Bolt_properties_matrix_for_gusset(bolt, current_view, "x_asc");

                                        ////////////////////////////Transforming to current view and getting the x vector for bolt//////////////
                                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                                        TSG.Vector vector_for_sep = new TSG.Vector(bolt.GetCoordinateSystem().AxisX);
                                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                                        /////////Filtering the bolts into four quadrants... Top right, top left, bottom right and bottom left//////////////////////
                                        if (((vector_for_sep.X < 0) && (vector_for_sep.Y < 0)) || ((vector_for_sep.X > 0) && (vector_for_sep.Y > 0)))
                                        {
                                            top_right_bolts_list.Add(bolt);
                                           Guid ID =  plate.Identifier.GUID;
                                           PARTMARK_TO_RETAIN.Add(ID);
                                           Guid BOLT_ID = bolt.Identifier.GUID;
                                           BOLTMARK_TO_RETAIN.Add(BOLT_ID);

                                        }
                                        else if (((vector_for_sep.X > 0) && (vector_for_sep.Y < 0)) || ((vector_for_sep.X < 0) && (vector_for_sep.Y > 0)))
                                        {
                                            top_left_bolts_list.Add(bolt);
                                            Guid ID = plate.Identifier.GUID;
                                            PARTMARK_TO_RETAIN.Add(ID);
                                            Guid BOLT_ID = bolt.Identifier.GUID;
                                            BOLTMARK_TO_RETAIN.Add(BOLT_ID);

                                        }
                                        else
                                        {
                                            vertical_bolt_top_list.Add(bolt);

                                            Guid ID = plate.Identifier.GUID;
                                            PARTMARK_TO_RETAIN.Add(ID);
                                            Guid BOLT_ID = bolt.Identifier.GUID;
                                            BOLTMARK_TO_RETAIN.Add(BOLT_ID);
                                        }
                                    }
                                }
                            }

                            else
                            {
                                if (plate.GetType().Equals(typeof(TSM.ContourPlate)))
                                {


                                    TSD.PointList list_of_points = sorting_points_by_x_asc(Get_Gusset_plate_points(contourplate, current_view));
                                    final_pt_list_for_rd_top_without_bolt.Add(list_of_points[0]);

                                    if (list_of_points.Count == 6)
                                    {
                                        TSD.StraightDimensionSet.StraightDimensionSetAttributes fixe = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                        fixe.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                        if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                        {
                                            if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                            {
                                                fixe.Text.Font.Height = 3.571875;
                                            }
                                            else
                                            {
                                                fixe.Text.Font.Height = 3.175;
                                            }
                                        }
                                        else
                                        {
                                            fixe.Text.Font.Height = 2.38125;


                                        }
                                        
                                        TSD.PointList ptlist_1_gusset_dim = new TSD.PointList();

                                        ptlist_1_gusset_dim.Add(list_of_points[0]);
                                        ptlist_1_gusset_dim.Add(list_of_points[1]);
                                        TSD.PointList ptlist_2_gusset_dim = new TSD.PointList();
                                        ptlist_2_gusset_dim.Add(list_of_points[4]);
                                        ptlist_2_gusset_dim.Add(list_of_points[5]);


                                        dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_1_gusset_dim, new TSG.Vector(-1, 0, 0), 100, fixe);
                                        dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_2_gusset_dim, new TSG.Vector(1, 0, 0), 100, fixe);

                                    }

                                }

                            }

                        }

                        ///////Filtering for plates which are on the bottom flange///////////////
                        else if ((Convert.ToInt64(bounding_box_y[1].Y)) <= -Convert.ToInt64(top_front / 2))
                        {
                            TSM.ModelObjectEnumerator bolt_enum1 = plate.GetBolts();
                            TSG.Vector vector_for_dim = new TSG.Vector();
                            int b = bolt_enum1.GetSize();
                            if (b > 0)
                            {


                                while (bolt_enum1.MoveNext())
                                {
                                    TSM.BoltGroup bolt = bolt_enum1.Current as TSM.BoltGroup;
                                    if (bolt.BoltType.Equals(TSM.BoltGroup.BoltTypeEnum.BOLT_TYPE_SITE))
                                    {

                                        //////////Getting point matrix for each bolts/////////////////////////
                                        TSG.Point[,] point_matrix = Get_Bolt_properties_matrix_for_gusset(bolt, current_view, "x_asc");

                                        ////////////////////////////Transforming to current view and getting the x vector for bolt//////////////
                                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                                        TSG.Vector vector_for_sep = new TSG.Vector(bolt.GetCoordinateSystem().AxisX);
                                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                                        /////////Filtering the bolts into four quadrants... Top right, top left, bottom right and bottom left//////////////////////
                                        if (((vector_for_sep.X < 0) && (vector_for_sep.Y < 0)) || ((vector_for_sep.X > 0) && (vector_for_sep.Y > 0)))
                                        {
                                            bottom_left_bolts_list.Add(bolt);
                                            Guid ID = plate.Identifier.GUID;
                                            PARTMARK_TO_RETAIN.Add(ID);
                                            Guid BOLT_ID = bolt.Identifier.GUID;
                                            BOLTMARK_TO_RETAIN.Add(BOLT_ID);

                                        }
                                        else if (((vector_for_sep.X > 0) && (vector_for_sep.Y < 0)) || ((vector_for_sep.X < 0) && (vector_for_sep.Y > 0)))
                                        {
                                            bottom_right_bolts_list.Add(bolt);
                                            Guid ID = plate.Identifier.GUID;
                                            PARTMARK_TO_RETAIN.Add(ID);
                                            Guid BOLT_ID = bolt.Identifier.GUID;
                                            BOLTMARK_TO_RETAIN.Add(BOLT_ID);
                                        }
                                        else
                                        {
                                            vertical_bolt_bottom_list.Add(bolt);
                                            Guid ID = plate.Identifier.GUID;
                                            PARTMARK_TO_RETAIN.Add(ID);
                                            Guid BOLT_ID = bolt.Identifier.GUID;
                                            BOLTMARK_TO_RETAIN.Add(BOLT_ID);
                                        }

                                    }



                                }
                            }

                            else
                            {
                                if (plate.GetType().Equals(typeof(TSM.ContourPlate)))
                                {
                                    TSD.PointList list_of_points = sorting_points_by_x_asc(Get_Gusset_plate_points(contourplate, current_view));
                                    final_pt_list_for_rd_bottom_without_bolt.Add(list_of_points[0]);

                                    if (list_of_points.Count == 6)
                                    {
                                        TSD.PointList ptlist_1_gusset_dim = new TSD.PointList();
                                        TSD.StraightDimensionSet.StraightDimensionSetAttributes fixe = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                        fixe.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                        if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                        {
                                            if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                            {
                                                fixe.Text.Font.Height = 3.571875;
                                            }
                                            else
                                            {
                                                fixe.Text.Font.Height = 3.175;
                                            }
                                        }
                                        else
                                        {
                                            fixe.Text.Font.Height = 2.38125;


                                        }
                                        ptlist_1_gusset_dim.Add(list_of_points[0]);
                                        ptlist_1_gusset_dim.Add(list_of_points[1]);
                                        TSD.PointList ptlist_2_gusset_dim = new TSD.PointList();
                                        ptlist_2_gusset_dim.Add(list_of_points[4]);
                                        ptlist_2_gusset_dim.Add(list_of_points[5]);
                                        dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_1_gusset_dim, new TSG.Vector(-1, 0, 0), 100, fixe);
                                        dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_2_gusset_dim, new TSG.Vector(1, 0, 0), 100, fixe);

                                    }
                                }
                            }

                        }



                    }
                    TSD.StraightDimensionSet.StraightDimensionSetAttributes fixedattr = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                    fixedattr.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                    fixedattr.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                    {
                        if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                        {
                            fixedattr.Text.Font.Height = 3.571875;
                        }
                        else
                        {
                            fixedattr.Text.Font.Height = 3.175;
                        }
                    }
                    else
                    {
                        fixedattr.Text.Font.Height = 2.38125;


                    }

                    TSD.StraightDimensionSet.StraightDimensionSetAttributes OUSIDE = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                    OUSIDE.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                    OUSIDE.ShortDimension = TSD.DimensionSetBaseAttributes.ShortDimensionTypes.Inside;
                    OUSIDE.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                    {
                        if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                        {
                            OUSIDE.Text.Font.Height = 3.571875;
                        }
                        else
                        {
                            OUSIDE.Text.Font.Height = 3.175;
                        }
                    }
                    else
                    {
                        OUSIDE.Text.Font.Height = 2.38125;


                    }

                    ////////Declaring pointlists for each quadrant dimenrions and for RD///////////////////
                    TSD.PointList point_for_dim_top_right = new TSD.PointList();
                    TSD.PointList point_for_dim_top_left = new TSD.PointList();
                    TSD.PointList point_for_dim_bottom_right = new TSD.PointList();
                    TSD.PointList point_for_dim_bottom_left = new TSD.PointList();
                    TSD.PointList point_for_vertical_dim_top_right = new TSD.PointList();
                    TSD.PointList point_for_vertical_dim_bottom_right = new TSD.PointList();
                    TSD.PointList point_for_vertical_dim_top_left = new TSD.PointList();
                    TSD.PointList point_for_vertical_dim_bottom_left = new TSD.PointList();


                    double view_scale = current_view.Attributes.Scale;


                    ///////////////////////top_right_bolts_list///////////////////////////////
                    //try
                    //{

                    if (top_right_bolts_list.Count > 0)
                    {
                        TSD.PointList pointlist_for_lock = new TSD.PointList();
                        ArrayList distances = new ArrayList();
                        int ij = 0;
                        foreach (TSM.BoltGroup boltarray in top_right_bolts_list)
                        {
                            TSD.PointList point_for_33_dim = new TSD.PointList();
                            //////////Getting point matrix for each bolt array/////////////
                            TSG.Point[,] point_matrix = Get_Bolt_properties_matrix_for_gusset(boltarray, current_view, "x_asc");

                            int c = point_matrix.GetLength(0);
                            int d = point_matrix.GetLength(1);

                            TSG.Point[,] point_matrix1 = new TSG.Point[c, d];

                        


                            if (d > 1)
                            {
                                if (point_matrix[0, 0].X > point_matrix[0, 1].X)
                                {
                                    for (int i = 0; i < point_matrix.GetLength(0); i++)
                                    {
                                        for (int j = 0; j < point_matrix.GetLength(1); j++)
                                        {
                                            point_matrix1[i, j] = point_matrix[i, d - j - 1];

                                        }

                                    }
                                }
                                else
                                {
                                    point_matrix1 = point_matrix;
                                }

                            }
                            else
                            {
                                point_matrix1 = point_matrix;
                            }
                            if (c > 1)
                            {
                                for (int k = 0; k < point_matrix1.GetLength(0); k++)
                                {

                                    point_for_33_dim.Add(point_matrix1[k, 0]);

                                }
                                double dist_for_dim = 100;
                                if (d > 1)
                                {
                                    dist_for_dim = TSG.Distance.PointToPoint(point_matrix[0, 0], point_matrix1[0, d - 1]) + 100;
                                }
                                double dist_for_anglular_dim = (TSG.Distance.PointToPoint(point_matrix1[c - 1, 0], point_matrix1[0, 0]) + 450) / view_scale;

                                try
                                {

                                    for (int l = 0; l < d; l++)
                                    {
                                        if (ij == 0)
                                        {
                                            TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, point_matrix1[c - 1, l], point_matrix1[0, l], new TSG.Point(point_matrix1[c - 1, l].X, point_matrix1[0, l].Y, 0), dist_for_anglular_dim,angle_dim_font_height);
                                            angledim1.Insert();
                                        }
                                    }

                                    TSG.Vector vector_for_dim = TSG.Vector.Cross(new TSG.Vector(point_matrix1[0, 0] - point_matrix1[1, 0]), new TSG.Vector(0, 0, -1));
                                    dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, point_for_33_dim, vector_for_dim, -dist_for_dim, OUSIDE);
                                }
                                catch
                                {

                                }
                            }
                            else
                            {
                                point_for_dim_top_right.Add(point_matrix1[0, 0]);
                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                                TSG.Vector vector_x = new TSG.Vector(boltarray.GetCoordinateSystem().AxisX);
                                TSG.Vector vector_y = new TSG.Vector(boltarray.GetCoordinateSystem().AxisY);
                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                TSD.AngleDimensionAttributes fi = new TSD.AngleDimensionAttributes();
                                fi.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                {
                                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                    {
                                        fi.Text.Font.Height = 3.571875;
                                    }
                                    else
                                    {
                                        fi.Text.Font.Height = 3.175;
                                    }
                                }
                                else
                                {
                                    fi.Text.Font.Height = 2.38125;


                                }

                                double angle = Math.Abs((vector_x.GetAngleBetween(new TSG.Vector(1, 0, 0))));
                                double y_value = Math.Tan(angle) * 100;
                                TSG.Point p1 = point_matrix1[0, 0] + new TSG.Point(100, 0, 0);
                                TSG.Point p2 = p1 + new TSG.Point(0, y_value, 0);
                                double distance = 200 / view_scale;

                                TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, point_matrix1[0, 0], p2, p1, distance, fi);


                                

                                //TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, point_matrix1[0, 0], vector_y, new TSG.Vector(1, 0, 0), 200);
                                angledim1.Insert();
                            }




                            ///Adding first row points of all bolt enum in the pointlist//////////////////////
                            for (int j = 0; j < point_matrix1.GetLength(1); j++)
                            {
                                point_for_dim_top_right.Add(point_matrix1[0, j]);

                            }

                            if (c > 1)
                            {
                                distances.Add(Convert.ToInt16(TSG.Distance.PointToPoint(point_matrix1[c - 1, 0], point_matrix1[0, 0])));
                            }
                            else
                            {
                                distances.Add(20);

                            }
                            ij++;
                        }
                        sorting_points_by_y_des(point_for_dim_top_right);
                        sorting_points_by_x_des(distances);
                        if (point_for_dim_top_right.Count > 1)
                        {
                            try
                            {
                                TSG.Vector vector_for_dim_pitch = new TSG.Vector(point_for_dim_top_right[0] - point_for_dim_top_right[point_for_dim_top_right.Count - 1]).Cross(new TSG.Vector(0, 0, -1));
                                vector_for_dim_pitch.Normalize();
                                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, point_for_dim_top_right, vector_for_dim_pitch, Convert.ToDouble(distances[distances.Count - 1]) + 250, fixedattr);
                            }
                            catch
                            {
                            }
                        }
                        //Sorting the points and getting the topmost point for all dimensions//////////////////



                        //////////Adding the topmost point in the RD- top bottom depending on top/bottom flange gusset/////////////////
                        if (point_for_dim_top_right[0].Y > 0)
                        {

                            final_pt_list_for_rd_top.Add(point_for_dim_top_right[0]);
                        }
                        else
                        {

                            final_pt_list_for_rd_bottom.Add(point_for_dim_top_right[0]);
                        }

                        ////////////////////Creating vertical dimension for the topmost point///////////////////////
                        point_for_vertical_dim_top_right.Add(point_for_dim_top_right[0]);
                        point_for_vertical_dim_top_right.Add(new TSG.Point(point_for_dim_top_right[0].X, top_front / 2, 0));
                        pointlist_for_lock.Add(point_for_vertical_dim_top_right[0]);
                        pointlist_for_lock.Add(pointlist_plate_corner_points[3]);
                        double dist_for_vertical_dim = Math.Abs(point_for_vertical_dim_top_right[0].X - bounding_box_x[1].X);
                        double dist_for_vertical_dim_y = Math.Abs(point_for_vertical_dim_top_right[0].Y - bounding_box_y[1].Y);
                        try
                        {
                            TSD.StraightDimensionSet.StraightDimensionSetAttributes fixe = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                            fixe.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                            fixe.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                            {
                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                {
                                    fixe.Text.Font.Height = 3.571875;
                                }
                                else
                                {
                                    fixe.Text.Font.Height = 3.175;
                                }
                            }
                           
                            else
                            {
                                fixe.Text.Font.Height = 2.38125;
                            }
                            dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, point_for_vertical_dim_top_right, new TSG.Vector(1, 0, 0), dist_for_vertical_dim + 300, fixe);
                        }
                        catch
                        {
                        }
                        try
                        {
                            TSD.StraightDimensionSet.StraightDimensionSetAttributes fixe = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                            fixe.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                            fixe.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                            {
                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                {
                                    fixe.Text.Font.Height = 3.571875;
                                }
                                else
                                {
                                    fixe.Text.Font.Height = 3.175;
                                }
                            }
                            
                            else
                            {
                                fixe.Text.Font.Height = 2.38125;
                            }
                            
                            dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, pointlist_for_lock, new TSG.Vector(0, 1, 0), dist_for_vertical_dim_y + 200, fixe);
                        }
                        catch
                        {
                        }

                    }




                    //////////////////////////////top_left_bolts_list//////////////////////////////////////////////////////////

                    if (top_left_bolts_list.Count > 0)
                    {
                        TSD.PointList pointlist_for_lock = new TSD.PointList();
                        ArrayList distances = new ArrayList();
                        int jk = 0;
                        foreach (TSM.BoltGroup boltarray in top_left_bolts_list)
                        {
                            TSD.PointList point_for_33_dim = new TSD.PointList();
                            //////////Getting point matrix for each bolt array/////////////
                            TSG.Point[,] point_matrix = Get_Bolt_properties_matrix_for_gusset(boltarray, current_view, "x_asc");
                            ///Adding first row points of all bolt enum in the pointlist//////////////////////
                            int c = point_matrix.GetLength(0);
                            int d = point_matrix.GetLength(1);
                            TSG.Point[,] point_matrix1 = new TSG.Point[c, d];



                            if (d > 1)
                            {
                                if (point_matrix[0, 0].X > point_matrix[0, 1].X)
                                {
                                    for (int i = 0; i < point_matrix.GetLength(0); i++)
                                    {
                                        for (int j = 0; j < point_matrix.GetLength(1); j++)
                                        {
                                            point_matrix1[i, j] = point_matrix[i, d - j - 1];

                                        }

                                    }
                                }
                                else
                                {
                                    point_matrix1 = point_matrix;
                                }

                            }
                            else
                            {
                                point_matrix1 = point_matrix;
                            }
                            if (c > 1)
                            {

                                for (int j = 0; j < point_matrix1.GetLength(1); j++)
                                {
                                    point_for_dim_top_left.Add(point_matrix1[0, j]);

                                }
                                for (int k = 0; k < point_matrix1.GetLength(0); k++)
                                {

                                    point_for_33_dim.Add(point_matrix1[k, 0]);

                                }
                                double dist_for_dim = 100;
                                if (point_matrix.GetLength(1) > 1)
                                {
                                    dist_for_dim = TSG.Distance.PointToPoint(point_matrix1[0, 0], point_matrix1[0, d - 1]) + 100;
                                }
                                double dist_for_anglular_dim = (TSG.Distance.PointToPoint(point_matrix1[c - 1, 0], point_matrix1[0, 0]) + 450) / view_scale;

                                try
                                {
                                    for (int l = 0; l < d; l++)
                                    {
                                        if (jk == 0)
                                        {
                                            TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, point_matrix1[c - 1, l], point_matrix1[0, l], new TSG.Point(point_matrix1[c - 1, l].X, point_matrix1[0, l].Y, 0), dist_for_anglular_dim,angle_dim_font_height);
                                            angledim1.Insert();
                                        }
                                    }
                                    TSG.Vector vector_for_dim = TSG.Vector.Cross(new TSG.Vector(point_matrix1[1, 0] - point_matrix1[0, 0]), new TSG.Vector(0, 0, 1));
                                    dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, point_for_33_dim, vector_for_dim, dist_for_dim, OUSIDE);
                                }
                                catch
                                {

                                }
                            }
                            else
                            {
                                point_for_dim_top_left.Add(point_matrix1[0, 0]);
                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                                TSG.Vector vector_x = new TSG.Vector(boltarray.GetCoordinateSystem().AxisX);
                                TSG.Vector vector_y = new TSG.Vector(boltarray.GetCoordinateSystem().AxisY);
                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                TSD.AngleDimensionAttributes fi = new TSD.AngleDimensionAttributes();
                                fi.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;

                                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                {
                                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                    {
                                        fi.Text.Font.Height = 3.571875;
                                    }
                                    else
                                    {
                                        fi.Text.Font.Height = 3.175;
                                    }
                                }
                              
                                else
                                {
                                    fi.Text.Font.Height = 2.38125;
                                }
                                double angle = Math.Abs((vector_x.GetAngleBetween(new TSG.Vector(-1, 0, 0))));
                                double y_value = Math.Tan(angle) * 100;
                                TSG.Point p1 = point_matrix1[0, 0] - new TSG.Point(100, 0, 0);
                                TSG.Point p2 = p1 + new TSG.Point(0, y_value, 0);

                                double distance = 200 / view_scale;


                                TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, point_matrix1[0, 0], p2, p1, distance, fi);




                                //TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, point_matrix1[0, 0],new TSG.Vector(1, 0, 0), vector_x,  200, fi);
                                angledim1.Insert();
                            }




                            //point_for_dim_top_left.Add(point_matrix[0, 0]);
                            if (c > 1)
                            {
                                distances.Add(TSG.Distance.PointToPoint(point_matrix1[c - 1, 0], point_matrix1[0, 0]));
                            }
                            else
                            {
                                distances.Add(20);

                            }
                            jk++;

                        }
                        sorting_points_by_x_des(distances);
                        sorting_points_by_x_des(point_for_dim_bottom_left);
                        if (point_for_dim_top_left.Count > 1)
                        {
                            try
                            {
                                TSG.Vector vector_for_dim_pitch = new TSG.Vector(point_for_dim_top_left[0] - point_for_dim_top_left[point_for_dim_top_left.Count - 1]).Cross(new TSG.Vector(0, 0, 1));
                                vector_for_dim_pitch.Normalize();
                                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, point_for_dim_top_left, vector_for_dim_pitch, Convert.ToDouble(distances[distances.Count - 1]) + 100, fixedattr);
                            }
                            catch
                            {
                            }
                        }
                        //Sorting the points and getting the topmost point for all dimensions//////////////////
                        sorting_points_by_y_des(point_for_dim_top_left);
                        //////////Adding the topmost point in the RD- top bottom depending on top/bottom flange gusset/////////////////
                        if (point_for_dim_top_left[0].Y > 0)
                        {

                            final_pt_list_for_rd_top.Add(point_for_dim_top_left[0]);
                        }
                        else
                        {

                            final_pt_list_for_rd_bottom.Add(point_for_dim_top_left[0]);
                        }


                        ////////////////////Creating vertical dimension for the topmost point///////////////////////
                        point_for_vertical_dim_top_left.Add(point_for_dim_top_left[0]);
                        point_for_vertical_dim_top_left.Add(new TSG.Point(point_for_dim_top_left[0].X, top_front / 2, 0));
                        pointlist_for_lock.Add(point_for_dim_top_left[0]);
                        pointlist_for_lock.Add(pointlist_plate_corner_points[2]);

                        double dist_for_vertical_dim = Math.Abs(point_for_vertical_dim_top_left[0].X - bounding_box_x[0].X);
                        double dist_for_vertical_dim_y = Math.Abs(point_for_vertical_dim_top_left[0].Y - bounding_box_y[0].Y);
                        try
                        {
                            TSD.StraightDimensionSet.StraightDimensionSetAttributes fix = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                            fix.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                            fix.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;

                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                            {
                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                {
                                    fix.Text.Font.Height = 3.571875;
                                }
                                else
                                {
                                    fix.Text.Font.Height = 3.175;
                                }
                            }
                          
                            else
                            {
                                fix.Text.Font.Height = 2.38125;
                            }
                            dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, point_for_vertical_dim_top_left, new TSG.Vector(-1, 0, 0), dist_for_vertical_dim + 300, fix);
                        }
                        catch
                        {

                        }

                        try
                        {
                            TSD.StraightDimensionSet.StraightDimensionSetAttributes fixe = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                            fixe.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                            fixe.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                            {
                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                {
                                    fixe.Text.Font.Height = 3.571875;
                                }
                                else
                                {
                                    fixe.Text.Font.Height = 3.175;
                                }
                            }
                           
                            else
                            {
                                fixe.Text.Font.Height = 2.38125;
                            }
                            dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, pointlist_for_lock, new TSG.Vector(0, 1, 0), dist_for_vertical_dim_y + 200, fixe);
                        }
                        catch
                        {
                        }

                    }
                    /////////////////////////////bottom_left_bolts_list////////////////////////////////////
                    if (bottom_left_bolts_list.Count > 0)
                    {
                        ArrayList distances = new ArrayList();
                        TSD.PointList pointlist_for_lock = new TSD.PointList();
                        int kl = 0;
                        foreach (TSM.BoltGroup boltarray in bottom_left_bolts_list)
                        {
                            TSD.PointList point_for_33_dim = new TSD.PointList();
                            //////////Getting point matrix for each bolt array/////////////
                            TSG.Point[,] point_matrix = Get_Bolt_properties_matrix_for_gusset(boltarray, current_view, "x_asc");
                            int c = point_matrix.GetLength(0);
                            int d = point_matrix.GetLength(1);
                            TSG.Point[,] point_matrix1 = new TSG.Point[c, d];
                            ///Adding first row points of all bolt enum in the pointlist//////////////////////




                            if (d > 1)
                            {
                                if (point_matrix[0, 0].X < point_matrix[0, 1].X)
                                {
                                    for (int i = 0; i < point_matrix.GetLength(0); i++)
                                    {
                                        for (int j = 0; j < point_matrix.GetLength(1); j++)
                                        {
                                            point_matrix1[i, j] = point_matrix[i, d - j - 1];

                                        }

                                    }
                                }
                                else
                                {
                                    point_matrix1 = point_matrix;
                                }

                            }
                            else
                            {
                                point_matrix1 = point_matrix;
                            }
                            if (c > 1)
                            {
                                for (int j = 0; j < point_matrix1.GetLength(1); j++)
                                {
                                    point_for_dim_bottom_right.Add(point_matrix1[0, j]);

                                }

                                for (int k = 0; k < point_matrix1.GetLength(0); k++)
                                {

                                    point_for_33_dim.Add(point_matrix1[k, 0]);

                                }
                                double dist_for_dim = 100;
                                if (point_matrix.GetLength(1) > 1)
                                {
                                    dist_for_dim = TSG.Distance.PointToPoint(point_matrix1[0, 0], point_matrix1[0, d - 1]) + 100;
                                }
                                if (c > 1)
                                {
                                    distances.Add(TSG.Distance.PointToPoint(point_matrix1[c - 1, 0], point_matrix1[0, 0]));
                                }
                                else
                                {
                                    distances.Add(20);

                                }
                                double dist_for_anglular_dim = (TSG.Distance.PointToPoint(point_matrix1[c - 1, 0], point_matrix1[0, 0]) + 450) / view_scale;
                                try
                                {
                                    TSD.AngleDimensionAttributes fi = new TSD.AngleDimensionAttributes();
                                    fi.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                        {
                                            fi.Text.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            fi.Text.Font.Height = 3.175;
                                        }
                                    }
                                   
                                    else
                                    {
                                        fi.Text.Font.Height = 2.38125;


                                    }
                                    for (int l = 0; l < d; l++)
                                    {
                                        if (kl == 0)
                                        {
                                            TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, point_matrix1[c - 1, l], point_matrix1[0, l], new TSG.Point(point_matrix1[c - 1, l].X, point_matrix1[0, l].Y, 0), dist_for_anglular_dim, fi);
                                            angledim1.Insert();
                                        }
                                    }
                                    TSG.Vector vector_for_dim = TSG.Vector.Cross(new TSG.Vector(point_matrix1[1, 0] - point_matrix1[0, 0]), new TSG.Vector(0, 0, -1));
                                    dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, point_for_33_dim, vector_for_dim, dist_for_dim, OUSIDE);
                                }
                                catch
                                {

                                }
                            }
                            else
                            {
                                point_for_dim_bottom_right.Add(point_matrix1[0, 0]);
                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                                TSG.Vector vector_x = new TSG.Vector(boltarray.GetCoordinateSystem().AxisX);
                                TSG.Vector vector_y = new TSG.Vector(boltarray.GetCoordinateSystem().AxisY);
                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                TSD.AngleDimensionAttributes fi = new TSD.AngleDimensionAttributes();
                                fi.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                {
                                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                    {
                                        fi.Text.Font.Height = 3.571875;
                                    }
                                    else
                                    {
                                        fi.Text.Font.Height = 3.175;
                                    }
                                }
                                else
                                {
                                    fi.Text.Font.Height = 2.38125;


                                }

                                double angle = Math.Abs( ( vector_x.GetAngleBetween(new TSG.Vector(-1, 0, 0))));
                                double y_value = Math.Tan(angle) * 100;
                                TSG.Point p1 = point_matrix1[0, 0] - new TSG.Point(100, 0, 0);
                                TSG.Point p2 = p1 - new TSG.Point(0, y_value, 0);

                                double distance = 200 / view_scale;

                               
                               TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, point_matrix1[0, 0], p2, p1, distance, fi);

                                angledim1.Insert();
                            }


                            kl++;

                        }

                        sorting_points_by_y_asc(point_for_dim_bottom_right);
                        sorting_points_by_x_des(distances);
                        if (point_for_dim_bottom_right.Count > 1)
                        {
                            try
                            {
                                TSG.Vector vector_for_dim_pitch = new TSG.Vector(point_for_dim_bottom_right[0] - point_for_dim_bottom_right[point_for_dim_bottom_right.Count - 1]).Cross(new TSG.Vector(0, 0, -1));
                                vector_for_dim_pitch.Normalize();
                                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, point_for_dim_bottom_right, vector_for_dim_pitch, Convert.ToDouble(distances[distances.Count - 1]) + 300, fixedattr);
                            }
                            catch
                            {
                            }
                        }
                        //Sorting the points and getting the topmost point for all dimensions//////////////////
                        sorting_points_by_y_asc(point_for_dim_bottom_right);
                        //////////Adding the topmost point in the RD- top bottom depending on top/bottom flange gusset/////////////////
                        if (point_for_dim_bottom_right[0].Y > 0)
                        {

                            final_pt_list_for_rd_top.Add(point_for_dim_bottom_right[0]);
                        }
                        else
                        {

                            final_pt_list_for_rd_bottom.Add(point_for_dim_bottom_right[0]);
                        }

                        ////////////////////Creating vertical dimension for the topmost point///////////////////////

                        point_for_vertical_dim_bottom_right.Add(point_for_dim_bottom_right[0]);
                        point_for_vertical_dim_bottom_right.Add(new TSG.Point(point_for_dim_bottom_right[0].X, top_front / 2, 0));
                        double dist_for_vertical_dim = Math.Abs(point_for_vertical_dim_bottom_right[0].X - bounding_box_y[0].X);
                        pointlist_for_lock.Add(point_for_vertical_dim_bottom_right[0]);
                        pointlist_for_lock.Add(pointlist_plate_corner_points[1]);
                        double dist_for_vertical_dim_y = Math.Abs(point_for_vertical_dim_bottom_right[0].Y - bounding_box_y[0].Y);

                        try
                        {
                            TSD.StraightDimensionSet.StraightDimensionSetAttributes fixe = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                            fixe.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                            fixe.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                            {
                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                {
                                    fixe.Text.Font.Height = 3.571875;
                                }
                                else
                                {
                                    fixe.Text.Font.Height = 3.175;
                                }
                            }
                            else
                            {
                                fixe.Text.Font.Height = 2.38125;


                            }
                            dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, point_for_vertical_dim_bottom_right, new TSG.Vector(-1, 0, 0), dist_for_vertical_dim + 200, fixe);
                        }
                        catch
                        {

                        }

                        try
                        {
                            TSD.StraightDimensionSet.StraightDimensionSetAttributes fixe = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                            fixe.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                            fixe.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                            {
                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                {
                                    fixe.Text.Font.Height = 3.571875;
                                }
                                else
                                {
                                    fixe.Text.Font.Height = 3.175;
                                }
                            }
                            else
                            {
                                fixe.Text.Font.Height = 2.38125;
                            }
                            dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, pointlist_for_lock, new TSG.Vector(0, -1, 0), dist_for_vertical_dim_y + 200, fixe);
                        }
                        catch
                        {

                        }
                    }
                    //////////////negative_down_bolts_list/////////////////////////////////////////////
                    if (bottom_right_bolts_list.Count > 0)
                    {
                        ArrayList distances = new ArrayList();
                        TSD.PointList pointlist_for_lock = new TSD.PointList();
                        int lm = 0;
                        foreach (TSM.BoltGroup boltarray in bottom_right_bolts_list)
                        {
                            TSD.PointList point_for_33_dim = new TSD.PointList();
                            //////////Getting point matrix for each bolt array/////////////
                            TSG.Point[,] point_matrix = Get_Bolt_properties_matrix_for_gusset(boltarray, current_view, "x_asc");

                            int c = point_matrix.GetLength(0);
                            int d = point_matrix.GetLength(1);
                            TSG.Point[,] point_matrix1 = new TSG.Point[c, d];

                            //point_matrix1 = point_matrix;
                            ///Flipping bolt matrix left right vs right left in case of top right and bottom left only; d>1 condition-flipping only in case of more than one rows////////////////
                            if (d > 1)
                            {





                            }



                            if (d > 1)
                            {
                                if (point_matrix[0, 0].X < point_matrix[0, 1].X)
                                {
                                    for (int i = 0; i < point_matrix.GetLength(0); i++)
                                    {
                                        for (int j = 0; j < point_matrix.GetLength(1); j++)
                                        {
                                            point_matrix1[i, j] = point_matrix[i, d - j - 1];

                                        }

                                    }
                                }
                                else
                                {
                                    point_matrix1 = point_matrix;
                                }

                            }
                            else
                            {
                                point_matrix1 = point_matrix;
                            }

                            if (c > 1)
                            {

                                for (int k = 0; k < point_matrix1.GetLength(0); k++)
                                {

                                    point_for_33_dim.Add(point_matrix1[k, 0]);


                                }
                                double dist_for_dim = 100;
                                if (d > 1)
                                {
                                    dist_for_dim = TSG.Distance.PointToPoint(point_matrix1[0, 0], point_matrix1[0, d - 1]) + 100;
                                }

                                double dist_for_anglular_dim = (TSG.Distance.PointToPoint(point_matrix1[c - 1, 0], point_matrix1[0, 0]) + 450) / view_scale;
                                if (c > 1)
                                {
                                    distances.Add(TSG.Distance.PointToPoint(point_matrix1[c - 1, 0], point_matrix1[0, 0]));
                                }
                                else
                                {
                                    distances.Add(20);

                                }
                                try
                                {
                                    TSD.AngleDimensionAttributes fi = new TSD.AngleDimensionAttributes();
                                    fi.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                        {
                                            fi.Text.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            fi.Text.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        fi.Text.Font.Height = 2.38125;
                                    }

                                    for (int l = 0; l < d; l++)
                                    {
                                        if (lm == 0)
                                        {
                                            TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, point_matrix1[c - 1, l], point_matrix1[0, l], new TSG.Point(point_matrix1[c - 1, l].X, point_matrix1[0, l].Y, 0), dist_for_anglular_dim, fi);
                                            angledim1.Insert();
                                        }
                                    }
                                    TSG.Vector vector_for_dim = TSG.Vector.Cross(new TSG.Vector(point_matrix1[0, 0] - point_matrix1[c - 1, 0]), new TSG.Vector(0, 0, 1));
                                    dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, point_for_33_dim, vector_for_dim, dist_for_dim, OUSIDE);
                                }
                                catch
                                {

                                }
                            }
                            else
                            {
                                TSD.AngleDimensionAttributes fi = new TSD.AngleDimensionAttributes();
                                fi.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                {
                                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                    {
                                        fi.Text.Font.Height = 3.571875;
                                    }
                                    else
                                    {
                                        fi.Text.Font.Height = 3.175;
                                    }
                                }
                                else
                                {
                                    fi.Text.Font.Height = 2.38125;
                                }
                                point_for_dim_bottom_left.Add(point_matrix1[0, 0]);
                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                                TSG.Vector vector_x = new TSG.Vector(boltarray.GetCoordinateSystem().AxisX);
                                TSG.Vector vector_y = new TSG.Vector(boltarray.GetCoordinateSystem().AxisY);
                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());


                                double angle = Math.Abs((vector_x.GetAngleBetween(new TSG.Vector(1, 0, 0))));
                                double y_value = Math.Tan(angle) * 100;
                                TSG.Point p1 = point_matrix1[0, 0] + new TSG.Point(100, 0, 0);
                                TSG.Point p2 = p1 - new TSG.Point(0, y_value, 0);
                                double distance = 200 / view_scale;

                                TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, point_matrix1[0, 0], p2, p1, distance, fi);

                                angledim1.Insert();
                            }

                            ///Adding first row points of all bolt enum in the pointlist//////////////////////
                            for (int j = 0; j < point_matrix1.GetLength(1); j++)
                            {
                                point_for_dim_bottom_left.Add(point_matrix1[0, j]);

                            }

                            lm++;

                        }
                        sorting_points_by_x_des(distances);

                        sorting_points_by_y_asc(point_for_dim_bottom_left);
                        if (point_for_dim_bottom_left.Count > 1)
                        {
                            try
                            {
                                TSG.Vector vector_for_dim_pitch = new TSG.Vector(point_for_dim_bottom_left[0] - point_for_dim_bottom_left[point_for_dim_bottom_left.Count - 1]).Cross(new TSG.Vector(0, 0, -1));
                                vector_for_dim_pitch.Normalize();
                                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, point_for_dim_bottom_left, vector_for_dim_pitch, Convert.ToDouble(distances[distances.Count - 1]) + 300, fixedattr);
                            }
                            catch
                            {
                            }
                        }
                        //Sorting the points and getting the topmost point for all dimensions//////////////////
                        sorting_points_by_y_asc(point_for_dim_bottom_left);
                        //////////Adding the topmost point in the RD- top bottom depending on top/bottom flange gusset/////////////////
                        if (point_for_dim_bottom_left[0].Y > 0)
                        {

                            final_pt_list_for_rd_top.Add(point_for_dim_bottom_left[0]);
                        }
                        else
                        {

                            final_pt_list_for_rd_bottom.Add(point_for_dim_bottom_left[0]);
                        }

                        ////////////////////Creating vertical dimension for the topmost point///////////////////////
                        point_for_vertical_dim_bottom_left.Add(point_for_dim_bottom_left[0]);
                        point_for_vertical_dim_bottom_left.Add(new TSG.Point(point_for_dim_bottom_left[0].X, top_front / 2, 0));
                        pointlist_for_lock.Add(point_for_dim_bottom_left[0]);
                        pointlist_for_lock.Add(pointlist_plate_corner_points[0]);
                        double dist_for_vertical_dim_y = Math.Abs(point_for_vertical_dim_bottom_left[0].Y - bounding_box_y[1].Y);



                        double dist_for_vertical_dim = Math.Abs(point_for_vertical_dim_bottom_left[0].X - bounding_box_x[1].X);
                        try
                        {
                            dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, point_for_vertical_dim_bottom_left, new TSG.Vector(1, 0, 0), dist_for_vertical_dim + 300, fixedattr);
                        }
                        catch
                        {
                        }
                        try
                        {
                            TSD.StraightDimensionSet.StraightDimensionSetAttributes fixe = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                            fixe.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                            fixe.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                            {
                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                {
                                    fixe.Text.Font.Height = 3.571875;
                                }
                                else
                                {
                                    fixe.Text.Font.Height = 3.175;
                                }
                            }
                            else
                            {
                                fixe.Text.Font.Height = 2.38125;


                            }
                            dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, pointlist_for_lock, new TSG.Vector(0, -1, 0), dist_for_vertical_dim_y + 200, fixe);
                        }
                        catch
                        {
                        }

                    }



                }




            }

            //TSD.PointList assyboundingbox = bounding_box_sort_x(main_part.GetAssembly(), current_view);

            // double distance_for_rd = assyboundingbox[1].Y + 500;
            double distance_for_rd = 500;
            ///////////Creating RD dimension for all the gussets - both top and bottom//////////////////////////////////////////////////////
            try
            {
                double distance = Math.Abs(Math.Abs(final_pt_list_for_rd_top[0].Y) - current_view.RestrictionBox.MaxPoint.Y);
                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, final_pt_list_for_rd_top, new TSG.Vector(0, 1, 0), distance + 200, rdattr);

            }
            catch
            {
            }
            try
            {
                double distance = Math.Abs(Math.Abs(final_pt_list_for_rd_top[0].Y) - current_view.RestrictionBox.MinPoint.Y);
                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, final_pt_list_for_rd_bottom, new TSG.Vector(0, -1, 0), distance + 100, rdattr);
            }
            catch
            {
            }
            try
            {
                //sorting_points_by_x_asc(final_pt_list_for_rd_bottom_without_bolt);
                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, final_pt_list_for_rd_bottom_without_bolt, new TSG.Vector(0, -1, 0), distance_for_rd + 100, rdattr);
            }
            catch
            {
            }
            try
            {
                //sorting_points_by_x_asc(final_pt_list_for_rd_top_without_bolt);
                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, final_pt_list_for_rd_top_without_bolt, new TSG.Vector(0, 1, 0), distance_for_rd + 100, rdattr);
            }
            catch
            {
            }
        }
        public TSD.PointList sorting_points_by_y_asc(TSD.PointList list_of_points)
        {


            for (int i = 0; i < list_of_points.Count; i++)
            {

                for (int j = 0; j < list_of_points.Count; j++)
                {
                    if ((list_of_points[i] as TSG.Point).Y < (list_of_points[j] as TSG.Point).Y)
                    {
                        TSG.Point temp_point = (list_of_points[i] as TSG.Point);
                        list_of_points[i] = list_of_points[j];
                        list_of_points[j] = temp_point;

                    }

                }
            }
            return list_of_points;

        }
        public TSD.PointList bounding_box_sort_y(TSM.ModelObject mymodel_object, TSD.View current_view)
        {
            TSD.PointList bounding_box_pts = new TSD.PointList();
           
            TSM.Model MYMODEL = new TSM.Model();
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
            TSM.Solid MYSOLID = (mymodel_object as TSM.Part).GetSolid();
            TSG.Point MAXPT = MYSOLID.MaximumPoint;
            TSG.Point MINPT = MYSOLID.MinimumPoint;
            bounding_box_pts.Add(MAXPT);
            bounding_box_pts.Add(MINPT);
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

            for (int i = 0; i < bounding_box_pts.Count; i++)
            {

                for (int j = 0; j < bounding_box_pts.Count; j++)
                {
                    if ((bounding_box_pts[i] as TSG.Point).Y < (bounding_box_pts[j] as TSG.Point).Y)
                    {
                        TSG.Point temp_point = (bounding_box_pts[i] as TSG.Point);
                        bounding_box_pts[i] = bounding_box_pts[j];
                        bounding_box_pts[j] = temp_point;

                    }

                }
            }

            return (bounding_box_pts);


        }


        public TSD.PointList bounding_box_sort_y_T_PROFILE(TSM.ModelObject mymodel_object, TSD.View current_view)
        {
            TSD.PointList bounding_box_pts = new TSD.PointList();
         
          

            TSM.Model MYMODEL = new TSM.Model();
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(mymodel_object.GetCoordinateSystem()));
            TSM.Solid MYSOLID = (mymodel_object as TSM.Part).GetSolid();
            TSG.Point MAXPT = MYSOLID.MaximumPoint;
            TSG.Point MINPT = MYSOLID.MinimumPoint;
            bounding_box_pts.Add(MAXPT);
            bounding_box_pts.Add(MINPT);
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            for (int i = 0; i < bounding_box_pts.Count; i++)
            {

                for (int j = 0; j < bounding_box_pts.Count; j++)
                {
                    if ((bounding_box_pts[i] as TSG.Point).Y < (bounding_box_pts[j] as TSG.Point).Y)
                    {
                        TSG.Point temp_point = (bounding_box_pts[i] as TSG.Point);
                        bounding_box_pts[i] = bounding_box_pts[j];
                        bounding_box_pts[j] = temp_point;

                    }

                }
            }


            return (bounding_box_pts);


        }

        public TSG.Point[,] Get_Bolt_properties_matrix_for_gusset(TSM.BoltGroup model_bolt, TSD.View currentview, string sorted_condition)
        {

            TSM.Model mymodel = new TSM.Model();
            TSG.Point[,] pointarray = null;
            TSG.Point[,] pointarray1 = null;
            ////////////Converting drawing object to model object///////////////////////
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(currentview.ViewCoordinateSystem);

            TSD.PointList bolt_ptlist_sorted = new TSD.PointList();
            TSD.PointList bolt_ptlist_sorted1 = new TSD.PointList();

            //if (model_bolt.GetType().Equals(typeof(TSM.BoltArray)))
            {
                TSM.BoltArray boltarray = model_bolt as TSM.BoltArray;


                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(currentview.ViewCoordinateSystem));


                TSG.CoordinateSystem boltcoord1 = boltarray.GetCoordinateSystem();

                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                if ((Convert.ToInt64(boltcoord1.AxisX.Z) == 0) && (Convert.ToInt64(boltcoord1.AxisY.Z) == 0))
                {
                    int number_of_rows = boltarray.GetBoltDistXCount();
                    int number_of_columns = boltarray.GetBoltDistYCount();

                    if ((boltarray.GetBoltDistY(0) == 0) && ((boltarray.GetBoltDistX(0) == 0)))
                    {

                        pointarray = new TSG.Point[1, 1];
                    }

                    else if ((boltarray.GetBoltDistY(0) == 0) && ((boltarray.GetBoltDistX(0) != 0)))
                    {


                        pointarray = new TSG.Point[number_of_rows + 1, number_of_columns];
                    }
                    else if ((boltarray.GetBoltDistY(0) != 0) && ((boltarray.GetBoltDistX(0) == 0)))
                    {


                        pointarray = new TSG.Point[number_of_rows, number_of_columns + 1];
                    }
                    else
                    {

                        pointarray = new TSG.Point[number_of_rows + 1, number_of_columns + 1];

                    }

                    int count = boltarray.BoltPositions.Count;
                    ///////////Condition for single bolt///////////////////////

                    TSG.Matrix to_bolt_matrix = TSG.MatrixFactory.ToCoordinateSystem(boltarray.GetCoordinateSystem());
                    if (count == 1)
                    {
                        bolt_ptlist_sorted.Add(to_bolt_matrix.Transform(boltarray.BoltPositions[0] as TSG.Point));
                    }

                    else
                    {
                        bolt_ptlist_sorted = Get_Bolt_Points(boltarray, currentview);
                        bolt_ptlist_sorted1 = Get_Bolt_Points(boltarray.BoltPositions, currentview);
                    }





                    TSD.PointList pointlist_deleted = new TSD.PointList();



                    sorting_points_by_x_asc(bolt_ptlist_sorted);

                    ArrayList list_of_x = new ArrayList();
                    for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                    {
                        double x_value =  (bolt_ptlist_sorted[i] as TSG.Point).X;

                        if (i < bolt_ptlist_sorted.Count - 1)
                        {
                        bool result =    AlmostEqual( bolt_ptlist_sorted[i + 1].X,  bolt_ptlist_sorted[i].X);
                        if (result == false)
                        {
                            list_of_x.Add(Convert.ToInt64(bolt_ptlist_sorted[i].X));
 
                        }


                            //if (Convert.ToInt64((bolt_ptlist_sorted[i + 1].X)) != Convert.ToInt64((bolt_ptlist_sorted[i].X)))
                            //{
                            //    list_of_x.Add( Convert.ToInt64 ( bolt_ptlist_sorted[i].X));
                            //}
                        }
                        else
                        {
                            list_of_x.Add( Convert.ToInt64 ( bolt_ptlist_sorted[i].X));
                        }

                    }
                    int b = 0;


                    //List<int> final_list_of_x = new List<int>();

                    //foreach (double xvalue in list_of_x)
                    //{
                    //    final_list_of_x.Add(Convert.ToInt64(xvalue));
 
                    //}


                    foreach (long  x_value in list_of_x)
                    {
                        int a = 0;
                        TSD.PointList pointlist_x_grp = new TSD.PointList();
                        for (int i = 0; i < bolt_ptlist_sorted.Count; i++)
                        {
                            double difference =Math.Abs( x_value - Convert.ToInt64(bolt_ptlist_sorted[i].X));
                            if (difference<=1)
                            {
                                pointlist_x_grp.Add(bolt_ptlist_sorted[i]);
                            }
                        }
                        sorting_points_by_y_des(pointlist_x_grp);
                        TSG.Matrix from_bolt_to_global = TSG.MatrixFactory.FromCoordinateSystem(boltarray.GetCoordinateSystem());
                        TSG.Matrix from_view_to_global = TSG.MatrixFactory.FromCoordinateSystem(boltarray.GetCoordinateSystem());
                        try
                        {
                            foreach (TSG.Point pt in pointlist_x_grp)
                            {
                                TSG.Point pt1 = toviewmatrix.Transform(from_bolt_to_global.Transform(pt));
                                pointarray[b, a] = pt1;
                                a++;
                            }
                        }
                        catch
                        {
 
                        }
                        b++;
                    }




                    pointarray1 = pointarray;

                    int c = pointarray.GetLength(0);
                    int d = pointarray.GetLength(1);
                    TSG.Vector vector_for_sep = new TSG.Vector(boltcoord1.AxisX);

                    if (pointarray.GetLength(0) > 1)
                    {
                        if (pointarray1[0, 0].Y > 0)
                        {


                            if ((vector_for_sep.X > 0) && (vector_for_sep.Y > 0))
                            {
                                //top_right_bolts_list.Add(bolt);
                                pointarray1 = new TSG.Point[c, d];
                                for (int i = 0; i < pointarray.GetLength(0); i++)
                                {
                                    for (int j = 0; j < pointarray.GetLength(1); j++)
                                    {
                                        pointarray1[i, j] = pointarray[c - i - 1, j];

                                    }

                                }
                            }
                            else if ((vector_for_sep.X < 0) && (vector_for_sep.Y > 0))
                            {
                                //top_left_bolts_list.Add(bolt);
                                pointarray1 = new TSG.Point[c, d];
                                for (int i = 0; i < pointarray.GetLength(0); i++)
                                {
                                    for (int j = 0; j < pointarray.GetLength(1); j++)
                                    {
                                        pointarray1[i, j] = pointarray[c - i - 1, j];

                                    }

                                }
                            }
                        }
                        else if (pointarray1[0, 0].Y < 0)
                        {

                            if ((vector_for_sep.X < 0) && (vector_for_sep.Y < 0))
                            {
                                //bottom_left_bolts_list.Add(bolt);
                                pointarray1 = new TSG.Point[c, d];
                                for (int i = 0; i < pointarray.GetLength(0); i++)
                                {
                                    for (int j = 0; j < pointarray.GetLength(1); j++)
                                    {
                                        pointarray1[i, j] = pointarray[c - i - 1, j];

                                    }

                                }
                            }
                            else if ((vector_for_sep.X > 0) && (vector_for_sep.Y < 0))
                            {
                                //bottom_right_bolts_list.Add(bolt);
                                pointarray1 = new TSG.Point[c, d];
                                for (int i = 0; i < pointarray.GetLength(0); i++)
                                {
                                    for (int j = 0; j < pointarray.GetLength(1); j++)
                                    {
                                        pointarray1[i, j] = pointarray[c - i - 1, j];

                                    }

                                }
                            }

                        }


                        //if (pointarray.GetLength(0) > 1)
                        //{

                        //    TSG.Vector z_vect = TSG.Vector.Cross(boltcoord1.AxisX, boltcoord1.AxisY);

                        //    if (z_vect.Z < 0)
                        //    {
                        //        pointarray1 = new TSG.Point[c, d];
                        //        for (int i = 0; i < pointarray.GetLength(0); i++)
                        //        {
                        //            for (int j = 0; j < pointarray.GetLength(1); j++)
                        //            {
                        //                pointarray1[i, j] = pointarray[c - i - 1, j];

                        //            }

                        //        }
                        //    }

                        //}
                    }
                    //if (pointarray1 == null)
                    //{
                    //    int a = 0;
                    //}

                    //////////////////////////////////////////////////////////////////////


                }
            }



            return pointarray1;


        }
        public TSD.PointList Get_Bolt_Points(ArrayList list_of_points, TSD.View currentview)
        {
            TSD.PointList boltpts = new TSD.PointList();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(currentview.ViewCoordinateSystem);
            foreach (TSG.Point pt in list_of_points)
            {


                boltpts.Add(toviewmatrix.Transform(pt));

            }

            return boltpts;

        }

        public TSD.PointList Get_Bolt_Points(TSM.BoltGroup bolt, TSD.View currentview)
        {

            TSD.PointList boltpts = new TSD.PointList();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(bolt.GetCoordinateSystem());
            foreach (TSG.Point pt in bolt.BoltPositions)
            {


                boltpts.Add(toviewmatrix.Transform(pt));

            }

            return boltpts;

        }

        public TSD.PointList Get_Gusset_plate_points(TSM.ContourPlate gusset, TSD.View current_view)
        {
            TSD.PointList pt_list_gusset_pts = new TSD.PointList();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);

            foreach (TSG.Point pt in gusset.Contour.ContourPoints)
            {

                pt_list_gusset_pts.Add(toviewmatrix.Transform(pt));

            }
            return pt_list_gusset_pts;

        }

        public void Dimensions_for_attachments_for_outside_flange(TSM.Beam main_part, TSD.View current_view)
        {
            ArrayList catalog_values = Getcatalog_values(main_part);
            double top_front;
            if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))

            ///////////////////Values based on which gusset plates are filtered, Outside flange or Web based on view type///////////////////
            {
                top_front = Convert.ToDouble(catalog_values[0]);
            }
            else
            {
                top_front = Convert.ToDouble(catalog_values[2]);
            }

            TSM.Model model = new TSM.Model();
            TSD.DrawingHandler drg_handler = new TSD.DrawingHandler();
            TSD.StraightDimensionSetHandler dim_set_handler = new TSD.StraightDimensionSetHandler();
            TSD.PointList ptlist_for_attachments_top = new TSD.PointList();
            ptlist_for_attachments_top.Add(new TSG.Point(0, 0, 0));
            TSD.PointList ptlist_for_attachments_bottom = new TSD.PointList();
            ptlist_for_attachments_bottom.Add(new TSG.Point(0, 0, 0));
            TSD.DrawingObjectEnumerator enum_for_parts_drg = current_view.GetAllObjects(typeof(TSD.Part));

            while (enum_for_parts_drg.MoveNext())
            {
                TSD.Part mypart = enum_for_parts_drg.Current as TSD.Part;

                TSM.Part plate = new TSM.Model().SelectModelObject(mypart.ModelIdentifier) as TSM.Part;


                string prof_type = "";

                plate.GetReportProperty("PROFILE_TYPE", ref prof_type);
                //////////////////////////////////Filtering all the plates////////////////////////////////

                TSD.PointList bounding_box_x = bounding_box_sort_x(plate, current_view);
                TSD.PointList bounding_box_y = bounding_box_sort_y(plate, current_view);
                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                TSG.Vector x_vec_of_plate = plate.GetCoordinateSystem().AxisX;
                TSG.Vector y_vec_of_plate = plate.GetCoordinateSystem().AxisY;
                TSG.Vector z_vec_of_plate = x_vec_of_plate.Cross(y_vec_of_plate);
                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                string profile = plate.Profile.ProfileString;
                if (((prof_type == "L") && (Convert.ToInt32(x_vec_of_plate.X) == 0)))
                {


                    if ((Convert.ToInt64(bounding_box_y[0].Y) >= Convert.ToInt64(top_front / 2)))
                    {
                        ptlist_for_attachments_top.Add(Get_face_point(plate, current_view));
                    }
                    else if ((Convert.ToInt64(bounding_box_y[1].Y) <= -Convert.ToInt64(top_front / 2)))
                    {
                        ptlist_for_attachments_bottom.Add(Get_face_point(plate, current_view));
                    }

                }

                else if ((plate.GetType().Equals(typeof(TSM.PolyBeam))) && (y_vec_of_plate.Z != 0))
                {
                    if ((Convert.ToInt64(bounding_box_y[0].Y) >= Convert.ToInt64(top_front) / 2))
                    {
                        ptlist_for_attachments_top.Add(Get_face_point(plate, current_view));
                    }
                    else if ((Convert.ToInt64(bounding_box_y[1].Y) <= -Convert.ToInt64(top_front / 2)))
                    {
                        ptlist_for_attachments_bottom.Add(Get_face_point(plate, current_view));
                    }

                }
                else if ((profile.Contains("HSS")) || (profile.Contains("NUT")) || (profile.Contains("PIPE")))
                {

                    TSG.Point MIDPT = new TSG.Point(bounding_box_x[0].X / 2 + bounding_box_x[1].X / 2, bounding_box_x[0].Y / 2 + bounding_box_x[1].Y / 2, 0);
                    if ((Convert.ToInt64(bounding_box_y[0].Y) >= Convert.ToInt64(top_front) / 2))
                    {
                        ptlist_for_attachments_top.Add(MIDPT);
                    }
                    else if ((Convert.ToInt64(bounding_box_y[1].Y) <= -Convert.ToInt64(top_front / 2)))
                    {
                        ptlist_for_attachments_bottom.Add(MIDPT);
                    }

                }
                else if (plate.GetType().Equals(typeof(TSM.ContourPlate)))
                {


                }

                else
                {

                    if ((Convert.ToInt64(bounding_box_y[0].Y) >= Convert.ToInt64(top_front / 2)))
                    {
                        ptlist_for_attachments_top.Add(bounding_box_x[0]);
                    }
                    else if ((Convert.ToInt64(bounding_box_y[1].Y) <= -Convert.ToInt64(top_front / 2)))
                    {
                        ptlist_for_attachments_bottom.Add(bounding_box_x[0]);
                    }

                }
            }

            try
            {
                TSD.StraightDimensionSet.StraightDimensionSetAttributes RD = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                RD.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
                RD.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                RD.Color = DrawingColors.Gray70;
                RD.Text.Font.Color = DrawingColors.Gray70;
                RD.Arrowhead.Head = ArrowheadTypes.FilledArrow;
                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_attachments_top, new TSG.Vector(0, 1, 0), 500, RD);
            }
            catch
            {
            }
            try
            {
                TSD.StraightDimensionSet.StraightDimensionSetAttributes RD = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                RD.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
                RD.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                RD.Color = DrawingColors.Gray70;
                RD.Text.Font.Color = DrawingColors.Gray70;
                RD.Arrowhead.Head = ArrowheadTypes.FilledArrow;
                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_attachments_bottom, new TSG.Vector(0, -1, 0), 500, RD);
            }
            catch
            {
            }

        }

        public TSD.PointList bounding_box_sort_x(TSM.ModelObject mymodel_object, TSD.View current_view)
        {
            TSD.PointList bounding_box_pts = new TSD.PointList();
            
            TSM.Model MYMODEL = new TSM.Model();
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
            TSM.Solid MYSOLID = (mymodel_object as TSM.Part).GetSolid();
            TSG.Point MAXPT = MYSOLID.MaximumPoint;
            TSG.Point MINPT = MYSOLID.MinimumPoint;
            bounding_box_pts.Add(MAXPT);
            bounding_box_pts.Add(MINPT);
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());


            for (int i = 0; i < bounding_box_pts.Count; i++)
            {

                for (int j = 0; j < bounding_box_pts.Count; j++)
                {
                    if ((bounding_box_pts[i] as TSG.Point).X < (bounding_box_pts[j] as TSG.Point).X)
                    {
                        TSG.Point temp_point = (bounding_box_pts[i] as TSG.Point);
                        bounding_box_pts[i] = bounding_box_pts[j];
                        bounding_box_pts[j] = temp_point;

                    }

                }
            }

            return (bounding_box_pts);


        }

        public TSD.PointList bounding_box_sort_z(TSM.ModelObject mymodel_object, TSD.View current_view)
        {
            TSD.PointList bounding_box_pts = new TSD.PointList();
            //TSM.ModelObject assembly_for_check = mymodel_object;
            ////////////////////////////////////////////////assembly bounding box logic//////////////////////////////////////////////////////////////////
            //double x1 = 0, y1 = 0, z1 = 0, x2 = 0, y2 = 0, z2 = 0;
            //assembly_for_check.GetReportProperty("BOUNDING_BOX_MIN_X", ref x1);
            //assembly_for_check.GetReportProperty("BOUNDING_BOX_MIN_Y", ref y1);
            //assembly_for_check.GetReportProperty("BOUNDING_BOX_MIN_Z", ref z1);
            //assembly_for_check.GetReportProperty("BOUNDING_BOX_MAX_X", ref x2);
            //assembly_for_check.GetReportProperty("BOUNDING_BOX_MAX_Y", ref y2);
            //assembly_for_check.GetReportProperty("BOUNDING_BOX_MAX_Z", ref z2);
            //TSG.Point workpointst_1 = new TSG.Point(x1, y1, z1);
            //TSG.Point workpointend_1 = new TSG.Point(x2, y2, z2);
            //TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);

            //TSG.Point workpointst2 = toviewmatrix.Transform(workpointst_1);

            //TSG.Point workpointend2 = toviewmatrix.Transform(workpointend_1);
            //bounding_box_pts.Add(workpointst2);
            //bounding_box_pts.Add(workpointend2);
            TSM.Model MYMODEL = new TSM.Model();
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
            TSM.Solid MYSOLID = (mymodel_object as TSM.Part).GetSolid();
            TSG.Point MAXPT = MYSOLID.MaximumPoint;
            TSG.Point MINPT = MYSOLID.MinimumPoint;
            bounding_box_pts.Add(MAXPT);
            bounding_box_pts.Add(MINPT);
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());


            for (int i = 0; i < bounding_box_pts.Count; i++)
            {

                for (int j = 0; j < bounding_box_pts.Count; j++)
                {
                    if ((bounding_box_pts[i] as TSG.Point).Z < (bounding_box_pts[j] as TSG.Point).Z)
                    {
                        TSG.Point temp_point = (bounding_box_pts[i] as TSG.Point);
                        bounding_box_pts[i] = bounding_box_pts[j];
                        bounding_box_pts[j] = temp_point;

                    }

                }
            }

            return (bounding_box_pts);


        }

        public TSD.PointList bounding_box_sort_z(TSM.ModelObject mymodel_object, TSM.Beam mainpart)
        {
            TSD.PointList bounding_box_pts = new TSD.PointList();

            TSM.Model MYMODEL = new TSM.Model();
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(mainpart.GetCoordinateSystem()));
            TSM.Solid MYSOLID = (mymodel_object as TSM.Part).GetSolid();
            TSG.Point MAXPT = MYSOLID.MaximumPoint;
            TSG.Point MINPT = MYSOLID.MinimumPoint;
            bounding_box_pts.Add(MAXPT);
            bounding_box_pts.Add(MINPT);
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());


            for (int i = 0; i < bounding_box_pts.Count; i++)
            {

                for (int j = 0; j < bounding_box_pts.Count; j++)
                {
                    if ((bounding_box_pts[i] as TSG.Point).Z < (bounding_box_pts[j] as TSG.Point).Z)
                    {
                        TSG.Point temp_point = (bounding_box_pts[i] as TSG.Point);
                        bounding_box_pts[i] = bounding_box_pts[j];
                        bounding_box_pts[j] = temp_point;

                    }

                }
            }

            return (bounding_box_pts);
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
        }


        public TSG.Point Get_face_point(TSM.Part part, TSD.View current_view)
        {
            TSM.Solid solid = part.GetSolid();
            TSS.EdgeEnumerator edgeenum = solid.GetEdgeEnumerator();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            TSD.PointList BOUNDINGBOX = bounding_box_sort_x(part, current_view as TSD.View);
            //int x_value = Convert.ToInt32(Math.Abs(BOUNDINGBOX[0].X - BOUNDINGBOX[1].X));
            int y_value = Convert.ToInt32(Math.Abs(BOUNDINGBOX[0].Y - BOUNDINGBOX[1].Y));
            ArrayList edgelist = new ArrayList();
            ArrayList distance_list = new ArrayList();

            TSG.Point req_point = null;
            while (edgeenum.MoveNext())
            {
                TSS.Edge edge = edgeenum.Current as TSS.Edge;

                TSG.Point pt1 = toviewmatrix.Transform(edge.StartPoint);
                TSG.Point pt2 = toviewmatrix.Transform(edge.EndPoint);

                if ((Convert.ToInt16(pt1.X) == Convert.ToInt16(pt2.X)) && (Convert.ToInt16(pt1.Z) == Convert.ToInt16(pt2.Z)))
                {
                    //double distance = Math.Abs(Convert.ToInt32(pt1.Y) - Convert.ToInt32(pt2.Y));
                    double distance = Math.Abs(Convert.ToInt32((pt1.Y) - (pt2.Y)));

                    if (distance == y_value)
                    {
                        req_point = pt1;
                        break;
                    }
                }

            }


            return req_point;


        }


        public TSG.Point Get_face_point_for_angle_bothside_weldedlogic(TSM.Part part, TSD.View current_view)
        {
            TSM.Solid solid = part.GetSolid();
            TSS.EdgeEnumerator edgeenum = solid.GetEdgeEnumerator();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            TSD.PointList BOUNDINGBOX = bounding_box_sort_x(part, current_view as TSD.View);
            //int x_value = Convert.ToInt32(Math.Abs(BOUNDINGBOX[0].X - BOUNDINGBOX[1].X));
            int y_value = Convert.ToInt32(Math.Abs(BOUNDINGBOX[0].Z - BOUNDINGBOX[1].Z));
            ArrayList edgelist = new ArrayList();
            ArrayList distance_list = new ArrayList();

            TSG.Point req_point = null;
            while (edgeenum.MoveNext())
            {
                TSS.Edge edge = edgeenum.Current as TSS.Edge;

                TSG.Point pt1 = toviewmatrix.Transform(edge.StartPoint);
                TSG.Point pt2 = toviewmatrix.Transform(edge.EndPoint);

                if ((Convert.ToInt16(pt1.X) == Convert.ToInt16(pt2.X)) && (Convert.ToInt16(pt1.Y) == Convert.ToInt16(pt2.Y)))
                {
                    //double distance = Math.Abs(Convert.ToInt32(pt1.Y) - Convert.ToInt32(pt2.Y));
                    double distance = Math.Abs(Convert.ToInt32((pt1.Z) - (pt2.Z)));

                    if (distance == y_value)
                    {
                        req_point = pt2;
                        break;
                    }
                }

            }


            return req_point;


        }

        public TSG.Point Get_face_point_for_angle_section_view(TSM.Part part, TSD.View current_view)
        {
            TSM.Solid solid = part.GetSolid();
            TSS.EdgeEnumerator edgeenum = solid.GetEdgeEnumerator();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            TSD.PointList BOUNDINGBOX = bounding_box_sort_x(part, current_view as TSD.View);
            int x_value = Convert.ToInt32(Math.Abs(BOUNDINGBOX[0].X - BOUNDINGBOX[1].X));
            //int y_value = Convert.ToInt32(Math.Abs(BOUNDINGBOX[0].Z - BOUNDINGBOX[1].Z));
            ArrayList edgelist = new ArrayList();
            ArrayList distance_list = new ArrayList();

            TSG.Point req_point = null;
            while (edgeenum.MoveNext())
            {
                TSS.Edge edge = edgeenum.Current as TSS.Edge;

                TSG.Point pt1 = toviewmatrix.Transform(edge.StartPoint);
                TSG.Point pt2 = toviewmatrix.Transform(edge.EndPoint);

                if ((Convert.ToInt64(pt1.Z) == Convert.ToInt16(pt2.Z)) && (Convert.ToInt64(pt1.Y) == Convert.ToInt16(pt2.Y)))
                {
                    //double distance = Math.Abs(Convert.ToInt32(pt1.Y) - Convert.ToInt32(pt2.Y));
                    double distance = Math.Abs(Convert.ToInt64((pt1.X) - (pt2.X)));

                    if (distance == x_value)
                    {
                        req_point = pt2;
                        break;
                    }
                }

            }


            return req_point;


        }
        public TSG.Point Get_face_point_for_angle_bothside_weldedlogic_top(TSM.Part part, TSD.View current_view)
        {
            TSM.Solid solid = part.GetSolid();
            TSS.EdgeEnumerator edgeenum = solid.GetEdgeEnumerator();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            TSD.PointList BOUNDINGBOX = bounding_box_sort_x(part, current_view as TSD.View);
            //int x_value = Convert.ToInt32(Math.Abs(BOUNDINGBOX[0].X - BOUNDINGBOX[1].X));
            int y_value = Convert.ToInt32(Math.Abs(BOUNDINGBOX[0].Y - BOUNDINGBOX[1].Y));
            ArrayList edgelist = new ArrayList();
            ArrayList distance_list = new ArrayList();

            TSG.Point req_point = null;
            while (edgeenum.MoveNext())
            {
                TSS.Edge edge = edgeenum.Current as TSS.Edge;

                TSG.Point pt1 = toviewmatrix.Transform(edge.StartPoint);
                TSG.Point pt2 = toviewmatrix.Transform(edge.EndPoint);

                if ((Convert.ToInt16(pt1.X) == Convert.ToInt16(pt2.X)) && (Convert.ToInt16(pt1.Z) == Convert.ToInt16(pt2.Z)))
                {
                    //double distance = Math.Abs(Convert.ToInt32(pt1.Y) - Convert.ToInt32(pt2.Y));
                    double distance = Math.Abs(Convert.ToInt32((pt1.Y) - (pt2.Y)));

                    if (distance == y_value)
                    {
                        req_point = pt2;
                        break;
                    }
                }

            }


            return req_point;


        }


        public TSG.Point Get_face_point_FOR_T(TSM.Part part, TSD.View current_view)
        {
            TSM.Solid solid = part.GetSolid();
            TSS.EdgeEnumerator edgeenum = solid.GetEdgeEnumerator();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            TSD.PointList BOUNDINGBOX = bounding_box_sort_x(part, current_view as TSD.View);
            //int x_value = Convert.ToInt32(Math.Abs(BOUNDINGBOX[0].X - BOUNDINGBOX[1].X));
            int y_value = Convert.ToInt32(Math.Abs(BOUNDINGBOX[0].Y - BOUNDINGBOX[1].Y));
            ArrayList edgelist = new ArrayList();
            ArrayList distance_list = new ArrayList();

            TSG.Point req_point = null;
            while (edgeenum.MoveNext())
            {
                TSS.Edge edge = edgeenum.Current as TSS.Edge;

                TSG.Point pt1 = toviewmatrix.Transform(edge.StartPoint);
                TSG.Point pt2 = toviewmatrix.Transform(edge.EndPoint);

                if ((Convert.ToInt16(pt1.X) == Convert.ToInt16(pt2.X)) && (Convert.ToInt16(pt1.Z) == -Convert.ToInt16(pt2.Z)))
                {
                    double distance = Math.Abs(Convert.ToInt16(pt1.Y) - Convert.ToInt16(pt2.Y));

                    if (distance != y_value)
                    {
                        req_point = pt2;
                        break;
                    }
                }

            }


            return req_point;


        }

        public void Dimensions_for_attachments_for_inside_flange(TSM.Beam main_part, TSD.View current_view)
        {
            ArrayList catalog_values = Getcatalog_values(main_part);
            double top_front;
            ///////////////////Values based on which gusset plates are filtered, Outside flange or Web based on view type///////////////////
            if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
            {


                top_front = Convert.ToDouble(catalog_values[0]);
            }
            else
            {
                top_front = Convert.ToDouble(catalog_values[1]);
            }

            Type[] type_forplate = new Type[] { typeof(TSM.Beam), typeof(TSM.ContourPlate) };
            TSM.Model model = new TSM.Model();
            TSD.DrawingHandler drg_handler = new TSD.DrawingHandler();
            TSD.StraightDimensionSetHandler dim_set_handler = new TSD.StraightDimensionSetHandler();
            TSD.PointList ptlist_for_attachments_top = new TSD.PointList();
            ptlist_for_attachments_top.Add(new TSG.Point(0, 0, 0));
            TSD.PointList ptlist_for_attachments_bottom = new TSD.PointList();
            ptlist_for_attachments_bottom.Add(new TSG.Point(0, 0, 0));
            TSD.DrawingObjectEnumerator enum_for_parts_drg = current_view.GetAllObjects(typeof(TSD.Part));

            while (enum_for_parts_drg.MoveNext())
            {
                TSD.Part mypart = enum_for_parts_drg.Current as TSD.Part;

                TSM.Part plate = new TSM.Model().SelectModelObject(mypart.ModelIdentifier) as TSM.Part;


                string prof_type = "";

                plate.GetReportProperty("PROFILE_TYPE", ref prof_type);
                //////////////////////////////////Filtering all the plates////////////////////////////////

                TSD.PointList bounding_box_x = bounding_box_sort_x(plate, current_view);
                TSD.PointList bounding_box_y = bounding_box_sort_y(plate, current_view);
                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                TSG.Vector x_vec_of_plate = plate.GetCoordinateSystem().AxisX;
                TSG.Vector y_vec_of_plate = plate.GetCoordinateSystem().AxisY;
                TSG.Vector z_vec_of_plate = x_vec_of_plate.Cross(y_vec_of_plate);
                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                string profile = plate.Profile.ProfileString;






                if (((prof_type == "B") && (z_vec_of_plate.X != 0)) || (prof_type == "L"))
                {

                    if (((Convert.ToInt64(bounding_box_y[0].Y) >= -Convert.ToInt64(top_front / 2))) && ((Convert.ToInt64(bounding_box_y[1].Y) <= Convert.ToInt64(top_front / 2))))
                    {
                        ptlist_for_attachments_top.Add(bounding_box_x[0]);
                    }
                }


            }


            try
            {
                TSD.StraightDimensionSet.StraightDimensionSetAttributes RD = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                RD.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
                RD.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                RD.Color = DrawingColors.Gray70;
                RD.Text.Font.Color = DrawingColors.Gray70;
                RD.Arrowhead.Head = ArrowheadTypes.FilledArrow;
                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_attachments_top, new TSG.Vector(0, 1, 0), Math.Abs(current_view.RestrictionBox.MaxPoint.Y + 300), RD);
            }
            catch
            {
            }
            //dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_attachments_bottom, new TSG.Vector(0, -1, 0), 500);


        }

        public void sorting_points_by_x_des(ArrayList value_of_no)
        {
            for (int i = 0; i < value_of_no.Count; i++)
            {
                for (int j = 0; j < value_of_no.Count; j++)
                {
                    if (Convert.ToDouble(value_of_no[i]) > (Convert.ToDouble(value_of_no[j])))
                    {
                        double temp_point = Convert.ToDouble(value_of_no[i]);
                        value_of_no[i] = value_of_no[j];
                        value_of_no[j] = temp_point;
                    }
                }
            }
            //return ;
        }


        public TSD.PointList Get_plate_corner_points(TSD.PointList x_sorted_bounding_box, TSD.PointList y_sorted_bounding_box)
        {
            TSD.PointList corner_pts = new TSD.PointList();

            TSG.Point pt1 = new TSG.Point(x_sorted_bounding_box[1].X, y_sorted_bounding_box[1].Y);
            TSG.Point pt2 = new TSG.Point(x_sorted_bounding_box[0].X, y_sorted_bounding_box[1].Y);
            TSG.Point pt3 = new TSG.Point(x_sorted_bounding_box[0].X, y_sorted_bounding_box[0].Y);
            TSG.Point pt4 = new TSG.Point(x_sorted_bounding_box[1].X, y_sorted_bounding_box[0].Y);

            corner_pts.Add(pt1);
            corner_pts.Add(pt2);
            corner_pts.Add(pt3);
            corner_pts.Add(pt4);
            return corner_pts;
        }
        public List<TSG.Point> Get_face_point_for_plate_test(TSM.Part part ,TSD.View current_view)
        {
            TSM.Model mymodel = new TSM.Model();
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
            List<TSG.Point> mypointlist = new List<TSG.Point>();
            TSM.Solid solid_for_part = part.GetSolid();
            TSS.FaceEnumerator faceenum = solid_for_part.GetFaceEnumerator();
            while (faceenum.MoveNext())
            {
                TSS.Face current_face = faceenum.Current;
                TSG.Vector normal_vector = current_face.Normal;
                if (Convert.ToInt64(normal_vector.Z) != 0)
                {
                    TSS.LoopEnumerator loopenum = current_face.GetLoopEnumerator();
                    while (loopenum.MoveNext())
                    {
                        TSS.Loop current_loop = loopenum.Current;
                        TSS.VertexEnumerator vertexenum = current_loop.GetVertexEnumerator();
                        while (vertexenum.MoveNext())
                        {
                            mypointlist.Add(vertexenum.Current);
                        }

                    }
                }
            }
            return (mypointlist);
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));

        }

        public void Arrange_part_marks(TSD.AssemblyDrawing mydrg, TSD.StraightDimension ovr_dim, double actual_distance, TSM.Part mainpart, List<Guid> near_side_parts, List<Guid> far_side_parts, List<section_loc_with_parts> list, List<Guid> top_partmark_to_delete, List<TSM.Part> list_of_parts_for_bottom_view_mark_retain)
        {

            List<Guid> BOTTOM_PART_MARK_TO_RETAIN = new List<Guid>();
            foreach (TSM.Part MYPARTTO_DLT in list_of_parts_for_bottom_view_mark_retain)
            {
                BOTTOM_PART_MARK_TO_RETAIN.Add(MYPARTTO_DLT.Identifier.GUID);
            }
            Type[] type_for_mark = new Type[] { typeof(TSD.Mark), typeof(TSD.WeldMark), typeof(TSD.AngleDimension), typeof(TSD.StraightDimensionSet) };

            TSD.DrawingObjectEnumerator enum_for_views = mydrg.GetSheet().GetAllViews();
            string mainpartmark = mainpart.GetPartMark();

            double length = get_report_properties_double(mainpart, "LENGTH");


            TSM.Model model = new TSM.Model();



            while (enum_for_views.MoveNext())
            {

                TSD.View current_view = enum_for_views.Current as TSD.View;

                //TSD.DrawingObjectEnumerator enum_for_mark = mydrg.GetSheet().GetAllObjects(type_for_mark);
                TSD.DrawingObjectEnumerator enum_for_mark = current_view.GetAllObjects(type_for_mark);


                while (enum_for_mark.MoveNext())
                {
                    var mark = enum_for_mark.Current;

                    if (mark.GetType().Equals(typeof(TSD.Mark)))
                    {

                        TSD.Mark mymark = mark as TSD.Mark;
                        TSD.DrawingObjectEnumerator enumcheck = mymark.GetRelatedObjects();

                        while (enumcheck.MoveNext())
                        {
                            var mark_part = enumcheck.Current;
                            if (mark_part.GetType().Equals(typeof(TSD.Part)))
                            {
                                TSM.Part modelpart = new TSM.Model().SelectModelObject((mark_part as TSD.Part).ModelIdentifier) as TSM.Part;

                                Guid guid = modelpart.Identifier.GUID;

                                if (current_view.ViewType.Equals(TSD.View.ViewTypes.TopView))
                                {
                                    //bool check3 = near_side_parts.Any(s => s == guid);



                                    //if (check3 == true)
                                    //{
                                    //    mark.Delete();
                                    //}
                                    //else
                                    //{
                                    //    bool check_3_dup = top_partmark_to_delete.Any(p => p == guid);
                                    //    bool CHECK4 = BOTTOM_PART_MARK_TO_RETAIN.Any(P => P == guid);
                                    //    if ((check_3_dup == true) || (CHECK4 == true))
                                    //    {
                                    //        mark.Delete();
                                    //    }


                                    //}
                                }

                                if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                                {
                                    bool check4 = far_side_parts.Any(s => s == guid);

                                    if (check4 == true)
                                    {


                                        //mark.Delete();
                                    }
                                }
                                if (guid == mainpart.Identifier.GUID)
                                {
                                    //mymark.Attributes.PreferredPlacing = new TSD.PlacingTypes.AlongLinePlacing(new TSG.Point(0, 0, 0), new TSG.Point(length, 0, 0));
                                    if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                                    {
                                        //if (mainpart.Profile.ProfileString.Contains('W'))
                                        //{
                                        //    mymark.Attributes.PreferredPlacing = TSD.PreferredPlacingTypes.AlongLinePlacingType();
                                        //    mymark.Modify();

                                       
                                        //}
                                        //else
                                        //{ 
                                        //}
                                        //TSD.AlongLinePlacing newcheck = new TSD.AlongLinePlacing(new TSG.Point(0, 0, 0), new TSG.Point(length, 0, 0));
                                        //mymark.Attributes.PreferredPlacing = newcheck;
                                    }
                                    else
                                    {
                                        //mymark.Delete();
                                    }
                                }
                            }
                            else if (mark_part.GetType().Equals(typeof(TSD.Bolt)))
                            {
                                TSM.BoltGroup bolt = new TSM.Model().SelectModelObject((mark_part as TSD.Bolt).ModelIdentifier) as TSM.BoltGroup;
                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
                                TSG.Vector X_VECTOR = bolt.GetCoordinateSystem().AxisX;
                                TSG.Vector Y_vector = bolt.GetCoordinateSystem().AxisY;
                                TSG.Point origin_for_bolt = bolt.GetCoordinateSystem().Origin;
                                Y_vector.Normalize();
                                TSG.Vector Z_Vector = X_VECTOR.Cross(Y_vector);
                                Z_Vector.Normalize();
                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                                if (Convert.ToInt64(Z_Vector.Z) != 0)
                                {
                                    //double x_val = bolt.SlottedHoleX;
                                    //double y_val = bolt.SlottedHoleY;
                                    //TSD.SymbolInfo slotsymbol = null;
                                    if (current_view.ViewType.Equals(TSD.View.ViewTypes.TopView))
                                    {
                                        if (origin_for_bolt.Z > 0)
                                        {

                                        }
                                        else
                                        {
                                            //mark.Delete();

                                        }
                                    }

                                    if (current_view.ViewType.Equals(TSD.View.ViewTypes.SectionView))
                                    {
                                        //if ((x_val > 0) && (y_val == 0))
                                        //{
                                        //    slotsymbol = new TSD.SymbolInfo("xsteel", 74);
                                        //    TSG.Point insertionpoint = mymark.InsertionPoint - new TSG.Point(-50, 0, 0);
                                        //    TSD.Symbol newsymbol = new TSD.Symbol(current_view, insertionpoint, slotsymbol);
                                        //    newsymbol.Attributes.Height = 12.7;
                                        //    newsymbol.Insert();
                                        //}
                                        //if ((y_val > 0) && (x_val == 0))
                                        //{
                                        //    slotsymbol = new TSD.SymbolInfo("xsteel", 75);
                                        //    TSG.Point insertionpoint = mymark.InsertionPoint - new TSG.Point(0, 50, 0);
                                        //    TSD.Symbol newsymbol = new TSD.Symbol(current_view, insertionpoint, slotsymbol);
                                        //    newsymbol.Attributes.Height = 12.7;
                                        //    newsymbol.Insert();
                                        //}
                                    }
                                }
                                else
                                {
                                    mark.Delete();
                                }





                            }

                        }

                        //while (enumcheck2.MoveNext())
                        //{
                        //    var check11 = enumcheck.Current;
                        //}
                        try
                        {
                            TSD.Mark.MarkAttributes check = mymark.Attributes;
                            TSD.ContainerElement ele = check.Content;
                            IEnumerator check1 = ele.GetEnumerator();
                            while (check1.MoveNext())
                            {
                                var name = check1.Current;
                                if (name.GetType().Equals(typeof(TSD.TextElement)))
                                {
                                    TSD.TextElement check2 = check1.Current as TSD.TextElement;
                                    string value = check2.Value;
                                    if (current_view.ViewType.Equals(TSD.View.ViewTypes.TopView))
                                    {
                                        if (value.Contains("~"))
                                        {
                                            mark.Delete();
                                        }

                                        //bool check3 = near_side_parts.Any(s => s.Contains(value));

                                        //if (check3 == true)
                                        //{
                                        //    mark.Delete();
                                        //}

                                    }
                                    if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                                    {
                                        //bool check4 = far_side_parts.Any(s => s.Contains(value));

                                        //if (check4 == true)
                                        //{
                                        //    mark.Delete();
                                        //}
                                    }

                                }
                                if (name.GetType().Equals(typeof(TSD.PropertyElement)))
                                {
                                    TSD.PropertyElement check2 = check1.Current as TSD.PropertyElement;
                                    string value = check2.Value;
                                    if ((value.Contains(mainpartmark)) && ((current_view.ViewType.Equals(TSD.View.ViewTypes.SectionView)) || ((current_view.ViewType.Equals(TSD.View.ViewTypes.EndView)))))
                                    {
                                        mark.Delete();
                                    }

                                }

                            }
                        }
                        catch
                        {

                        }
                        mymark.Attributes.PlacingAttributes.IsFixed = false;
                        if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                        {
                            mymark.Attributes.PlacingAttributes.PlacingQuarter.BottomLeft = true;
                            mymark.Attributes.PlacingAttributes.PlacingQuarter.BottomRight = true;
                            mymark.Attributes.PlacingAttributes.PlacingQuarter.TopLeft = false;
                            mymark.Attributes.PlacingAttributes.PlacingQuarter.TopRight = false;
                        }

                        if (current_view.ViewType.Equals(TSD.View.ViewTypes.TopView))
                        {
                            mymark.Attributes.PlacingAttributes.PlacingQuarter.BottomLeft = false;
                            mymark.Attributes.PlacingAttributes.PlacingQuarter.BottomRight = false;
                            mymark.Attributes.PlacingAttributes.PlacingQuarter.TopLeft = true;
                            mymark.Attributes.PlacingAttributes.PlacingQuarter.TopRight = true;
                        }

                        mymark.Modify();
                    }
                    else if (mark.GetType().Equals(typeof(TSD.AngleDimension)))
                    {
                        TSD.AngleDimension angledim = mark as TSD.AngleDimension;
                        angledim.Attributes.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Free;
                        angledim.Modify();


                    }
                    else if (mark.GetType().Equals(typeof(TSD.RadiusDimension)))
                    {
                        TSD.RadiusDimension angledim = mark as TSD.RadiusDimension;
                        angledim.Attributes.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Free;
                        angledim.Modify();
 
                    }
                    else if (mark.GetType().Equals(typeof(TSD.StraightDimensionSet)))
                    {
                        TSD.StraightDimensionSet strdim = mark as TSD.StraightDimensionSet;
                        strdim.Attributes.Placing.Placing = DimensionSetBaseAttributes.Placings.Free;
                        strdim.Modify();

                    }
                    else if (mark.GetType().Equals(typeof(TSD.WeldMark)))
                    {
                        List<TSM.Part> list_of_parts = new List<TSM.Part>();
                        TSD.WeldMark weldmark = mark as TSD.WeldMark;
                        Identifier id = weldmark.ModelIdentifier;
                        TSM.BaseWeld weld = (new TSM.Model().SelectModelObject(id) as TSM.BaseWeld);
                        TSM.Part main_part = weld.MainObject as TSM.Part;
                        TSM.Part secondary_part = weld.SecondaryObject as TSM.Part;
                        list_of_parts.Add(main_part);
                        list_of_parts.Add(secondary_part);
                        bool check1 = list_of_parts.Any(p => get_report_properties(p, "PROFILE_TYPE") == "L");
                        bool check2 = (weld.TypeAbove.Equals(TSM.BaseWeld.WeldTypeEnum.WELD_TYPE_FILLET) || (weld.TypeBelow.Equals(TSM.BaseWeld.WeldTypeEnum.WELD_TYPE_FILLET)));






                        if (current_view.ViewType.Equals(TSD.View.ViewTypes.SectionView))
                        {
                            if ((check1 == true) && (check2 == true))
                            {
                                weldmark.Delete();
                            }
                            else
                            {

                            }
                        }
                        else if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                        {
                            if ((check1 == true) && (check2 == true))
                            {

                            }
                            else
                            {
                                weldmark.Delete();


                            }
                        }
                        else
                        {
                            weldmark.Delete();
                        }






                       

















                    }



                }





            }










            mydrg.Modify();
        }



        public void Create_elevation_Dimension(TSG.Point mypoint, TSD.View myview, double dim_distance,string drg_att)
        {

          
            TSD.StraightDimensionSet.StraightDimensionSetAttributes ele_att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes("Elevation");
            ele_att.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.Elevation;
            ele_att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    ele_att.Text.Font.Height = 3.571875;
                }
                else
                {
                    ele_att.Text.Font.Height = 3.175;
                }
            }
            else
            {
                ele_att.Text.Font.Height = 2.38125;


            }

            TSD.TextElement mm = new TSD.TextElement("wp");
           

            ele_att.LeftUpperTag.Add(mm);
            ele_att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            ele_att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
            ele_att.Arrowhead.Head = TSD.ArrowheadTypes.FilledArrow;
            TSD.PointList new_list_ele = new TSD.PointList();
            new_list_ele.Add(mypoint);
            new_list_ele.Add(mypoint);
            TSD.StraightDimensionSetHandler bolt_dim = new TSD.StraightDimensionSetHandler();
            try
            {
                   if (chkwptxteledim.Checked == true)
                {
                    TSD.StraightDimension MYDIM = new TSD.StraightDimension(myview as TSD.ViewBase, mypoint, mypoint, new TSG.Vector(-1, 0, 0), -dim_distance, ele_att);

                    TSD.TextElement text = new TSD.TextElement("Wp ");
                    text.Font.Color = TSD.DrawingColors.Green;
                    text.Font.Height = 2.38125;

                    MYDIM.Attributes.DimensionValuePrefix.Add(text);
                    MYDIM.Insert();
                    MYDIM.UpDirection = new TSG.Vector(-1, 0, 0);
                 
                    MYDIM.Modify();

                    TSD.StraightDimensionSet myset = MYDIM.GetDimensionSet() as TSD.StraightDimensionSet;
                    myset.Attributes.Arrowhead.Head = TSD.ArrowheadTypes.FilledArrow;
                    myset.Modify();
                  
                      
                }
                else
                {
                    TSD.StraightDimensionSet myset_for_ele = bolt_dim.CreateDimensionSet(myview as TSD.ViewBase, new_list_ele, new TSG.Vector(-1, 0, 0), dim_distance, ele_att);
             
                }
               
               
               
               
            }
            catch
            {
            }


        }




        public void Dimensions_for_attachments_for_inside_flange_front(TSM.Beam main_part, TSD.View current_view, double output , ref List<Guid> PARTMARK_TO_RETAIN,string drg_att)
        {

            TSD.StraightDimensionSet.StraightDimensionSetAttributes RDATT = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            RDATT.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute;
            RDATT.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            RDATT.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
            RDATT.Arrowhead.Head = ArrowheadTypes.FilledArrow;
            RDATT.Text.Font.Color = DrawingColors.Gray70;
            RDATT.Color = DrawingColors.Gray70;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    RDATT.Text.Font.Height = 3.571875;
                }
                else
                {
                    RDATT.Text.Font.Height = 3.175;
                }
            }
            else
            {
                RDATT.Text.Font.Height = 2.38125;
            }
            string profile_type = "";
            main_part.GetReportProperty("PROFILE_TYPE", ref profile_type);

            ArrayList catalog_values = Getcatalog_values(main_part);
            double top_front;
            ///////////////////Values based on which gusset plates are filtered, Outside flange or Web based on view type///////////////////
            if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
            {


                top_front = Convert.ToDouble(catalog_values[0]);
            }
            else
            {
                top_front = Convert.ToDouble(catalog_values[1]);
            }

            Type[] type_forplate = new Type[] { typeof(TSM.Beam), typeof(TSM.ContourPlate) };
            TSM.Model model = new TSM.Model();
            TSD.DrawingHandler drg_handler = new TSD.DrawingHandler();
            TSD.StraightDimensionSetHandler dim_set_handler = new TSD.StraightDimensionSetHandler();
            TSD.PointList ptlist_for_attachments_top = new TSD.PointList();

            ptlist_for_attachments_top.Add(new TSG.Point(0, 0, 0));
            TSD.PointList ptlist_for_attachments_bottom = new TSD.PointList();
            ptlist_for_attachments_bottom.Add(new TSG.Point(0, 0, 0));
            TSD.DrawingObjectEnumerator enum_for_parts_drg = current_view.GetAllObjects(typeof(TSD.Part));
            List<TSM.Part> list_of_angle = new List<TSM.Part>();

            while (enum_for_parts_drg.MoveNext())
            {
                TSD.Part mypart = enum_for_parts_drg.Current as TSD.Part;

                TSM.Part plate = new TSM.Model().SelectModelObject(mypart.ModelIdentifier) as TSM.Part;
                TSD.PointList ptlist_for_attachments_pl_offset = new TSD.PointList();

                string prof_type = "";

                plate.GetReportProperty("PROFILE_TYPE", ref prof_type);
                //////////////////////////////////Filtering all the plates////////////////////////////////

                TSD.PointList bounding_box_x = bounding_box_sort_x(plate, current_view);
                TSD.PointList bounding_box_y = bounding_box_sort_y(plate, current_view);
                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                TSG.Vector x_vec_of_plate = plate.GetCoordinateSystem().AxisX;
                TSG.Vector y_vec_of_plate = plate.GetCoordinateSystem().AxisY;
                TSG.Vector z_vec_of_plate = x_vec_of_plate.Cross(y_vec_of_plate);
                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                string profile = plate.Profile.ProfileString;
                double angle_check = RadianToDegree((z_vec_of_plate.GetAngleBetween(new TSG.Vector(1, 0, 0))));

                //if (((prof_type == "B") && (z_vec_of_plate.X != 0)) || ((prof_type == "L") && ((x_vec_of_plate.Y == 0))) || ((prof_type == "T") && ((x_vec_of_plate.X != 0))) || ((prof_type == "U") && ((x_vec_of_plate.Y != 0))))
                double higher_x = Convert.ToInt64(bounding_box_y[1].Y);
                double lower_x = Convert.ToInt64(bounding_box_y[0].Y);
                double flange_val = Convert.ToInt64(top_front / 2);

                //if (((Convert.ToInt64(bounding_box_x[1].X) > -Convert.ToInt64(top_front / 2))&&((Convert.ToInt64(bounding_box_x[1].X) > -Convert.ToInt64(top_front / 2))) || (Convert.ToInt64(bounding_box_x[0].X) < Convert.ToInt64(top_front / 2)))
              if((higher_x>0)||(lower_x>0))
              {
                if (((higher_x <= flange_val) && (lower_x >= -flange_val)) || ((higher_x >= flange_val) && (lower_x < flange_val)) || ((higher_x >= -flange_val) && (lower_x <= -flange_val)) || ((higher_x <= flange_val) && (lower_x >= -flange_val)))
                {


                    if (((prof_type == "B") && (z_vec_of_plate.X != 0)) ||  ((prof_type == "T") && ((x_vec_of_plate.X != 0))) || ((prof_type == "U") && ((y_vec_of_plate.Y != 0))))
                    {


                        if (prof_type == "T")
                        {
                            ptlist_for_attachments_top.Add(Get_face_point(plate, current_view));
                            Guid ID = plate.Identifier.GUID;
                            PARTMARK_TO_RETAIN.Add(ID);
                        }

                        else if (prof_type == "B")
                        {

                            if ((Convert.ToInt64(angle_check) == 0) || (Convert.ToInt64(angle_check) == 90) || (Convert.ToInt64(angle_check) == 180) || (Convert.ToInt64(angle_check) == 270) || (Convert.ToInt64(angle_check) == 360))
                            {
                                TSM.ModelObjectEnumerator platebolts = plate.GetBolts();

                                int a = platebolts.GetSize();
                                if (a > 0)
                                {
                                    TSD.PointList p1 = bounding_box_sort_x(plate, current_view);


                                    while (platebolts.MoveNext())
                                    {
                                        TSM.BoltGroup bolt = platebolts.Current as TSM.BoltGroup;
                                        TSG.CoordinateSystem m = bolt.GetCoordinateSystem();
                                        TSM.Part mw = bolt.PartToBeBolted;
                                        TSM.Part mw1 = bolt.PartToBoltTo;
                                        ArrayList mw2 = bolt.OtherPartsToBolt;

                                        if (!mw.Identifier.ID.Equals(plate.Identifier.ID))
                                        {
                                            //TSG.CoordinateSystem kl = mw.GetCoordinateSystem();

                                            //TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                            //TSG.Point pz = tokkk.Transform(kl.Origin);
                                            //double x_value = pz.X;

                                            double x_value = 0;
                                            string prof_type_for_channel_check = "";
                                            mw.GetReportProperty("PROFILE_TYPE", ref prof_type_for_channel_check);

                                            if (prof_type_for_channel_check != "U")
                                            {

                                                TSG.CoordinateSystem kl = mw.GetCoordinateSystem();

                                                TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                TSG.Point pz = tokkk.Transform(kl.Origin);
                                                x_value = pz.X;
                                            }
                                            else
                                            {
                                                TSG.CoordinateSystem channel_coord = mw.GetCoordinateSystem();
                                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(channel_coord));
                                                ArrayList catalog_values_for_channel = Getcatalog_values(mw);
                                                double offset = Convert.ToDouble(catalog_values_for_channel[1]);
                                                TSG.CoordinateSystem kl = new TSG.CoordinateSystem();
                                                kl.Origin = new TSG.Point(0, 0, -offset / 2);



                                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(kl));


                                                TSG.Point pz = converted_points_FOR_CHANNEL(model, new TSG.Point(0, 0, 0), mw as TSM.Beam, current_view);


                                                x_value = pz.X;

                                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                            }
                                            if (chkrdconnmark.Checked == true)
                                            {
                                                if (Convert.ToInt64(x_value) >= Convert.ToInt64(p1[1].X))
                                                {
                                                    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                    Guid ID = plate.Identifier.GUID;
                                                    PARTMARK_TO_RETAIN.Add(ID);
                                                }
                                                else if (Convert.ToInt64(x_value) <= Convert.ToInt64(p1[0].X))
                                                {
                                                    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                    Guid ID = plate.Identifier.GUID;
                                                    PARTMARK_TO_RETAIN.Add(ID);
                                                }
                                            }
                                            else
                                            {
                                                ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                Guid ID = plate.Identifier.GUID;
                                                PARTMARK_TO_RETAIN.Add(ID);

                                            }

                                        }
                                        if (!mw1.Identifier.ID.Equals(plate.Identifier.ID))
                                        {
                                            //TSG.CoordinateSystem kl = mw1.GetCoordinateSystem();

                                            //TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                            //TSG.Point pz = tokkk.Transform(kl.Origin);
                                            //double x_value = pz.X;



                                            double x_value = 0;
                                            string prof_type_for_channel_check = "";
                                            mw1.GetReportProperty("PROFILE_TYPE", ref prof_type_for_channel_check);

                                            if (prof_type_for_channel_check != "U")
                                            {
                                                TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                TSG.CoordinateSystem kl = mw1.GetCoordinateSystem();


                                                TSG.Point pz = tokkk.Transform(kl.Origin);
                                                x_value = pz.X;
                                            }
                                            else
                                            {
                                                TSG.CoordinateSystem channel_coord = mw1.GetCoordinateSystem();
                                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(channel_coord));
                                                ArrayList catalog_values_for_channel = Getcatalog_values(mw1);
                                                double offset = Convert.ToDouble(catalog_values_for_channel[1]);
                                                TSG.CoordinateSystem kl = new TSG.CoordinateSystem();
                                                kl.Origin = new TSG.Point(0, 0, -offset / 2);



                                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(kl));


                                                TSG.Point pz = converted_points_FOR_CHANNEL(model, new TSG.Point(0, 0, 0), mw1 as TSM.Beam, current_view);


                                                x_value = pz.X;

                                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                            }


                                            if (chkrdconnmark.Checked == true)
                                            {
                                                if (Convert.ToInt64(x_value) >= Convert.ToInt64(p1[1].X))
                                                {
                                                    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                    Guid ID = plate.Identifier.GUID;
                                                    PARTMARK_TO_RETAIN.Add(ID);
                                                }
                                                else if (Convert.ToInt64(x_value) <= Convert.ToInt64(p1[0].X))
                                                {
                                                    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                    Guid ID = plate.Identifier.GUID;
                                                    PARTMARK_TO_RETAIN.Add(ID);
                                                }
                                            }
                                            else
                                            {
                                                ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                Guid ID = plate.Identifier.GUID;
                                                PARTMARK_TO_RETAIN.Add(ID);

                                            }
                                        }

                                        //else 
                                        //{
                                        //    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                        //}

                                    }
                                }

                                else
                                {
                                    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));
                                    Guid ID = plate.Identifier.GUID;
                                    PARTMARK_TO_RETAIN.Add(ID);
                                }

                            }
                            else
                            {
 
                            }
                        }


                       
                        else
                        {
                            TSG.Point face_point_for_angle_bswelded = Get_face_point_for_angle_bothside_weldedlogic(plate, current_view);
                            ptlist_for_attachments_top.Add(new TSG.Point(face_point_for_angle_bswelded.X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                            Guid ID = plate.Identifier.GUID;
                            PARTMARK_TO_RETAIN.Add(ID);

                            //ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_y[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));

                        }

                        
                    
                    }

                    else if (prof_type == "L") 
                    {
                       
                        if ((Convert.ToInt64( x_vec_of_plate.X) != 0) && ( Convert.ToInt64( y_vec_of_plate.Y) != 0))
                        {
                            ////////////////////////////////2018/////////////////////////////////////////////////////
                            ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));
                            Guid ID = plate.Identifier.GUID;
                            PARTMARK_TO_RETAIN.Add(ID);

                        }
                        else
                        {
                            string angle_dim = check_for_angle_dim(plate, current_view);

                            if (angle_dim == "NEED")
                            {

                                List<angle_face_area> myreq = getface_for_angle(plate);
                                TSG.Point midpt_of_angle = angle_mid_pt(myreq, current_view);
                                ptlist_for_attachments_top.Add(midpt_of_angle);
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }

                            if ((prof_type == "L") && ((x_vec_of_plate.Y != 0)))
                            {
                                
                                    list_of_angle.Add(plate);
                                

                             

                                #region angle_3.5_dim

                                //if ((profile_type == "U") && (Convert.ToInt64(angle_coord.AxisY.Y) == 0))
                                //{
                                //    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
                                //    TSG.Vector zvector = main_part.GetCoordinateSystem().AxisX.Cross(main_part.GetCoordinateSystem().AxisY);
                                  
                                //    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                                //    zvector.Normalize();
                                //    double WT = 0;


                                //    double WT2 = Convert.ToDouble(catalog_values[1]);
                                //    if (zvector.Y > 0)
                                //    {
                                //        WT = (-WT2 / 2);
                                //    }
                                //    else
                                //    {
                                //        WT = (WT2 / 2);
                                //    }

                                //    if (Convert.ToInt64(bounding_box_x[0].X) >= Convert.ToInt64(WT))
                                //    {
                                //        TSG.Point p1 = new TSG.Point();
                                //        p1 = new TSG.Point(bounding_box_y[1].X, bounding_box_y[0].Y, 0);
                                //        TSG.Point p2 = new TSG.Point();
                                //        p2 = new TSG.Point(bounding_box_y[0].X, bounding_box_y[0].Y, 0);
                                //        if (bounding_box_x[1].X > output)
                                //        {
                                //            angle_3_5_dim.Add(p2);
                                //            angle_3_5_dim.Add(p1);
                                //            Guid ID = plate.Identifier.GUID;
                                //            PARTMARK_TO_RETAIN.Add(ID);


                                //        }
                                //        else
                                //        {
                                //            angle_3_5_dim.Add(p1);
                                //            angle_3_5_dim.Add(p2);
                                //            Guid ID = plate.Identifier.GUID;
                                //            PARTMARK_TO_RETAIN.Add(ID);
                                //        }
                                //        double dist = Math.Abs(current_view.RestrictionBox.MaxPoint.Y) - Math.Abs(angle_3_5_dim[0].Y);
                                //        TSD.StraightDimensionSetHandler dim_for_3_5 = new TSD.StraightDimensionSetHandler();
                                //        TSD.StraightDimensionSet.StraightDimensionSetAttributes att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                //        att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                //        att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                                //        try
                                //        {
                                //            dim_for_3_5.CreateDimensionSet(current_view, angle_3_5_dim, new TSG.Vector(0, -1, 0), dist + 50 + Math.Abs(WT), att);
                                //        }
                                //        catch
                                //        {
                                //        }
                                //    }
                                //    if (Convert.ToInt64(bounding_box_x[1].X) <= Convert.ToInt64(WT))
                                //    {
                                //        TSG.Point p1 = new TSG.Point();
                                //        p1 = new TSG.Point(bounding_box_y[1].X, bounding_box_y[1].Y, 0);
                                //        TSG.Point p2 = new TSG.Point();
                                //        p2 = new TSG.Point(bounding_box_y[0].X, bounding_box_y[1].Y, 0);
                                //        if (bounding_box_x[1].X > output)
                                //        {
                                //            angle_3_5_dim.Add(p2);
                                //            angle_3_5_dim.Add(p1);
                                //            Guid ID = plate.Identifier.GUID;
                                //            PARTMARK_TO_RETAIN.Add(ID);


                                //        }
                                //        else
                                //        {
                                //            angle_3_5_dim.Add(p1);
                                //            angle_3_5_dim.Add(p2);
                                //            Guid ID = plate.Identifier.GUID;
                                //            PARTMARK_TO_RETAIN.Add(ID);
                                //        }
                                //        double dist = Math.Abs(current_view.RestrictionBox.MinPoint.Y) - Math.Abs(angle_3_5_dim[0].Y);
                                //        TSD.StraightDimensionSetHandler dim_for_3_5 = new TSD.StraightDimensionSetHandler();
                                //        TSD.StraightDimensionSet.StraightDimensionSetAttributes att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                //        att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                //        att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                                //        try
                                //        {
                                //            dim_for_3_5.CreateDimensionSet(current_view, angle_3_5_dim, new TSG.Vector(0, -1, 0), dist + 50 + Math.Abs(WT), att);
                                //        }
                                //        catch
                                //        {
                                //        }
                                //    }



                                //    else if (Convert.ToInt64(bounding_box_x[0].X) <= Convert.ToInt64(WT))
                                //    {
                                //        TSG.Point p1 = new TSG.Point();
                                //        p1 = new TSG.Point(bounding_box_y[1].X, bounding_box_y[0].Y, 0);
                                //        TSG.Point p2 = new TSG.Point();
                                //        p2 = new TSG.Point(bounding_box_y[0].X, bounding_box_y[0].Y, 0);
                                //        if (bounding_box_x[1].X > output)
                                //        {
                                //            angle_3_5_dim.Add(p2);
                                //            angle_3_5_dim.Add(p1);
                                //            Guid ID = plate.Identifier.GUID;
                                //            PARTMARK_TO_RETAIN.Add(ID);


                                //        }
                                //        else
                                //        {
                                //            angle_3_5_dim.Add(p1);
                                //            angle_3_5_dim.Add(p2);
                                //            Guid ID = plate.Identifier.GUID;
                                //            PARTMARK_TO_RETAIN.Add(ID);
                                //        }
                                //        double dist = Math.Abs(current_view.RestrictionBox.MaxPoint.Y) - Math.Abs(angle_3_5_dim[0].Y);
                                //        TSD.StraightDimensionSetHandler dim_for_3_5 = new TSD.StraightDimensionSetHandler();
                                //        TSD.StraightDimensionSet.StraightDimensionSetAttributes att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                //        att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                //        att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                                //        try
                                //        {
                                //            dim_for_3_5.CreateDimensionSet(current_view, angle_3_5_dim, new TSG.Vector(0, -1, 0), dist + 50 + Math.Abs(WT), att);
                                //        }
                                //        catch
                                //        {
                                //        }
                                //    }
                                //}

                                //else if ((Convert.ToInt64(angle_coord.AxisY.Y) == 0))
                                //{
                                //    if (Convert.ToInt64(bounding_box_x[0].X) > 0)
                                //    {
                                //        TSG.Point p1 = new TSG.Point();
                                //        p1 = new TSG.Point(bounding_box_y[1].X, bounding_box_y[0].Y, 0);
                                //        TSG.Point p2 = new TSG.Point();
                                //        p2 = new TSG.Point(bounding_box_y[0].X, bounding_box_y[0].Y, 0);

                                //        if (bounding_box_x[1].X > output)
                                //        {
                                //            angle_3_5_dim.Add(p2);
                                //            angle_3_5_dim.Add(p1);
                                //            Guid ID = plate.Identifier.GUID;
                                //            PARTMARK_TO_RETAIN.Add(ID);


                                //        }
                                //        else
                                //        {
                                //            angle_3_5_dim.Add(p1);
                                //            angle_3_5_dim.Add(p2);
                                //            Guid ID = plate.Identifier.GUID;
                                //            PARTMARK_TO_RETAIN.Add(ID);
                                //        }
                                //        List<TSG.Point> allpts_in_angle = pts_in_each_face(plate, current_view);
                                //        TSG.Point p11 = allpts_in_angle.Find(x => (x.X.Equals(allpts_in_angle.Min(y => y.X))) && (x.Y.Equals(allpts_in_angle.Min(y => y.Y))));
                                //        TSG.Point p21 = allpts_in_angle.Find(x => (x.X.Equals(allpts_in_angle.Max(y => y.X))) && (x.Y.Equals(allpts_in_angle.Min(y => y.Y))));

                                //        double dist = Math.Abs(current_view.RestrictionBox.MaxPoint.Y) - Math.Abs(angle_3_5_dim[0].Y);
                                //        TSD.StraightDimensionSetHandler dim_for_3_5 = new TSD.StraightDimensionSetHandler();
                                //        TSD.StraightDimensionSet.StraightDimensionSetAttributes att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                //        att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                //        att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;

                                //        try
                                //        {

                                //            dim_for_3_5.CreateDimensionSet(current_view, angle_3_5_dim, new TSG.Vector(0, -1, 0), dist + 50, att);
                                //            //dim_for_3_5.CreateDimensionSet(current_view, angle_3_5_dim, x_axis, dist + 50, att);
                                //        }
                                //        catch
                                //        {
                                //        }
                                //    }
                                //    else if (Convert.ToInt64(bounding_box_x[1].X) < 0)
                                //    {
                                //        TSG.Point p1 = new TSG.Point();
                                //        p1 = new TSG.Point(bounding_box_y[1].X, bounding_box_y[1].Y, 0);
                                //        TSG.Point p2 = new TSG.Point();
                                //        p2 = new TSG.Point(bounding_box_y[0].X, bounding_box_y[1].Y, 0);
                                //        if (bounding_box_x[1].X > output)
                                //        {
                                //            angle_3_5_dim.Add(p2);
                                //            angle_3_5_dim.Add(p1);
                                //            Guid ID = plate.Identifier.GUID;
                                //            PARTMARK_TO_RETAIN.Add(ID);


                                //        }
                                //        else
                                //        {
                                //            angle_3_5_dim.Add(p1);
                                //            angle_3_5_dim.Add(p2);
                                //            Guid ID = plate.Identifier.GUID;
                                //            PARTMARK_TO_RETAIN.Add(ID);
                                //        }
                                //        double dist = Math.Abs(current_view.RestrictionBox.MinPoint.Y) - Math.Abs(angle_3_5_dim[0].Y);
                                //        TSD.StraightDimensionSetHandler dim_for_3_5 = new TSD.StraightDimensionSetHandler();
                                //        TSD.StraightDimensionSet.StraightDimensionSetAttributes att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                //        att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                //        att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                                //        try
                                //        {
                                //            dim_for_3_5.CreateDimensionSet(current_view, angle_3_5_dim, new TSG.Vector(0, -1, 0), dist + 50, att);
                                //            //dim_for_3_5.CreateDimensionSet(current_view, angle_3_5_dim, x_axis, dist + 50, att);
                                //        }
                                //        catch
                                //        {
                                //        }
                                //    }

                                //    else if (Convert.ToInt64(bounding_box_x[0].X) < 0)
                                //    {
                                //        TSG.Point p1 = new TSG.Point();
                                //        p1 = new TSG.Point(bounding_box_y[1].X, bounding_box_y[0].Y, 0);
                                //        TSG.Point p2 = new TSG.Point();
                                //        p2 = new TSG.Point(bounding_box_y[0].X, bounding_box_y[0].Y, 0);

                                //        if (bounding_box_x[1].X > output)
                                //        {
                                //            angle_3_5_dim.Add(p2);
                                //            angle_3_5_dim.Add(p1);
                                //            Guid ID = plate.Identifier.GUID;
                                //            PARTMARK_TO_RETAIN.Add(ID);


                                //        }
                                //        else
                                //        {
                                //            angle_3_5_dim.Add(p1);
                                //            angle_3_5_dim.Add(p2);
                                //            Guid ID = plate.Identifier.GUID;
                                //            PARTMARK_TO_RETAIN.Add(ID);
                                //        }
                                //        double dist = Math.Abs(current_view.RestrictionBox.MaxPoint.Y) - Math.Abs(angle_3_5_dim[0].Y);
                                //        TSD.StraightDimensionSetHandler dim_for_3_5 = new TSD.StraightDimensionSetHandler();
                                //        TSD.StraightDimensionSet.StraightDimensionSetAttributes att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                //        att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                //        att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;

                                //        try
                                //        {
                                //            dim_for_3_5.CreateDimensionSet(current_view, angle_3_5_dim, new TSG.Vector(0, -1, 0), dist + 50, att);
                                //            //dim_for_3_5.CreateDimensionSet(current_view, angle_3_5_dim, x_axis, dist + 50, att);
                                //        }
                                //        catch
                                //        {
                                //        }
                                //    }
                                //}


                                # endregion
 
                            }
 
                        }

                    }
                    else if (prof_type == "Z")
                    { 
                    }

                }
            }
            }

            double HT2 = Convert.ToDouble(catalog_values[0]);
            double HT = Convert.ToInt64(HT2 / 2);


            TSD.PointList pt_list_z_positive = new TSD.PointList();


            if (profile_type == "U")
            {
                double WT2 = Convert.ToDouble(catalog_values[1]);
                double WT = Convert.ToInt64(WT2 / 2);
                foreach (TSG.Point pt in ptlist_for_attachments_top)
                {
                    if (pt != null)
                    {
                        if ((Convert.ToInt16(pt.X) > 0) && (Convert.ToInt16(pt.X) < output))
                        {

                            if (Convert.ToInt16(pt.Z) > -WT)
                            {
                                pt_list_z_positive.Add(pt);
                            }
                        }
                    }
                }

            }
            else
            {
                foreach (TSG.Point pt in ptlist_for_attachments_top)
                {
                    if (pt != null)
                    {
                        if ((Convert.ToInt16(pt.X) > 0) && (Convert.ToInt16(pt.X) < output))
                        {

                            if (Convert.ToInt16(pt.Z) > 0)
                            {
                                pt_list_z_positive.Add(pt);
                            }
                        }
                    }
                }
            }
            TSD.PointList final_ptlist_for_attachments_top = pointlist_remove_duplicate_Xvalues(pt_list_z_positive);
            final_ptlist_for_attachments_top.Add(new TSG.Point(0, 0, 0));
            sorting_points_by_x_asc(final_ptlist_for_attachments_top);
            double MAXY = Math.Abs(current_view.RestrictionBox.MaxPoint.Y);

            double PART_DISTANCE_FOR_INSIDE_FLANGE = Math.Abs(MAXY - final_ptlist_for_attachments_top[0].Y);

            try
            {
                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, final_ptlist_for_attachments_top, new TSG.Vector(0, 1, 0), PART_DISTANCE_FOR_INSIDE_FLANGE + 115, RDATT);
            }
            catch
            {
            }

            List<angle_dim_3_5> pt_list_for_list_of_angle = new List<angle_dim_3_5>();
            TSM.Model mymodel = new TSM.Model();
            foreach (TSM.Part mypart in list_of_angle)
            {

             
              
                List<TSG.Point> angle_3_5_dim = new List<TSG.Point>();
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                TSG.CoordinateSystem angle_coord = mypart.GetCoordinateSystem();
                TSG.Vector x_axis = angle_coord.AxisX;
                TSG.Vector y_axis = angle_coord.AxisY;
                TSG.Vector z_axis = x_axis.Cross(y_axis);
            

                List<TSG.Point> allpts_in_angle = pts_in_each_face(mypart, current_view);
                TSG.Point minx1 = allpts_in_angle.Find(x => x.X.Equals(allpts_in_angle.Min(y => y.X)));
                TSG.Point maxx2 = allpts_in_angle.Find(x => x.X.Equals(allpts_in_angle.Max(y => y.X)));
                TSG.Point miny1 = allpts_in_angle.Find(x => x.Y.Equals(allpts_in_angle.Min(y => y.Y)));

                //TSG.Point req_pt1 = allpts_in_angle.Find(x=>Convert.ToInt64( x. X).Equals(allpts_in_angle.Min(y => y.X))

                TSD.PointList mypt_list = new TSD.PointList();
                mypt_list.Add(new TSG.Point(minx1.X, minx1.Y));
                mypt_list.Add(new TSG.Point(maxx2.X, maxx2.Y));
              

                TSG.Point x1 = new TSG.Point( Convert.ToInt64( minx1.X), Convert.ToInt64(  minx1.Y));
                TSG.Point x2 = new TSG.Point(Convert.ToInt64(maxx2.X), Convert.ToInt64(maxx2.Y));

                angle_3_5_dim.Add(x1);
                angle_3_5_dim.Add(x2);

                #region new_logic_for_3.5_dim
                if (((Convert.ToInt64(z_axis.Y)) != 0) || ((Convert.ToInt64(z_axis.Z)) != 0))
                {
                    if (((Convert.ToInt64(x_axis.X)) < 0) && ((Convert.ToInt64(x_axis.Y)) < 0))
                    {

                    }
                    else
                    {
                        if (Convert.ToInt64(z_axis.Z) != 0)
                        {
                          
                        }
                        else
                        {

                            x_axis = -1 * x_axis;
                        }
                    }
                }
                else
                {

                    if (((Convert.ToInt64(x_axis.X)) > 0) || ((Convert.ToInt64(x_axis.Y)) > 0))
                    {
                        x_axis =  x_axis;
                    }
                    else
                    {
                        x_axis = -1 * x_axis;
                      
                    }
                }



                pt_list_for_list_of_angle.Add(new angle_dim_3_5 { pt1 = x1, pt2 = x2, x_axis = x_axis, myptlist = mypt_list , angle = mypart});


                double dist = Math.Abs(current_view.RestrictionBox.MaxPoint.Y) - Math.Abs(angle_3_5_dim[0].Y);
                TSD.StraightDimensionSetHandler dim_for_3_5 = new TSD.StraightDimensionSetHandler();
                TSD.StraightDimensionSet.StraightDimensionSetAttributes att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;


                try
                {

                    //dim_for_3_5.CreateDimensionSet(current_view, angle_3_5_dim, x_axis, dist + 50, att);

                }
                catch
                {
                }
                # endregion
 
            }


            List<angle_dim_3_5> delete_list_of_angle = pt_list_for_list_of_angle.Distinct(new REMOVING_DUPLICATE_angle_VALUE_IN_CURRENT_VIEW()).ToList();

            foreach (var obj in delete_list_of_angle)
            {
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                ArrayList array_list_of_points = new ArrayList();
                foreach (TSG.Point mypt in obj.myptlist)
                {
                    array_list_of_points.Add(mypt);

                }

                TSD.PointList sort_x_ptlist = sorting_points_by_x_asc(obj.myptlist);
               
                TSG.Line l1 = new TSG.Line(sort_x_ptlist[1], obj.x_axis);
                TSG.GeometricPlane plane1 = new TSG.GeometricPlane(sort_x_ptlist[0], obj.x_axis);
                TSG.Point p1 = TSG.Intersection.LineToPlane(l1, plane1);
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                TSD.PointList angle_leg_dim = new TSD.PointList();
                angle_leg_dim.Add(sort_x_ptlist[0]);
                angle_leg_dim.Add(p1);
                double dist = Math.Abs(current_view.RestrictionBox.MaxPoint.Y) - Math.Abs(obj.myptlist[0].Y);
                TSD.StraightDimensionSetHandler dim_for_3_5 = new TSD.StraightDimensionSetHandler();
                TSD.StraightDimensionSet.StraightDimensionSetAttributes att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                {
                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                    {
                        att.Text.Font.Height = 3.571875;
                    }
                    else
                    {
                        att.Text.Font.Height = 3.175;
                    }
                }
                else
                {
                    att.Text.Font.Height = 2.38125;
                }
                TSG.Vector x_axis = obj.x_axis;

                if (x_axis.Y > 0)
                {
                    x_axis = - 1 * x_axis;
                   
                }
                else
                {

                   
                }

                try
                {

                    dim_for_3_5.CreateDimensionSet(current_view, angle_leg_dim, x_axis, dist + 50, att);

                }
                catch
                {
                }
                
            }

        }

        public void Dimensions_for_attachments_for_inside_flange_top(TSM.Beam main_part, TSD.View current_view, double output,ref List<Guid> PARTMARK_TO_RETAIN,string drg_att)
        {
            TSD.StraightDimensionSet.StraightDimensionSetAttributes dim_font_height = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            dim_font_height.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    dim_font_height.Text.Font.Height = 3.571875;
                }
                else
                {
                    dim_font_height.Text.Font.Height = 3.175;
                }
            }
            else
            {
                dim_font_height.Text.Font.Height = 2.38125;


            }
            TSD.StraightDimensionSet.StraightDimensionSetAttributes RDATT = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            RDATT.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute;
            RDATT.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            RDATT.Text.Font.Color = DrawingColors.Gray70;
            RDATT.Arrowhead.Head = ArrowheadTypes.FilledArrow;
            RDATT.Color = DrawingColors.Gray70;
            RDATT.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    RDATT.Text.Font.Height = 3.571875;
                }
                else
                {
                    RDATT.Text.Font.Height = 3.175;
                }
            }
            else
            {
                RDATT.Text.Font.Height = 2.38125;


            }
            string profile_type = "";
            main_part.GetReportProperty("PROFILE_TYPE", ref profile_type);
            double view_scale = current_view.Attributes.Scale;

            ArrayList catalog_values = Getcatalog_values(main_part);
            double top_front;
            ///////////////////Values based on which gusset plates are filtered, Outside flange or Web based on view type///////////////////
            if (current_view.ViewType.Equals(TSD.View.ViewTypes.TopView))
            {


                top_front = Convert.ToDouble(catalog_values[0]);
            }
            else
            {
                top_front = Convert.ToDouble(catalog_values[1]);
            }

            Type[] type_forplate = new Type[] { typeof(TSM.Beam), typeof(TSM.ContourPlate) };
            TSM.Model model = new TSM.Model();
            TSD.DrawingHandler drg_handler = new TSD.DrawingHandler();
            TSD.StraightDimensionSetHandler dim_set_handler = new TSD.StraightDimensionSetHandler();
            TSD.PointList ptlist_for_attachments_top = new TSD.PointList();
            TSD.PointList ptlist_for_attachments_top_plate_nearside = new TSD.PointList();
            TSD.PointList ptlist_for_attachments_angle = new TSD.PointList();
            ptlist_for_attachments_angle.Add(new TSG.Point(0, 0, 0));
            ptlist_for_attachments_top.Add(new TSG.Point(0, 0, 0));
            ptlist_for_attachments_top_plate_nearside.Add(new TSG.Point(0, 0, 0));
            TSD.PointList ptlist_for_attachments_bottom = new TSD.PointList();
            ptlist_for_attachments_bottom.Add(new TSG.Point(0, 0, 0));
            TSD.DrawingObjectEnumerator enum_for_parts_drg = current_view.GetAllObjects(typeof(TSD.Part));

            while (enum_for_parts_drg.MoveNext())
            {
                TSD.Part mypart = enum_for_parts_drg.Current as TSD.Part;

                TSM.Part plate = new TSM.Model().SelectModelObject(mypart.ModelIdentifier) as TSM.Part;


                string prof_type = "";

                plate.GetReportProperty("PROFILE_TYPE", ref prof_type);
                //////////////////////////////////Filtering all the plates////////////////////////////////

                TSD.PointList bounding_box_x = bounding_box_sort_x(plate, current_view);
                TSD.PointList bounding_box_y = bounding_box_sort_y(plate, current_view);
                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                TSG.Vector x_vec_of_plate = plate.GetCoordinateSystem().AxisX;
                TSG.Vector y_vec_of_plate = plate.GetCoordinateSystem().AxisY;
                TSG.Vector z_vec_of_plate = x_vec_of_plate.Cross(y_vec_of_plate);
                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                string profile = plate.Profile.ProfileString;
                double angle_check = RadianToDegree((z_vec_of_plate.GetAngleBetween(new TSG.Vector(1, 0, 0))));


                if (((prof_type == "B") && (z_vec_of_plate.X != 0)) ||  ((prof_type == "T") && ((x_vec_of_plate.X != 0))) || ((prof_type == "U") && ((x_vec_of_plate.Y != 0))))
                {
                    double higher_x = Convert.ToInt64(bounding_box_y[1].Y);
                    double lower_x = Convert.ToInt64(bounding_box_y[0].Y);
                    double flange_val = Convert.ToInt64(top_front / 2);
                    if ((lower_x > 0) && (higher_x > 0))
                    {
                        //if (((Convert.ToInt64(bounding_box_x[1].X) > -Convert.ToInt64(top_front / 2))&&((Convert.ToInt64(bounding_box_x[1].X) > -Convert.ToInt64(top_front / 2))) || (Convert.ToInt64(bounding_box_x[0].X) < Convert.ToInt64(top_front / 2)))
                        if (((higher_x < flange_val) && (lower_x > -flange_val)) || ((higher_x > flange_val) && (lower_x < flange_val)) || ((higher_x > -flange_val) && (lower_x < -flange_val)) || ((higher_x < flange_val) && (lower_x > -flange_val)))
                        {

                            if (prof_type == "T")
                            {
                                ptlist_for_attachments_top.Add(Get_face_point(plate, current_view));
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }


                            else if (prof_type == "U")
                            {
                                ptlist_for_attachments_top.Add(Get_face_point(plate, current_view));
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }
                            else if (prof_type == "B")
                            {
                                if ((Convert.ToInt64(angle_check) == 0) || (Convert.ToInt64(angle_check) == 90) || (Convert.ToInt64(angle_check) == 180) || (Convert.ToInt64(angle_check) == 270) || (Convert.ToInt64(angle_check) == 360))
                                {
                                    TSM.ModelObjectEnumerator platebolts = plate.GetBolts();
                                    int a = platebolts.GetSize();
                                    if (a > 0)
                                    {
                                        TSD.PointList p1 = bounding_box_sort_x(plate, current_view);


                                        while (platebolts.MoveNext())
                                        {
                                            TSM.BoltGroup bolt = platebolts.Current as TSM.BoltGroup;
                                            TSG.CoordinateSystem m = bolt.GetCoordinateSystem();
                                            TSM.Part mw = bolt.PartToBeBolted;
                                            TSM.Part mw1 = bolt.PartToBoltTo;
                                            ArrayList mw2 = bolt.OtherPartsToBolt;

                                            if (!mw.Identifier.ID.Equals(plate.Identifier.ID))
                                            {
                                                //TSG.CoordinateSystem kl = mw.GetCoordinateSystem();

                                                //TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                //TSG.Point pz = tokkk.Transform(kl.Origin);
                                                //double x_value = pz.X;




                                                double x_value = 0;
                                                string prof_type_for_channel_check = "";
                                                mw.GetReportProperty("PROFILE_TYPE", ref prof_type_for_channel_check);

                                                if (prof_type_for_channel_check != "U")
                                                {

                                                    TSG.CoordinateSystem kl = mw.GetCoordinateSystem();

                                                    TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                    TSG.Point pz = tokkk.Transform(kl.Origin);
                                                    x_value = pz.X;
                                                }
                                                else
                                                {
                                                    TSG.CoordinateSystem channel_coord = mw.GetCoordinateSystem();
                                                    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(channel_coord));
                                                    ArrayList catalog_values_for_channel = Getcatalog_values(mw);
                                                    double offset = Convert.ToDouble(catalog_values_for_channel[1]);
                                                    TSG.CoordinateSystem kl = new TSG.CoordinateSystem();
                                                    kl.Origin = new TSG.Point(0, 0, -offset / 2);



                                                    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(kl));


                                                    TSG.Point pz = converted_points_FOR_CHANNEL(model, new TSG.Point(0, 0, 0), mw as TSM.Beam, current_view);


                                                    x_value = pz.X;

                                                    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                                }




                                                if (chkrdconnmark.Checked == true)
                                                {
                                                    if (Convert.ToInt64(x_value) >= Convert.ToInt64(p1[1].X))
                                                    {
                                                        ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                        Guid ID = plate.Identifier.GUID;
                                                        PARTMARK_TO_RETAIN.Add(ID);
                                                    }
                                                    else if (Convert.ToInt64(x_value) <= Convert.ToInt64(p1[0].X))
                                                    {
                                                        ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                        Guid ID = plate.Identifier.GUID;
                                                        PARTMARK_TO_RETAIN.Add(ID);
                                                    }
                                                }
                                                else
                                                {
                                                    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                    Guid ID = plate.Identifier.GUID;
                                                    PARTMARK_TO_RETAIN.Add(ID);

                                                }

                                            }
                                            else if (!mw1.Identifier.ID.Equals(plate.Identifier.ID))
                                            {
                                                //TSG.CoordinateSystem kl = mw1.GetCoordinateSystem();
                                                //TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                //TSG.Point pz = tokkk.Transform(kl.Origin);
                                                //double x_value = pz.X;



                                                double x_value = 0;
                                                string prof_type_for_channel_check = "";
                                                mw1.GetReportProperty("PROFILE_TYPE", ref prof_type_for_channel_check);

                                                if (prof_type_for_channel_check != "U")
                                                {
                                                    TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                                    TSG.CoordinateSystem kl = mw1.GetCoordinateSystem();


                                                    TSG.Point pz = tokkk.Transform(kl.Origin);
                                                    x_value = pz.X;
                                                }
                                                else
                                                {
                                                    TSG.CoordinateSystem channel_coord = mw1.GetCoordinateSystem();
                                                    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(channel_coord));
                                                    ArrayList catalog_values_for_channel = Getcatalog_values(mw1);
                                                    double offset = Convert.ToDouble(catalog_values_for_channel[1]);
                                                    TSG.CoordinateSystem kl = new TSG.CoordinateSystem();
                                                    kl.Origin = new TSG.Point(0, 0, -offset / 2);



                                                    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(kl));


                                                    TSG.Point pz = converted_points_FOR_CHANNEL(model, new TSG.Point(0, 0, 0), mw1 as TSM.Beam, current_view);


                                                    x_value = pz.X;

                                                    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                                }
                                                if (chkrdconnmark.Checked == true)
                                                {
                                                    if (Convert.ToInt64(x_value) >= Convert.ToInt64(p1[1].X))
                                                    {
                                                        ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                        Guid ID = plate.Identifier.GUID;
                                                        PARTMARK_TO_RETAIN.Add(ID);
                                                    }
                                                    else if (Convert.ToInt64(x_value) <= Convert.ToInt64(p1[0].X))
                                                    {
                                                        ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                        Guid ID = plate.Identifier.GUID;
                                                        PARTMARK_TO_RETAIN.Add(ID);
                                                    }
                                                }
                                                else
                                                {
                                                    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                    Guid ID = plate.Identifier.GUID;
                                                    PARTMARK_TO_RETAIN.Add(ID);

                                                }
                                            }

                                            //else 
                                            //{
                                            //    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, 0));
                                            //}

                                        }


                                    }
                                    else
                                    {
                                        ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, 0));
                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);
                                    }
                                }
                                else
                                {
                                     TSM.ModelObjectEnumerator platebolts = plate.GetBolts();
                                    int a = platebolts.GetSize();
                                    if (a > 0)
                                    {
                                        List<TSG.Point> p1_yasc = Get_face_point_for_plate_test(plate, current_view);
                                        List<TSG.Point> p_x_asc = new List<TSG.Point>();
                                        foreach (TSG.Point mypoint in p1_yasc)
                                        {
                                            p_x_asc.Add(mypoint);
                                        }

                                        p1_yasc.Distinct();
                                        p_x_asc.Distinct();


                                        p1_yasc.Sort(new sort_by_y_value_asc());
                                        p_x_asc.Sort(new sort_by_x_value_max());


                                        ptlist_for_attachments_top.Add(p1_yasc[0]);

                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);





                                        TSD.AngleDimensionAttributes fi = new TSD.AngleDimensionAttributes();
                                        fi.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                        if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                        {
                                            if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                            {
                                                fi.Text.Font.Height = 3.571875;
                                            }
                                            else
                                            {
                                                fi.Text.Font.Height = 3.175;
                                            }
                                        }
                                        else
                                        {
                                            fi.Text.Font.Height = 2.38125;


                                        }


                                        z_vec_of_plate.Normalize();
                                        if (Convert.ToInt64(z_vec_of_plate.Y) > 0)
                                        {
                                            double dist_for_anglular_dim = (TSG.Distance.PointToPoint(p1_yasc[0], p_x_asc[0]) + 100) / view_scale;

                                            TSG.Vector myvector = new TSG.Vector(p_x_asc[0] - p1_yasc[0]);
                                            TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, p_x_asc[0], myvector, new TSG.Vector(1, 0, -1), dist_for_anglular_dim,fi);
                                            angledim1.Insert();
                                            TSG.Vector vector_for_pitch = new TSG.Vector();
                                           List< TSG.Point> p1 =   mypoint_for_bolt_skew(plate, current_view,out vector_for_pitch);
                                           List<TSG.Point> P2 = p1.Distinct(new REMOVING_DUPLICATE_Z_VALUE_IN_CURRENT_VIEW()).ToList();
                                            TSD.PointList mypt_list = new TSD.PointList();
                                            foreach (TSG.Point PT in P2)
                                            {
                                                mypt_list.Add(PT);
 
                                            }

                                            mypt_list.Add(p1_yasc[0]);     
                                            TSD.StraightDimensionSetHandler myset = new TSD.StraightDimensionSetHandler();
                                            myset.CreateDimensionSet(current_view as TSD.ViewBase, mypt_list, vector_for_pitch, 100,dim_font_height);
                                        }
                                        else if (Convert.ToInt64(z_vec_of_plate.Y) < 0)
                                        {
                                            double dist_for_anglular_dim = (TSG.Distance.PointToPoint(p1_yasc[0], p_x_asc[p_x_asc.Count - 1]) + 100) / view_scale;
                                            TSG.Vector myvector = new TSG.Vector(p_x_asc[p_x_asc.Count - 1] - p1_yasc[0]);
                                            TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, p_x_asc[p_x_asc.Count - 1], myvector, new TSG.Vector(1, 0, 1), dist_for_anglular_dim,fi);
                                            angledim1.Insert();
                                            TSG.Vector vector_for_pitch = new TSG.Vector();
                                            List<TSG.Point> p1 = mypoint_for_bolt_skew(plate, current_view, out vector_for_pitch);
                                            List<TSG.Point> P2 = p1.Distinct(new REMOVING_DUPLICATE_Z_VALUE_IN_CURRENT_VIEW()).ToList();
                                            TSD.PointList mypt_list = new TSD.PointList();
                                            foreach (TSG.Point PT in P2)
                                            {
                                                mypt_list.Add(PT);

                                            }
                                            mypt_list.Add(p1_yasc[0]);
                                            TSG.Vector new_vect = new TSG.Vector(p_x_asc[p_x_asc.Count - 1] - p1[0]);
                                            //TSG.Vector vector_for_pitch = new_vect.Cross(new TSG.Vector(0, 0, 1));
                                            //vector_for_pitch.Normalize();
                                            TSD.StraightDimensionSetHandler myset = new TSD.StraightDimensionSetHandler();
                                            myset.CreateDimensionSet(current_view as TSD.ViewBase, mypt_list, vector_for_pitch, 100,dim_font_height);

                                        }




                                    }
                                    else
                                    {
                                        List<TSG.Point> p1_yasc = Get_face_point_for_plate_test(plate, current_view);
                                        List<TSG.Point> p_x_asc = new List<TSG.Point>();
                                        foreach (TSG.Point mypoint in p1_yasc)
                                        {
                                            p_x_asc.Add(mypoint);
                                        }

                                        p1_yasc.Distinct();
                                        p_x_asc.Distinct();


                                        p1_yasc.Sort(new sort_by_y_value_asc());
                                        p_x_asc.Sort(new sort_by_x_value_max());


                                        ptlist_for_attachments_top.Add(p1_yasc[0]);

                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);





                                        TSD.AngleDimensionAttributes fi = new TSD.AngleDimensionAttributes();
                                        fi.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                        if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                        {
                                            if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                            {
                                                fi.Text.Font.Height = 3.571875;
                                            }
                                            else
                                            {
                                                fi.Text.Font.Height = 3.175;
                                            }
                                        }
                                        else
                                        {
                                            fi.Text.Font.Height = 2.38125;


                                        }


                                        z_vec_of_plate.Normalize();
                                        if (Convert.ToInt64(z_vec_of_plate.Y) > 0)
                                        {
                                            double dist_for_anglular_dim = (TSG.Distance.PointToPoint(p1_yasc[0], p_x_asc[0]) + 100) / view_scale;

                                            TSG.Vector myvector = new TSG.Vector(p_x_asc[0] - p1_yasc[0]);
                                            TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, p_x_asc[0], myvector, new TSG.Vector(1, 0, -1), dist_for_anglular_dim,fi);
                                            angledim1.Insert();
                                        }
                                        else if (Convert.ToInt64(z_vec_of_plate.Y) < 0)
                                        {
                                            double dist_for_anglular_dim = (TSG.Distance.PointToPoint(p1_yasc[0], p_x_asc[p_x_asc.Count - 1]) + 100) / view_scale;
                                            TSG.Vector myvector = new TSG.Vector(p_x_asc[p_x_asc.Count - 1] - p1_yasc[0]);
                                            TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, p_x_asc[p_x_asc.Count - 1], myvector, new TSG.Vector(1, 0, 1), dist_for_anglular_dim,fi);
                                            angledim1.Insert();
                                        }
 
                                    }
                                }
                            }
                            //else if (prof_type == "L")
                            //{
                            //    ///////////hillsdale angle dim intopview//////////////////////////
                            //    // ptlist_for_attachments_angle.Add(new TSG.Point(bounding_box_y[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                            //    TSM.ModelObjectEnumerator platebolts1 = plate.GetBolts();




                            //    List<TSM.BoltGroup> list_of_bolts = new List<TSM.BoltGroup>();


                            //    TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                            //    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                            //    while (platebolts1.MoveNext())
                            //    {
                            //        TSM.BoltGroup model_bolt = platebolts1.Current as TSM.BoltGroup;



                            //        list_of_bolts.Add(model_bolt);

                            //    }


                            //    IEnumerable<TSM.BoltGroup> result1 = (from b in list_of_bolts
                            //                                          where (Convert.ToInt64((b.GetCoordinateSystem().AxisX.Cross(b.GetCoordinateSystem().AxisY)).Z) == 0)
                            //                                          select b).ToList();


                            //    IEnumerable<TSM.BoltGroup> result = (from b in result1
                            //                                         where (Convert.ToInt64((b.GetCoordinateSystem().AxisX.Cross(b.GetCoordinateSystem().AxisY)).Y) != 0)
                            //                                         select b).ToList();
                            //    //var result = (from b in list_of_bolts
                            //    //              select new
                            //    //              {
                            //    //                  bolt = b,
                            //    //                  mm = (b.GetCoordinateSystem().AxisX.Cross(b.GetCoordinateSystem().AxisY))
                            //    //              }
                            //    //                                        ).ToList();

                            //    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                            //    if (result.Count() == 0)
                            //    {

                            //        TSM.ModelObjectEnumerator platebolts = plate.GetBolts();

                            //        int a = platebolts.GetSize();
                            //        if (a > 0)
                            //        {
                            //            TSD.PointList p1 = bounding_box_sort_x(plate, current_view);


                            //            while (platebolts.MoveNext())
                            //            {
                            //                TSM.BoltGroup bolt = platebolts.Current as TSM.BoltGroup;
                            //                TSG.CoordinateSystem m = bolt.GetCoordinateSystem();
                            //                TSM.Part mw = bolt.PartToBeBolted;
                            //                TSM.Part mw1 = bolt.PartToBoltTo;
                            //                ArrayList mw2 = bolt.OtherPartsToBolt;

                            //                if (!mw.Identifier.ID.Equals(plate.Identifier.ID))
                            //                {




                            //                    double x_value = 0;
                            //                    string prof_type_for_channel_check = "";
                            //                    mw.GetReportProperty("PROFILE_TYPE", ref prof_type_for_channel_check);

                            //                    if (prof_type_for_channel_check != "U")
                            //                    {

                            //                        TSG.CoordinateSystem kl = mw.GetCoordinateSystem();

                            //                        TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                            //                        TSG.Point pz = tokkk.Transform(kl.Origin);
                            //                        x_value = pz.X;
                            //                    }
                            //                    else
                            //                    {
                            //                        TSG.CoordinateSystem channel_coord = mw.GetCoordinateSystem();
                            //                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(channel_coord));
                            //                        ArrayList catalog_values_for_channel = Getcatalog_values(mw);
                            //                        double offset = Convert.ToDouble(catalog_values_for_channel[1]);
                            //                        TSG.CoordinateSystem kl = new TSG.CoordinateSystem();
                            //                        kl.Origin = new TSG.Point(0, 0, -offset / 2);



                            //                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(kl));


                            //                        TSG.Point pz = converted_points_FOR_CHANNEL(model, kl.Origin, mw as TSM.Beam, current_view);


                            //                        x_value = pz.X;

                            //                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                            //                    }


                            //                    TSG.Point face_point_for_angle_bswelded = Get_face_point_for_angle_bothside_weldedlogic_top(plate, current_view);
                            //                    ptlist_for_attachments_top.Add(new TSG.Point(face_point_for_angle_bswelded.X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                            //                    Guid ID = plate.Identifier.GUID;
                            //                    PARTMARK_TO_RETAIN.Add(ID);



                            //                    //if (Convert.ToInt64(x_value) >= Convert.ToInt64(p1[1].X))
                            //                    //{
                            //                    //    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                            //                    //}
                            //                    //else if (Convert.ToInt64(x_value) <= Convert.ToInt64(p1[0].X))
                            //                    //{
                            //                    //    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                            //                    //}
                            //                    //else
                            //                    //{
                            //                    //    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                            //                    //}

                            //                }
                            //                else if (!mw1.Identifier.ID.Equals(plate.Identifier.ID))
                            //                {



                            //                    double x_value = 0;
                            //                    string prof_type_for_channel_check = "";
                            //                    mw1.GetReportProperty("PROFILE_TYPE", ref prof_type_for_channel_check);

                            //                    if (prof_type_for_channel_check != "U")
                            //                    {
                            //                        TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                            //                        TSG.CoordinateSystem kl = mw1.GetCoordinateSystem();


                            //                        TSG.Point pz = tokkk.Transform(kl.Origin);
                            //                        x_value = pz.X;
                            //                    }
                            //                    else
                            //                    {
                            //                        TSG.CoordinateSystem channel_coord = mw1.GetCoordinateSystem();
                            //                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(channel_coord));
                            //                        ArrayList catalog_values_for_channel = Getcatalog_values(mw1);
                            //                        double offset = Convert.ToDouble(catalog_values_for_channel[1]);
                            //                        TSG.CoordinateSystem kl = new TSG.CoordinateSystem();
                            //                        kl.Origin = new TSG.Point(0, 0, -offset / 2);



                            //                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(kl));


                            //                        TSG.Point pz = converted_points_FOR_CHANNEL(model, kl.Origin, mw1 as TSM.Beam, current_view);


                            //                        x_value = pz.X;

                            //                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                            //                    }
                            //                    TSG.Point face_point_for_angle_bswelded = Get_face_point_for_angle_bothside_weldedlogic_top(plate, current_view);
                            //                    ptlist_for_attachments_top.Add(new TSG.Point(face_point_for_angle_bswelded.X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                            //                    Guid ID = plate.Identifier.GUID;
                            //                    PARTMARK_TO_RETAIN.Add(ID);

                            //                }

                            //                else
                            //                {
                            //                    //  ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                            //                }

                            //            }
                            //        }


                            //        else
                            //        {
                            //            TSG.Point face_point_for_angle_bswelded = Get_face_point_for_angle_bothside_weldedlogic_top(plate, current_view);
                            //            ptlist_for_attachments_top.Add(new TSG.Point(face_point_for_angle_bswelded.X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                            //            Guid ID = plate.Identifier.GUID;
                            //            PARTMARK_TO_RETAIN.Add(ID);

                            //        }



                            //    }
                            //    else
                            //    {







                            //    }

                            //    # region angle_3.5_dim

                            //    //TSD.PointList angle_3_5_dim = new TSD.PointList();

                            //    //TSM.Model mymodel = new TSM.Model();
                            //    //mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                            //    //TSG.CoordinateSystem angle_coord = plate.GetCoordinateSystem();
                            //    //mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());


                            //    //if ((profile_type == "U") && (Convert.ToInt64(angle_coord.AxisX.X) == 0))
                            //    //{
                            //    //    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
                            //    //    TSG.Vector zvector = main_part.GetCoordinateSystem().AxisX.Cross(main_part.GetCoordinateSystem().AxisY);
                            //    //    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                            //    //    zvector.Normalize();
                            //    //    double WT = 0;


                            //    //    double WT2 = Convert.ToDouble(catalog_values[1]);
                            //    //    if (zvector.Y > 0)
                            //    //    {
                            //    //        WT = (-WT2 / 2);
                            //    //    }
                            //    //    else
                            //    //    {
                            //    //        WT = (WT2 / 2);
                            //    //    }

                            //    //    if (Convert.ToInt64(bounding_box_y[0].Y) >= Convert.ToInt64(WT))
                            //    //    {
                            //    //        TSG.Point p1 = new TSG.Point();
                            //    //        p1 = new TSG.Point(bounding_box_y[1].X, bounding_box_y[0].Y, 0);
                            //    //        TSG.Point p2 = new TSG.Point();
                            //    //        p2 = new TSG.Point(bounding_box_y[0].X, bounding_box_y[0].Y, 0);
                            //    //        if (bounding_box_x[1].X > output)
                            //    //        {
                            //    //            angle_3_5_dim.Add(p2);
                            //    //            angle_3_5_dim.Add(p1);


                            //    //        }
                            //    //        else
                            //    //        {
                            //    //            angle_3_5_dim.Add(p1);
                            //    //            angle_3_5_dim.Add(p2);
                            //    //        }
                            //    //        double dist = Math.Abs(current_view.RestrictionBox.MaxPoint.Y) - Math.Abs(angle_3_5_dim[0].Y);
                            //    //        TSD.StraightDimensionSetHandler dim_for_3_5 = new TSD.StraightDimensionSetHandler();
                            //    //        TSD.StraightDimensionSet.StraightDimensionSetAttributes att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                            //    //        att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                            //    //        att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                            //    //        try
                            //    //        {
                            //    //            dim_for_3_5.CreateDimensionSet(current_view, angle_3_5_dim, new TSG.Vector(0, 1, 0), dist + 50 + Math.Abs(WT), att);
                            //    //        }
                            //    //        catch
                            //    //        {
                            //    //        }
                            //    //    }
                            //    //    if (Convert.ToInt64(bounding_box_y[1].Y) <= Convert.ToInt64(WT))
                            //    //    {
                            //    //        TSG.Point p1 = new TSG.Point();
                            //    //        p1 = new TSG.Point(bounding_box_y[1].X, bounding_box_y[1].Y, 0);
                            //    //        TSG.Point p2 = new TSG.Point();
                            //    //        p2 = new TSG.Point(bounding_box_y[0].X, bounding_box_y[1].Y, 0);
                            //    //        if (bounding_box_x[1].X > output)
                            //    //        {
                            //    //            angle_3_5_dim.Add(p2);
                            //    //            angle_3_5_dim.Add(p1);


                            //    //        }
                            //    //        else
                            //    //        {
                            //    //            angle_3_5_dim.Add(p1);
                            //    //            angle_3_5_dim.Add(p2);
                            //    //        }
                            //    //        double dist = Math.Abs(current_view.RestrictionBox.MinPoint.Y) - Math.Abs(angle_3_5_dim[0].Y);
                            //    //        TSD.StraightDimensionSetHandler dim_for_3_5 = new TSD.StraightDimensionSetHandler();
                            //    //        TSD.StraightDimensionSet.StraightDimensionSetAttributes att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                            //    //        att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                            //    //        att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                            //    //        try
                            //    //        {
                            //    //            dim_for_3_5.CreateDimensionSet(current_view, angle_3_5_dim, new TSG.Vector(0, -1, 0), dist + 50 + Math.Abs(WT), att);
                            //    //        }
                            //    //        catch
                            //    //        {
                            //    //        }
                            //    //    }
                            //    //}

                            //    //else if ((Convert.ToInt64(angle_coord.AxisX.X) == 0))
                            //    //{
                            //    //    if (Convert.ToInt64(bounding_box_y[0].Y) > 0)
                            //    //    {
                            //    //        TSG.Point p1 = new TSG.Point();
                            //    //        p1 = new TSG.Point(bounding_box_y[1].X, bounding_box_y[0].Y, 0);
                            //    //        TSG.Point p2 = new TSG.Point();
                            //    //        p2 = new TSG.Point(bounding_box_y[0].X, bounding_box_y[0].Y, 0);

                            //    //        if (bounding_box_x[1].X > output)
                            //    //        {
                            //    //            angle_3_5_dim.Add(p2);
                            //    //            angle_3_5_dim.Add(p1);


                            //    //        }
                            //    //        else
                            //    //        {
                            //    //            angle_3_5_dim.Add(p1);
                            //    //            angle_3_5_dim.Add(p2);
                            //    //        }
                            //    //        double dist = Math.Abs(current_view.RestrictionBox.MaxPoint.Y) - Math.Abs(angle_3_5_dim[0].Y);
                            //    //        TSD.StraightDimensionSetHandler dim_for_3_5 = new TSD.StraightDimensionSetHandler();
                            //    //        TSD.StraightDimensionSet.StraightDimensionSetAttributes att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                            //    //        att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                            //    //        att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;

                            //    //        try
                            //    //        {
                            //    //            dim_for_3_5.CreateDimensionSet(current_view, angle_3_5_dim, new TSG.Vector(0, 1, 0), dist + 50, att);
                            //    //        }
                            //    //        catch
                            //    //        {
                            //    //        }
                            //    //    }
                            //    //    if (Convert.ToInt64(bounding_box_y[1].Y) < 0)
                            //    //    {
                            //    //        TSG.Point p1 = new TSG.Point();
                            //    //        p1 = new TSG.Point(bounding_box_y[1].X, bounding_box_y[1].Y, 0);
                            //    //        TSG.Point p2 = new TSG.Point();
                            //    //        p2 = new TSG.Point(bounding_box_y[0].X, bounding_box_y[1].Y, 0);
                            //    //        if (bounding_box_x[1].X > output)
                            //    //        {
                            //    //            angle_3_5_dim.Add(p2);
                            //    //            angle_3_5_dim.Add(p1);


                            //    //        }
                            //    //        else
                            //    //        {
                            //    //            angle_3_5_dim.Add(p1);
                            //    //            angle_3_5_dim.Add(p2);
                            //    //        }
                            //    //        double dist = Math.Abs(current_view.RestrictionBox.MinPoint.Y) - Math.Abs(angle_3_5_dim[0].Y);
                            //    //        TSD.StraightDimensionSetHandler dim_for_3_5 = new TSD.StraightDimensionSetHandler();
                            //    //        TSD.StraightDimensionSet.StraightDimensionSetAttributes att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                            //    //        att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                            //    //        att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                            //    //        try
                            //    //        {
                            //    //            dim_for_3_5.CreateDimensionSet(current_view, angle_3_5_dim, new TSG.Vector(0, -1, 0), dist + 50, att);
                            //    //        }
                            //    //        catch
                            //    //        {
                            //    //        }
                            //    //    }
                            //    //}
                            //    # endregion

                            //}


                         
                        }
                    }

                    else
                    { 
                          if (prof_type == "B")
                            {

                              
                                if ((Convert.ToInt64(angle_check) == 0) || (Convert.ToInt64(angle_check) == 90) || (Convert.ToInt64(angle_check) == 180) || (Convert.ToInt64(angle_check) == 270) || (Convert.ToInt64(angle_check) == 360))
                                {

                                }
                                else
                                {
                                      TSM.ModelObjectEnumerator platebolts = plate.GetBolts();
                                    int a = platebolts.GetSize();
                                    if (a > 0)
                                    {
                                        List<TSG.Point> p1_yasc = Get_face_point_for_plate_test(plate, current_view);
                                        p1_yasc.Distinct();
                                        List<TSG.Point> p_x_asc = new List<TSG.Point>();
                                        foreach (TSG.Point mypoint in p1_yasc)
                                        {
                                            p_x_asc.Add(mypoint);
                                        }

                                        p1_yasc.Distinct();
                                        p_x_asc.Distinct();


                                        p1_yasc.Sort(new sort_by_y_value_asc());
                                        p_x_asc.Sort(new sort_by_x_value_max());



                                        ptlist_for_attachments_top_plate_nearside.Add(p1_yasc[p1_yasc.Count - 1]);
                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);





                                        TSD.AngleDimensionAttributes fi = new TSD.AngleDimensionAttributes();
                                        fi.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                        {
                                            fi.Text.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            fi.Text.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        fi.Text.Font.Height = 2.38125;


                                    }


                                        z_vec_of_plate.Normalize();
                                        if (Convert.ToInt64(z_vec_of_plate.Y) > 0)
                                        {
                                            double dist_for_anglular_dim = (TSG.Distance.PointToPoint(p1_yasc[p1_yasc.Count - 1], p_x_asc[0]) + 100) / view_scale;
                                            TSG.Vector myvector = new TSG.Vector(p_x_asc[0] - p1_yasc[p1_yasc.Count - 1]);
                                            TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, p_x_asc[0], myvector, new TSG.Vector(1, 0, 1), dist_for_anglular_dim,fi);
                                            angledim1.Insert();
                                            TSG.Vector vector_for_pitch = new TSG.Vector();
                                            List<TSG.Point> p1 = mypoint_for_bolt_skew(plate, current_view, out vector_for_pitch);
                                            List<TSG.Point> P2 = p1.Distinct(new REMOVING_DUPLICATE_Z_VALUE_IN_CURRENT_VIEW()).ToList();
                                            TSD.PointList mypt_list = new TSD.PointList();
                                            foreach (TSG.Point PT in P2)
                                            {
                                                mypt_list.Add(PT);

                                            }
                                            mypt_list.Add(p1_yasc[p1_yasc.Count - 1]);
                                            
                                          
                                            TSD.StraightDimensionSetHandler myset = new TSD.StraightDimensionSetHandler();
                                            myset.CreateDimensionSet(current_view as TSD.ViewBase, mypt_list, vector_for_pitch, 100,dim_font_height);

                                        }
                                        else if (Convert.ToInt64(z_vec_of_plate.Y) < 0)
                                        {
                                            double dist_for_anglular_dim = (TSG.Distance.PointToPoint(p1_yasc[p1_yasc.Count - 1], p_x_asc[p_x_asc.Count - 1]) + 100) / view_scale;

                                            TSG.Vector myvector = new TSG.Vector(p_x_asc[p_x_asc.Count - 1] - p1_yasc[p1_yasc.Count - 1]);
                                            TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, p_x_asc[p_x_asc.Count - 1], myvector, new TSG.Vector(1, 0, 1), dist_for_anglular_dim,fi);
                                            angledim1.Insert();
                                            TSG.Vector vector_for_pitch = new TSG.Vector();
                                            List<TSG.Point> p1 = mypoint_for_bolt_skew(plate, current_view, out vector_for_pitch);
                                            List<TSG.Point> P2 = p1.Distinct(new REMOVING_DUPLICATE_Z_VALUE_IN_CURRENT_VIEW()).ToList();
                                            TSD.PointList mypt_list = new TSD.PointList();
                                            foreach (TSG.Point PT in P2)
                                            {
                                                mypt_list.Add(PT);

                                            }
                                            TSD.StraightDimensionSetHandler myset = new TSD.StraightDimensionSetHandler();
                                            myset.CreateDimensionSet(current_view as TSD.ViewBase, mypt_list, vector_for_pitch, 100,dim_font_height);
                                        /////corrrct/////////


                                        }
                                 
                                    }
                                    else
                                    {
                                        List<TSG.Point> p1_yasc = Get_face_point_for_plate_test(plate, current_view);
                                        p1_yasc.Distinct();
                                        List<TSG.Point> p_x_asc = new List<TSG.Point>();
                                        foreach (TSG.Point mypoint in p1_yasc)
                                        {
                                            p_x_asc.Add(mypoint);
                                        }

                                        p1_yasc.Distinct();
                                        p_x_asc.Distinct();


                                        p1_yasc.Sort(new sort_by_y_value_asc());
                                        p_x_asc.Sort(new sort_by_x_value_max());



                                        ptlist_for_attachments_top_plate_nearside.Add(p1_yasc[p1_yasc.Count - 1]);
                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);





                                        TSD.AngleDimensionAttributes fi = new TSD.AngleDimensionAttributes();
                                        fi.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                        {
                                            fi.Text.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            fi.Text.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        fi.Text.Font.Height = 2.38125;
                                    }


                                        z_vec_of_plate.Normalize();
                                        if (Convert.ToInt64(z_vec_of_plate.Y) > 0)
                                        {
                                            double dist_for_anglular_dim = (TSG.Distance.PointToPoint(p1_yasc[p1_yasc.Count - 1], p_x_asc[0]) + 100) / view_scale;
                                            TSG.Vector myvector = new TSG.Vector(p_x_asc[0] - p1_yasc[p1_yasc.Count - 1]);
                                            TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, p_x_asc[0], myvector, new TSG.Vector(1, 0, 1), dist_for_anglular_dim,fi);
                                            angledim1.Insert();
                                    
                                        }
                                        else if (Convert.ToInt64(z_vec_of_plate.Y) < 0)
                                        {
                                            double dist_for_anglular_dim = (TSG.Distance.PointToPoint(p1_yasc[p1_yasc.Count - 1], p_x_asc[p_x_asc.Count - 1]) + 100) / view_scale;

                                            TSG.Vector myvector = new TSG.Vector(p_x_asc[p_x_asc.Count - 1] - p1_yasc[p1_yasc.Count - 1]);
                                            TSD.AngleDimension angledim1 = new TSD.AngleDimension(current_view as TSD.ViewBase, p_x_asc[p_x_asc.Count - 1], myvector, new TSG.Vector(1, 0, 1), dist_for_anglular_dim,fi);
                                            angledim1.Insert();
                                        }
                                    }
                                }
                         }
                    

                    }
                }

                else if (prof_type == "L")
                {
                   
                        if ((Convert.ToInt64( x_vec_of_plate.X) != 0) && ( Convert.ToInt64( y_vec_of_plate.Y) != 0))
                        {
                            if ((angle_check == 0) || (angle_check == 90) || (angle_check == 180) || (angle_check == 360))
                            {
                            ////////////////////////////////2018/////////////////////////////////////////////////////
                            ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));
                            Guid ID = plate.Identifier.GUID;
                            PARTMARK_TO_RETAIN.Add(ID);
                            }

                        }
                        else
                        {
                            string angle_dim = check_for_angle_dim(plate, current_view);

                            if (angle_dim == "NEED")
                            {

                                List<angle_face_area> myreq = getface_for_angle(plate);
                                TSG.Point midpt_of_angle = angle_mid_pt(myreq, current_view);
                                ptlist_for_attachments_top.Add(midpt_of_angle);
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }



                        }
                    

                }


            }
            double HT2 = Convert.ToDouble(catalog_values[0]);
            double HT = Convert.ToInt64(HT2 / 2);
            double WTs = 0;
            if (profile_type == "U")
            {
                double WTs2 = Convert.ToDouble(catalog_values[1]);
                WTs = Convert.ToInt64(WTs2 / 2);
            }
            else
            {
                WTs = 0;
            }
            ///////////////////////////////////////////FOR PLATE/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            if (ptlist_for_attachments_top.Count > 1)
            {
                TSD.PointList pt_list_z_positive = new TSD.PointList();
                foreach (TSG.Point pt in ptlist_for_attachments_top)
                {
                    if ((Convert.ToInt16(pt.X) > WTs) && (Convert.ToInt16(pt.X) < output))
                    {

                        if ((pt.Y > 0) && (Convert.ToInt64(pt.Z) < HT))
                        {

                            pt_list_z_positive.Add(pt);
                        }
                    }
                }



                TSD.PointList final_ptlist_for_attachments_top = pointlist_remove_duplicate_Xvalues(pt_list_z_positive);
                final_ptlist_for_attachments_top.Insert(0, (new TSG.Point(0, 0, 0)));
                sorting_points_by_x_asc(final_ptlist_for_attachments_top);

                try
                {
                    dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, final_ptlist_for_attachments_top, new TSG.Vector(0, 1, 0), Math.Abs(current_view.RestrictionBox.MaxPoint.Y) + 225, RDATT);
                }
                catch
                {
                }
                
                try
                {
                    dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_attachments_top_plate_nearside, new TSG.Vector(0, -1, 0), Math.Abs(current_view.RestrictionBox.MinPoint.Y) + 100, RDATT);
                }
                catch
                {
                }
            }
            ///////////////////////////////////END FOR PLATE ///////////////////////////////////////////////////////////////////////////////




            /////////////////////////////////////FOR ANGLE in hillsdale/////////////////////////////////////////////////////////////////////////////////////////////

            //if (ptlist_for_attachments_angle.Count > 1)
            //{
            //    TSD.PointList pt_list_z_positive = new TSD.PointList();
            //    TSD.PointList pt_list_z_negative = new TSD.PointList();
            //    foreach (TSG.Point pt in ptlist_for_attachments_angle)
            //    {
            //        if (pt.Y > 0)
            //        {
            //            pt_list_z_positive.Add(pt);
            //        }
            //        if (pt.Y < 0)
            //        {
            //            pt_list_z_negative.Add(pt);
            //        }

            //    }

            //    TSD.PointList final_ptlist_for_attachments_top = pointlist_remove_duplicate_Xvalues(pt_list_z_positive);
            //    final_ptlist_for_attachments_top.Add(new TSG.Point(0, 0, 0));
            //    sorting_points_by_x_asc(final_ptlist_for_attachments_top);


            //    TSD.PointList final_ptlist_for_attachments_top_negative = pointlist_remove_duplicate_Xvalues(pt_list_z_negative);
            //    final_ptlist_for_attachments_top_negative.Add(new TSG.Point(0, 0, 0));
            //    sorting_points_by_x_asc(final_ptlist_for_attachments_top_negative);

            //    try
            //    {
            //        dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, final_ptlist_for_attachments_top, new TSG.Vector(0, 1, 0), Math.Abs(current_view.RestrictionBox.MaxPoint.Y) + 250, RDATT);
            //    }
            //    catch
            //    {
            //    }

            //    try
            //    {
            //        dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, final_ptlist_for_attachments_top_negative, new TSG.Vector(0, -1, 0), Math.Abs(current_view.RestrictionBox.MaxPoint.Y) + 250, RDATT);
            //    }
            //    catch
            //    {
            //    }
            //}



            ///////////////////////////////////END FOR ANGLE/////////////////////////////////////////////////////////////////////////////////////////

        }
        public void Dimensions_for_attachments_for_outside_flange(TSM.Beam main_part, TSD.View current_view, double output,ref List<Guid> PARTMARK_TO_RETAIN,string drg_att)
        {

       
            ArrayList catalog_values = Getcatalog_values(main_part);
            double top_front;
            if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))
            {
                top_front = Convert.ToDouble(catalog_values[0]);
            }
            else
            {
                top_front = Convert.ToDouble(catalog_values[1]);
            }

            TSM.Model model = new TSM.Model();
            TSD.DrawingHandler drg_handler = new TSD.DrawingHandler();
            TSD.StraightDimensionSetHandler dim_set_handler = new TSD.StraightDimensionSetHandler();
            TSD.PointList ptlist_for_attachments_top = new TSD.PointList();
            ptlist_for_attachments_top.Add(new TSG.Point(0, 0, 0));
            TSD.PointList ptlist_for_attachments_bottom = new TSD.PointList();
            TSD.PointList bottom_platefilter = new TSD.PointList();
            TSD.PointList top_platefilter = new TSD.PointList();
            ptlist_for_attachments_bottom.Add(new TSG.Point(0, 0, 0));
            TSD.DrawingObjectEnumerator enum_for_parts_drg = current_view.GetAllObjects(typeof(TSD.Part));

            while (enum_for_parts_drg.MoveNext())
            {
                TSD.Part mypart = enum_for_parts_drg.Current as TSD.Part;

                TSM.Part plate = new TSM.Model().SelectModelObject(mypart.ModelIdentifier) as TSM.Part;


                string prof_type = "";

                plate.GetReportProperty("PROFILE_TYPE", ref prof_type);
                //////////////////////////////////Filtering all the plates////////////////////////////////

                TSD.PointList bounding_box_y = bounding_box_sort_y(plate, current_view);
                TSD.PointList bounding_box_x = bounding_box_sort_x(plate, current_view);
                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                TSG.Vector x_vec_of_plate = plate.GetCoordinateSystem().AxisX;
                TSG.Vector y_vec_of_plate = plate.GetCoordinateSystem().AxisY;
                TSG.Vector z_vec_of_plate = x_vec_of_plate.Cross(y_vec_of_plate);
                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                double angle_check = RadianToDegree((z_vec_of_plate.GetAngleBetween(new TSG.Vector(1, 0, 0))));
                string profile = plate.Profile.ProfileString;

                //if(plate.Name.Contains("FALLTECH")==false)
                {
                    if ((plate.GetType().Equals(typeof(TSM.PolyBeam))))
                    {
                        if ((y_vec_of_plate.X != 0) && (!profile.Contains("BOLT")))
                        {


                            if ((Convert.ToInt64(bounding_box_y[0].Y) >= Convert.ToInt64(top_front / 2)))
                            {
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                                ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_x[1].Y, bounding_box_x[0].Z));


                            }
                            else if ((Convert.ToInt64(bounding_box_y[1].Y) <= -Convert.ToInt64(top_front / 2)))
                            {
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                                ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_x[1].Y, bounding_box_x[0].Z));

                            }
                        }


                        #region bolt
                        TSD.DrawingObjectEnumerator enum_for_bolt = current_view.GetAllObjects(typeof(TSD.Bolt));
                        TSD.PointList rd_point_list = new TSD.PointList();
                        TSG.Matrix top_mat = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                        ///////////////////////////////////////////////////getting bolt matrix points for bolt dimension///////////////////////////////////////////////////////////////////////////
                        while (enum_for_bolt.MoveNext())
                        {
                            TSD.Bolt drgbolt = enum_for_bolt.Current as TSD.Bolt;
                            TSM.ModelObject modelbolt = new TSM.Model().SelectModelObject(drgbolt.ModelIdentifier);
                            TSM.BoltArray bolt = modelbolt as TSM.BoltArray;


                            if (top_mat.Transform((bolt.BoltPositions[0]) as TSG.Point).Y > Convert.ToInt64(top_front / 2))
                            {
                                TSD.Bolt drgbolt1 = drgbolt;
                                TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix(drgbolt1, current_view);
                                if (POINT_FOR_BOLT_MATRIX != null)
                                {
                                    int y = POINT_FOR_BOLT_MATRIX.GetLength(0);
                                    int x = POINT_FOR_BOLT_MATRIX.GetLength(1);
                                    for (int i = 0; i < x; i++)
                                    {
                                        ///////////////////////////////////////////// condition for getting last row of bolts//////////////////////////////////////////////////////////////////////////////////////////////
                                        rd_point_list.Add(POINT_FOR_BOLT_MATRIX[y - 1, i]);
                                    }
                                    Guid ID = plate.Identifier.GUID;
                                    PARTMARK_TO_RETAIN.Add(ID);
                                }
                            }
                        }
                        rd_point_list.Add(new TSG.Point(0, 0, 0));

                        sorting_points_by_x_asc(rd_point_list);


                        // TSD.PointList FINAL_RD_LIST = pointlist_remove_duplicate_Xvalues(rd_point_list);
                        /////////////////////////////////////////////////// inserting bolt rd dimension ////////////////////////////////////////////////////////////////////////////////////////
                        TSD.StraightDimensionSetHandler bolt_rd_dim = new TSD.StraightDimensionSetHandler();

                        try
                        {
                            ////////////////////////////////////////////////////dimension distance placing linking ////////////////////////////////////////////////////////////////////////////////////////////////                
                            //double distance = Convert.ToDouble(top_front) / 2;
                            // TSG.Point p1 = (FINAL_RD_LIST[FINAL_RD_LIST.Count - 1] as TSG.Point);
                            // TSG.Point p2 = new TSG.Point((FINAL_RD_LIST[FINAL_RD_LIST.Count - 1] as TSG.Point).X, distance, 0);
                            //double distance_value = TSG.Distance.PointToPoint(p1, p2);
                            ///////////////////////////////////////////////////rd dimension creation///////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            TSD.StraightDimensionSet.StraightDimensionSetAttributes rd_att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                            rd_att.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
                            rd_att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                            rd_att.Color = DrawingColors.Gray70;
                            rd_att.Text.Font.Color = DrawingColors.Gray70;
                            rd_att.Arrowhead.Head = ArrowheadTypes.FilledArrow;
                            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                            {
                                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                {
                                    rd_att.Text.Font.Height = 3.571875;
                                }
                                else
                                {
                                    rd_att.Text.Font.Height = 3.175;
                                }
                            }
                            else
                            {
                                rd_att.Text.Font.Height = 2.38125;
                            }

                            //FINAL_RD_LIST.Add(new TSG.Point(0, 0, 0));
                            //sorting_points_by_x_asc(FINAL_RD_LIST);
                            //  bolt_rd_dim.CreateDimensionSet(current_view, rd_point_list, new TSG.Vector(0, 1, 0), 200 + 200, rd_att);

                        }
                        catch
                        {
                        }
                        #endregion







                    }
                    else if (prof_type == "B")
                    {

                        if ((Convert.ToInt64(angle_check) == 0) || (Convert.ToInt64(angle_check) == 90) || (Convert.ToInt64(angle_check) == 180) || (Convert.ToInt64(angle_check) == 270) || (Convert.ToInt64(angle_check) == 360))
                        {

                            TSM.ModelObjectEnumerator platebolts = plate.GetBolts();

                            int a = platebolts.GetSize();
                            if (a > 0)
                            {
                                TSD.PointList p1 = bounding_box_sort_x(plate, current_view);


                                while (platebolts.MoveNext())
                                {
                                    TSM.BoltGroup bolt = platebolts.Current as TSM.BoltGroup;
                                    TSG.CoordinateSystem m = bolt.GetCoordinateSystem();
                                    TSM.Part mw = bolt.PartToBeBolted;
                                    TSM.Part mw1 = bolt.PartToBoltTo;
                                    ArrayList mw2 = bolt.OtherPartsToBolt;

                                    if (!mw.Identifier.ID.Equals(plate.Identifier.ID))
                                    {
                                        //TSG.CoordinateSystem kl = mw.GetCoordinateSystem();

                                        //TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                        //TSG.Point pz = tokkk.Transform(kl.Origin);
                                        //double x_value = pz.X;

                                        double x_value = 0;
                                        string prof_type_for_channel_check = "";
                                        mw.GetReportProperty("PROFILE_TYPE", ref prof_type_for_channel_check);

                                        if (prof_type_for_channel_check != "U")
                                        {

                                            TSG.CoordinateSystem kl = mw.GetCoordinateSystem();

                                            TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                            TSG.Point pz = tokkk.Transform(kl.Origin);
                                            x_value = pz.X;
                                        }
                                        else
                                        {
                                            TSG.CoordinateSystem channel_coord = mw.GetCoordinateSystem();
                                            model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(channel_coord));
                                            ArrayList catalog_values_for_channel = Getcatalog_values(mw);
                                            double offset = Convert.ToDouble(catalog_values_for_channel[1]);
                                            TSG.CoordinateSystem kl = new TSG.CoordinateSystem();
                                            kl.Origin = new TSG.Point(0, 0, -offset / 2);



                                            model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(kl));


                                            TSG.Point pz = converted_points_FOR_CHANNEL(model, new TSG.Point(0, 0, 0), mw as TSM.Beam, current_view);


                                            x_value = pz.X;

                                            model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                        }
                                        if (chkrdconnmark.Checked == true)
                                        {

                                            bool RESULT_FOR_TOP = AlmostEqual(bounding_box_y[0].Y, top_front / 2);
                                            bool RESULT_FOR_BOT = AlmostEqual(bounding_box_y[1].Y, top_front / 2);
                                            if ((RESULT_FOR_TOP == true) || (RESULT_FOR_BOT == true))
                                            {
                                                if (Convert.ToInt64(bounding_box_y[0].Y) > 0)
                                                {
                                                    if (Convert.ToInt64(x_value) >= Convert.ToInt64(p1[1].X))
                                                    {
                                                        ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                        Guid ID = plate.Identifier.GUID;
                                                        PARTMARK_TO_RETAIN.Add(ID);
                                                    }
                                                    else if (Convert.ToInt64(x_value) <= Convert.ToInt64(p1[0].X))
                                                    {
                                                        ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                        Guid ID = plate.Identifier.GUID;
                                                        PARTMARK_TO_RETAIN.Add(ID);
                                                    }
                                                }
                                                else if (Convert.ToInt64(bounding_box_y[0].Y) < 0)
                                                {
                                                    if (Convert.ToInt64(x_value) >= Convert.ToInt64(p1[1].X))
                                                    {

                                                        ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                        Guid ID = plate.Identifier.GUID;
                                                        PARTMARK_TO_RETAIN.Add(ID);
                                                    }
                                                    else if (Convert.ToInt64(x_value) <= Convert.ToInt64(p1[0].X))
                                                    {
                                                        ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                        Guid ID = plate.Identifier.GUID;
                                                        PARTMARK_TO_RETAIN.Add(ID);
                                                    }

                                                }

                                            }



                                        }
                                        else
                                        {

                                            bool RESULT_FOR_TOP = AlmostEqual(bounding_box_y[0].Y, top_front / 2);
                                            bool RESULT_FOR_BOT = AlmostEqual(bounding_box_y[1].Y, top_front / 2);
                                            if ((RESULT_FOR_TOP == true) || (RESULT_FOR_BOT == true))
                                            {
                                                if (Convert.ToInt64(bounding_box_y[0].Y) > 0)
                                                {
                                                    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                    Guid ID = plate.Identifier.GUID;
                                                    PARTMARK_TO_RETAIN.Add(ID);
                                                }
                                                else if (Convert.ToInt64(bounding_box_y[0].Y) < 0)
                                                {
                                                    ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                    Guid ID = plate.Identifier.GUID;
                                                    PARTMARK_TO_RETAIN.Add(ID);
                                                }


                                            }
                                            else if ((Convert.ToInt64(bounding_box_y[0].Y) > top_front / 2) && (Convert.ToInt64(bounding_box_y[1].Y) > top_front / 2))
                                            {
                                                ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                Guid ID = plate.Identifier.GUID;
                                                PARTMARK_TO_RETAIN.Add(ID);

                                            }
                                            else if ((Convert.ToInt64(bounding_box_y[0].Y) < -top_front / 2) && (Convert.ToInt64(bounding_box_y[1].Y) < -top_front / 2))
                                            {
                                                ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                Guid ID = plate.Identifier.GUID;
                                                PARTMARK_TO_RETAIN.Add(ID);

                                            }



                                        }

                                    }
                                    if (!mw1.Identifier.ID.Equals(plate.Identifier.ID))
                                    {
                                        //TSG.CoordinateSystem kl = mw1.GetCoordinateSystem();

                                        //TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                        //TSG.Point pz = tokkk.Transform(kl.Origin);
                                        //double x_value = pz.X;



                                        double x_value = 0;
                                        string prof_type_for_channel_check = "";
                                        mw1.GetReportProperty("PROFILE_TYPE", ref prof_type_for_channel_check);

                                        if (prof_type_for_channel_check != "U")
                                        {
                                            TSG.Matrix tokkk = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                                            TSG.CoordinateSystem kl = mw1.GetCoordinateSystem();


                                            TSG.Point pz = tokkk.Transform(kl.Origin);
                                            x_value = pz.X;
                                        }
                                        else
                                        {
                                            TSG.CoordinateSystem channel_coord = mw1.GetCoordinateSystem();
                                            model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(channel_coord));
                                            ArrayList catalog_values_for_channel = Getcatalog_values(mw1);
                                            double offset = Convert.ToDouble(catalog_values_for_channel[1]);
                                            TSG.CoordinateSystem kl = new TSG.CoordinateSystem();
                                            kl.Origin = new TSG.Point(0, 0, -offset / 2);



                                            model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(kl));


                                            TSG.Point pz = converted_points_FOR_CHANNEL(model, new TSG.Point(0, 0, 0), mw1 as TSM.Beam, current_view);


                                            x_value = pz.X;

                                            model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                        }


                                        if (chkrdconnmark.Checked == true)
                                        {
                                            bool RESULT_FOR_TOP = AlmostEqual(bounding_box_y[0].Y, top_front / 2);
                                            bool RESULT_FOR_BOT = AlmostEqual(bounding_box_y[1].Y, top_front / 2);
                                            if ((RESULT_FOR_TOP == true) || (RESULT_FOR_BOT == true))
                                            {
                                                if (Convert.ToInt64(bounding_box_y[0].Y) > 0)
                                                {
                                                    if (Convert.ToInt64(x_value) >= Convert.ToInt64(p1[1].X))
                                                    {
                                                        ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                        Guid ID = plate.Identifier.GUID;
                                                        PARTMARK_TO_RETAIN.Add(ID);
                                                    }
                                                    else if (Convert.ToInt64(x_value) <= Convert.ToInt64(p1[0].X))
                                                    {
                                                        ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                        Guid ID = plate.Identifier.GUID;
                                                        PARTMARK_TO_RETAIN.Add(ID);
                                                    }
                                                }
                                                else if (Convert.ToInt64(bounding_box_y[0].Y) < 0)
                                                {
                                                    if (Convert.ToInt64(x_value) >= Convert.ToInt64(p1[1].X))
                                                    {
                                                        ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                        Guid ID = plate.Identifier.GUID;
                                                        PARTMARK_TO_RETAIN.Add(ID);
                                                    }
                                                    else if (Convert.ToInt64(x_value) <= Convert.ToInt64(p1[0].X))
                                                    {
                                                        ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                        Guid ID = plate.Identifier.GUID;
                                                        PARTMARK_TO_RETAIN.Add(ID);
                                                    }

                                                }
                                            }



                                        }
                                        else
                                        {
                                            bool RESULT_FOR_TOP = AlmostEqual(bounding_box_y[0].Y, top_front / 2);
                                            bool RESULT_FOR_BOT = AlmostEqual(bounding_box_y[1].Y, top_front / 2);
                                            if ((RESULT_FOR_TOP == true) || (RESULT_FOR_BOT == true))
                                            {
                                                if (Convert.ToInt64(bounding_box_y[0].Y) > 0)
                                                {
                                                    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                    Guid ID = plate.Identifier.GUID;
                                                    PARTMARK_TO_RETAIN.Add(ID);
                                                }
                                                else if (Convert.ToInt64(bounding_box_y[0].Y) > 0)
                                                {
                                                    ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                    Guid ID = plate.Identifier.GUID;
                                                    PARTMARK_TO_RETAIN.Add(ID);
                                                }
                                            }

                                            else if ((Convert.ToInt64(bounding_box_y[0].Y) > top_front / 2) && (Convert.ToInt64(bounding_box_y[1].Y) > top_front / 2))
                                            {
                                                ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                Guid ID = plate.Identifier.GUID;
                                                PARTMARK_TO_RETAIN.Add(ID);

                                            }
                                            else if ((Convert.ToInt64(bounding_box_y[0].Y) < -top_front / 2) && (Convert.ToInt64(bounding_box_y[1].Y) < -top_front / 2))
                                            {
                                                ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                                Guid ID = plate.Identifier.GUID;
                                                PARTMARK_TO_RETAIN.Add(ID);

                                            }


                                        }
                                    }

                                    //else 
                                    //{
                                    //    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                    //}

                                }
                            }

                            else
                            {
                                bool RESULT_FOR_TOP = AlmostEqual(bounding_box_y[0].Y, top_front / 2);
                                bool RESULT_FOR_BOT = AlmostEqual(bounding_box_y[1].Y, top_front / 2);
                                if ((RESULT_FOR_TOP == true) || (RESULT_FOR_BOT == true))
                                {
                                    if (Convert.ToInt64(bounding_box_y[0].Y) > 0)
                                    {
                                        ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));
                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);
                                    }
                                    else if (Convert.ToInt64(bounding_box_y[0].Y) < 0)
                                    {
                                        ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));
                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);
                                    }
                                }
                                else if ((Convert.ToInt64(bounding_box_y[0].Y) > top_front / 2) && (Convert.ToInt64(bounding_box_y[1].Y) > top_front / 2))
                                {
                                    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                    Guid ID = plate.Identifier.GUID;
                                    PARTMARK_TO_RETAIN.Add(ID);

                                }
                                else if ((Convert.ToInt64(bounding_box_y[0].Y) < -top_front / 2) && (Convert.ToInt64(bounding_box_y[1].Y) < -top_front / 2))
                                {
                                    ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, bounding_box_y[0].Z));
                                    Guid ID = plate.Identifier.GUID;
                                    PARTMARK_TO_RETAIN.Add(ID);

                                }



                            }

                        }
                        else
                        {

                        }
                    }

                    else if (((prof_type == "L")))
                    {

                        if ((Convert.ToInt64(bounding_box_x[0].X) >= 0) && ((Convert.ToInt64(bounding_box_x[1].X)) < output + 1))
                        {


                            TSM.ModelObjectEnumerator boltenum = plate.GetBolts();
                            List<string> string_for_bolt_check = new List<string>();
                            int a = boltenum.GetSize();
                            if (a >= 1)
                            {
                                while (boltenum.MoveNext())
                                {
                                    TSM.BoltGroup bolt = boltenum.Current as TSM.BoltGroup;

                                    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                                    TSG.CoordinateSystem bolt_coord = bolt.GetCoordinateSystem();
                                    TSG.Vector x_vec_of_bolt = bolt_coord.AxisX;
                                    TSG.Vector y_vec_of_bolt = bolt_coord.AxisY;
                                    TSG.Vector z_vec_of_bolt = x_vec_of_bolt.Cross(y_vec_of_bolt);
                                    model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                                    if (Convert.ToInt64(z_vec_of_bolt.Z) != 0)
                                    {
                                        string_for_bolt_check.Add("YES");
                                    }
                                    else
                                    {
                                        string_for_bolt_check.Add("NO");
                                    }
                                }
                                bool check = string_for_bolt_check.Any(x => x.Contains("YES"));
                                if (check == true)
                                {

                                }
                                else
                                {

                                    //string angle_dim = check_for_angle_dim(plate, current_view);

                                    //if (angle_dim == "NEED")
                                    //{

                                    //    List<angle_face_area> myreq = getface_for_angle(plate);
                                    //    TSG.Point midpt_of_angle = angle_mid_pt(myreq, current_view);
                                    //    ptlist_for_attachments_top.Add(midpt_of_angle);
                                    //    Guid ID = plate.Identifier.GUID;
                                    //    PARTMARK_TO_RETAIN.Add(ID);
                                    //}



                                    bool RESULT_FOR_TOP = AlmostEqual(bounding_box_y[0].Y, top_front / 2);
                                    bool RESULT_FOR_BOT = AlmostEqual(bounding_box_y[1].Y, top_front / 2);
                                    if ((RESULT_FOR_TOP == true) || (RESULT_FOR_BOT == true))
                                    {
                                        if (Convert.ToInt64(bounding_box_y[0].Y) > 0)
                                        {
                                            //ptlist_for_attachments_top.Add(Get_face_point(plate, current_view));
                                            //Guid ID = plate.Identifier.GUID;
                                            //PARTMARK_TO_RETAIN.Add(ID);

                                            List<angle_face_area> myreq = getface_for_angle(plate);
                                            TSG.Point midpt_of_angle = angle_mid_pt(myreq, current_view);
                                            ptlist_for_attachments_top.Add(midpt_of_angle);

                                            //ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));
                                            Guid ID = plate.Identifier.GUID;
                                            PARTMARK_TO_RETAIN.Add(ID);

                                        }
                                        else if (Convert.ToInt64(bounding_box_y[0].Y) < 0)
                                        {
                                            //ptlist_for_attachments_bottom.Add(Get_face_point(plate, current_view));
                                            //Guid ID = plate.Identifier.GUID;
                                            //PARTMARK_TO_RETAIN.Add(ID);
                                            List<angle_face_area> myreq = getface_for_angle(plate);
                                            TSG.Point midpt_of_angle = angle_mid_pt(myreq, current_view);
                                            ptlist_for_attachments_bottom.Add(midpt_of_angle);

                                            //ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));
                                            Guid ID = plate.Identifier.GUID;
                                            PARTMARK_TO_RETAIN.Add(ID);

                                        }

                                    }



                                }

                            }

                            else
                            {

                                bool RESULT_FOR_TOP = AlmostEqual(bounding_box_y[0].Y, top_front / 2);
                                bool RESULT_FOR_BOT = AlmostEqual(bounding_box_y[1].Y, top_front / 2);
                                if ((RESULT_FOR_TOP == true) || (RESULT_FOR_BOT == true))
                                {
                                    if (Convert.ToInt64(bounding_box_y[0].Y) > 0)
                                    {
                                        List<angle_face_area> myreq = getface_for_angle(plate);
                                        TSG.Point midpt_of_angle = angle_mid_pt(myreq, current_view);
                                        ptlist_for_attachments_top.Add(midpt_of_angle);

                                        //ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));
                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);
                                    }
                                    else if (Convert.ToInt64(bounding_box_y[0].Y) < 0)
                                    {
                                        List<angle_face_area> myreq = getface_for_angle(plate);
                                        TSG.Point midpt_of_angle = angle_mid_pt(myreq, current_view);
                                        ptlist_for_attachments_bottom.Add(midpt_of_angle);
                                        //ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, bounding_box_y[0].Z));
                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);
                                    }

                                }
                                //if ((Convert.ToInt64(bounding_box_y[0].Y) >= Convert.ToInt64(top_front / 2)))
                                //{
                                //    ptlist_for_attachments_top.Add(Get_face_point(plate, current_view));
                                //    Guid ID = plate.Identifier.GUID;
                                //    PARTMARK_TO_RETAIN.Add(ID);
                                //}
                                //else if ((Convert.ToInt64(bounding_box_y[1].Y) <= -Convert.ToInt64(top_front / 2)))
                                //{
                                //    ptlist_for_attachments_bottom.Add(Get_face_point(plate, current_view));
                                //    Guid ID = plate.Identifier.GUID;
                                //    PARTMARK_TO_RETAIN.Add(ID);
                                //}
                                //else
                                //{

                                //}
                            }

                        }

                        else if (Convert.ToInt64(bounding_box_x[0].X) < 0)
                        {

                            TSD.PointList mypt_list_for_angle_top = new TSD.PointList();
                            TSD.PointList mypt_list_for_angle_bottom = new TSD.PointList();
                            mypt_list_for_angle_bottom.Add(new TSG.Point(0, 0, 0));
                            mypt_list_for_angle_top.Add(new TSG.Point(0, 0, 0));
                            if (Convert.ToInt64(bounding_box_x[0].Y) > 0)
                            {

                                mypt_list_for_angle_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_x[0].Y, 0));
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }
                            else if (Convert.ToInt64(bounding_box_x[1].Y) < 0)
                            {
                                mypt_list_for_angle_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_x[1].Y, 0));
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }



                            try
                            {
                                TSD.StraightDimensionSet.StraightDimensionSetAttributes rr = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                rr.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                {
                                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                    {
                                        rr.Text.Font.Height = 3.571875;
                                    }
                                    else
                                    {
                                        rr.Text.Font.Height = 3.175;
                                    }
                                }
                                else
                                {
                                    rr.Text.Font.Height = 2.38125;


                                }

                                rr.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, mypt_list_for_angle_top, new TSG.Vector(0, 1, 0), Math.Abs(current_view.RestrictionBox.MaxPoint.Y) + 53, rr);


                            }
                            catch
                            {
                            }

                            try
                            {
                                TSD.StraightDimensionSet.StraightDimensionSetAttributes rr = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                rr.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;

                                rr.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                {
                                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                    {
                                        rr.Text.Font.Height = 3.571875;
                                    }
                                    else
                                    {
                                        rr.Text.Font.Height = 3.175;
                                    }
                                }
                                else
                                {
                                    rr.Text.Font.Height = 2.38125;
                                }

                                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, mypt_list_for_angle_bottom, new TSG.Vector(0, -1, 0), Math.Abs(current_view.RestrictionBox.MaxPoint.Y) + 10, rr);
                            }
                            catch
                            {
                            }

                        }

                        else if (Convert.ToInt64(bounding_box_x[1].X) > output)
                        {
                            TSD.PointList mypt_list_for_angle_top = new TSD.PointList();
                            TSD.PointList mypt_list_for_angle_bottom = new TSD.PointList();
                            mypt_list_for_angle_bottom.Add(new TSG.Point(output, 0, 0));
                            mypt_list_for_angle_top.Add(new TSG.Point(output, 0, 0));
                            if (Convert.ToInt64(bounding_box_x[0].Y) > 0)
                            {
                                mypt_list_for_angle_top.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_x[0].Y, 0));
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }
                            else if (Convert.ToInt64(bounding_box_x[1].Y) < 0)
                            {
                                mypt_list_for_angle_bottom.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_x[1].Y, 0));
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }



                            try
                            {
                                TSD.StraightDimensionSet.StraightDimensionSetAttributes rr = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                rr.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                {
                                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                    {
                                        rr.Text.Font.Height = 3.571875;
                                    }
                                    else
                                    {
                                        rr.Text.Font.Height = 3.175;
                                    }
                                }
                                else
                                {
                                    rr.Text.Font.Height = 2.38125;
                                }

                                rr.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, mypt_list_for_angle_top, new TSG.Vector(0, 1, 0), Math.Abs(current_view.RestrictionBox.MaxPoint.Y) + 53, rr);


                            }
                            catch
                            {
                            }

                            try
                            {
                                TSD.StraightDimensionSet.StraightDimensionSetAttributes rr = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                                rr.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                {
                                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                                    {
                                        rr.Text.Font.Height = 3.571875;
                                    }
                                    else
                                    {
                                        rr.Text.Font.Height = 3.175;
                                    }
                                }
                                else
                                {
                                    rr.Text.Font.Height = 2.38125;


                                }

                                rr.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;

                                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, mypt_list_for_angle_bottom, new TSG.Vector(0, -1, 0), Math.Abs(current_view.RestrictionBox.MaxPoint.Y) + 10, rr);
                            }
                            catch
                            {
                            }
                        }






                    }




                    else if (prof_type == "T")
                    {
                        TSM.ModelObjectEnumerator boltenum = plate.GetBolts();

                        int a = boltenum.GetSize();
                        if (a >= 1)
                        {
                            while (boltenum.MoveNext())
                            {
                                TSM.BoltGroup bolt = boltenum.Current as TSM.BoltGroup;

                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                                TSG.CoordinateSystem bolt_coord = bolt.GetCoordinateSystem();
                                TSG.Vector x_vec_of_bolt = bolt_coord.AxisX;
                                TSG.Vector y_vec_of_bolt = bolt_coord.AxisY;
                                TSG.Vector z_vec_of_bolt = x_vec_of_bolt.Cross(y_vec_of_bolt);
                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());




                                if (Convert.ToInt64(z_vec_of_bolt.Z) != 0)
                                {
                                }
                            }
                        }

                        else
                        {

                            model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                            TSG.Vector x_vec_of_hss = plate.GetCoordinateSystem().AxisX;
                            TSG.Vector y_vec_of_hss = plate.GetCoordinateSystem().AxisY;
                            TSG.Vector z_vec_of_hss = x_vec_of_hss.Cross(y_vec_of_hss);
                            model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());






                            if (Convert.ToInt64(x_vec_of_hss.X) == 0)
                            {






                                bool RESULT_FOR_TOP = AlmostEqual(bounding_box_y[0].Y, top_front / 2);
                                bool RESULT_FOR_BOT = AlmostEqual(bounding_box_y[1].Y, top_front / 2);
                                if ((RESULT_FOR_TOP == true) || (RESULT_FOR_BOT == true))
                                {
                                    if (bounding_box_y[0].Y > 0)
                                    {

                                        List<angle_face_area> myreq = getface_for_tprofile(plate);
                                        TSG.Point midpt_of_angle = tpro_mid_pt(myreq, current_view);


                                        double X = ((bounding_box_y[0].X + bounding_box_y[1].X) / 2);
                                        TSG.Point P1 = new TSG.Point(X, bounding_box_y[1].Y, 0);



                                        //ptlist_for_attachments_top.Add(Get_face_point_FOR_T(plate, current_view));
                                        ptlist_for_attachments_top.Add(midpt_of_angle);
                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);
                                    }
                                    else if (bounding_box_y[0].Y < 0)
                                    {
                                        List<angle_face_area> myreq = getface_for_tprofile(plate);
                                        TSG.Point midpt_of_angle = tpro_mid_pt(myreq, current_view);


                                        double X = ((bounding_box_y[0].X + bounding_box_y[1].X) / 2);
                                        TSG.Point P1 = new TSG.Point(X, bounding_box_y[0].Y, 0);


                                        ptlist_for_attachments_bottom.Add(midpt_of_angle);
                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);

                                    }
                                }

                            }
                            else
                            {
                                if ((Convert.ToInt64(bounding_box_y[0].Y) >= Convert.ToInt64(top_front / 2)))
                                {

                                    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_x[0].Y, 0));
                                    Guid ID = plate.Identifier.GUID;
                                    PARTMARK_TO_RETAIN.Add(ID);
                                }
                                else if ((Convert.ToInt64(bounding_box_y[1].Y) <= -Convert.ToInt64(top_front / 2)))
                                {

                                    ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_x[0].Y, 0));
                                    Guid ID = plate.Identifier.GUID;
                                    PARTMARK_TO_RETAIN.Add(ID);
                                }

                            }


                        }

                    }
                    else if (prof_type == "U")
                    {

                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                        TSG.Vector x_vec_of_hss = plate.GetCoordinateSystem().AxisX;
                        TSG.Vector y_vec_of_hss = plate.GetCoordinateSystem().AxisY;
                        TSG.Vector z_vec_of_hss = x_vec_of_hss.Cross(y_vec_of_hss);
                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());






                        if (Convert.ToInt64(x_vec_of_hss.X) == 0)
                        {






                            bool RESULT_FOR_TOP = AlmostEqual(bounding_box_y[0].Y, top_front / 2);
                            bool RESULT_FOR_BOT = AlmostEqual(bounding_box_y[1].Y, top_front / 2);
                            if ((RESULT_FOR_TOP == true) || (RESULT_FOR_BOT == true))
                            {
                                if (bounding_box_y[0].Y > 0)
                                {

                                    List<angle_face_area> myreq = getface_for_CHANNEL(plate);
                                    TSG.Point midpt_of_angle = tpro_mid_pt(myreq, current_view);


                                    double X = ((bounding_box_y[0].X + bounding_box_y[1].X) / 2);
                                    TSG.Point P1 = new TSG.Point(X, bounding_box_y[1].Y, 0);



                                    //ptlist_for_attachments_top.Add(Get_face_point_FOR_T(plate, current_view));
                                    ptlist_for_attachments_top.Add(midpt_of_angle);
                                    Guid ID = plate.Identifier.GUID;
                                    PARTMARK_TO_RETAIN.Add(ID);
                                }
                                else if (bounding_box_y[0].Y < 0)
                                {
                                    List<angle_face_area> myreq = getface_for_CHANNEL(plate);
                                    TSG.Point midpt_of_angle = tpro_mid_pt(myreq, current_view);


                                    double X = ((bounding_box_y[0].X + bounding_box_y[1].X) / 2);
                                    TSG.Point P1 = new TSG.Point(X, bounding_box_y[0].Y, 0);


                                    ptlist_for_attachments_bottom.Add(midpt_of_angle);
                                    Guid ID = plate.Identifier.GUID;
                                    PARTMARK_TO_RETAIN.Add(ID);

                                }
                            }

                        }
                        else
                        {
                            if ((Convert.ToInt64(bounding_box_y[0].Y) >= Convert.ToInt64(top_front / 2)))
                            {

                                ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_x[0].Y, 0));
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }
                            else if ((Convert.ToInt64(bounding_box_y[1].Y) <= -Convert.ToInt64(top_front / 2)))
                            {

                                ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_x[0].Y, 0));
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }

                        }


                    }
                    else if ((profile.Contains("HSS")) || (profile.Contains("NUT")) || (profile.Contains("PIPE")))
                    {

                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                        TSG.Vector x_vec_of_hss = plate.GetCoordinateSystem().AxisX;
                        TSG.Vector y_vec_of_hss = plate.GetCoordinateSystem().AxisY;
                        TSG.Vector z_vec_of_hss = x_vec_of_hss.Cross(y_vec_of_hss);
                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                        bool RESULT_FOR_TOP = AlmostEqual(bounding_box_y[0].Y, top_front / 2);
                        bool RESULT_FOR_BOT = AlmostEqual(bounding_box_y[1].Y, top_front / 2);
                        if ((RESULT_FOR_TOP == true) || (RESULT_FOR_BOT == true))
                        {
                            if ((x_vec_of_hss.X != 0) && profile.Contains("HSS"))
                            {
                                if (Convert.ToInt64(bounding_box_y[0].Y) > 0)
                                {
                                    ptlist_for_attachments_top.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_x[0].Y, 0));
                                    Guid ID = plate.Identifier.GUID;
                                    PARTMARK_TO_RETAIN.Add(ID);

                                }
                                else if (Convert.ToInt64(bounding_box_y[0].Y) < 0)
                                {
                                    ptlist_for_attachments_bottom.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_x[0].Y, 0));
                                    Guid ID = plate.Identifier.GUID;
                                    PARTMARK_TO_RETAIN.Add(ID);

                                }
                            }
                            else
                            {
                                List<angle_face_area> myreq = getface_for_tprofile(plate);
                                TSG.Point midpt_of_angle = tpro_mid_pt(myreq, current_view);



                                if (Convert.ToInt64(bounding_box_y[0].Y) > 0)
                                {
                                    TSG.Point MIDPT = new TSG.Point(bounding_box_x[0].X / 2 + bounding_box_x[1].X / 2, bounding_box_x[1].Y, 0);

                                    ptlist_for_attachments_top.Add(midpt_of_angle);
                                    Guid ID = plate.Identifier.GUID;
                                    PARTMARK_TO_RETAIN.Add(ID);

                                }
                                else if (Convert.ToInt64(bounding_box_y[0].Y) < 0)
                                {
                                    TSG.Point MIDPT = new TSG.Point(bounding_box_x[0].X / 2 + bounding_box_x[1].X / 2, bounding_box_x[0].Y, 0);
                                    ptlist_for_attachments_bottom.Add(MIDPT);
                                    Guid ID = plate.Identifier.GUID;
                                    PARTMARK_TO_RETAIN.Add(ID);

                                }
                            }



                        }


                    }
                    else if ((plate.GetType().Equals(typeof(TSM.Beam))) && (profile.Contains("STUD")) && plate.Name.Contains("FALLTECH") == false)
                    {

                        bool RESULT_FOR_TOP = AlmostEqual(bounding_box_y[0].Y, top_front / 2);
                        bool RESULT_FOR_BOT = AlmostEqual(bounding_box_y[1].Y, top_front / 2);
                        if ((RESULT_FOR_TOP == true) || (RESULT_FOR_BOT == true))
                        {
                            if (Convert.ToInt64(bounding_box_y[0].Y) > 0)
                            {
                                TSG.Point MIDPT = new TSG.Point(bounding_box_x[0].X / 2 + bounding_box_x[1].X / 2, bounding_box_x[1].Y, 0);

                                ptlist_for_attachments_top.Add(MIDPT);
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }
                            else if (Convert.ToInt64(bounding_box_y[0].Y) < 0)
                            {
                                TSG.Point MIDPT = new TSG.Point(bounding_box_x[0].X / 2 + bounding_box_x[1].X / 2, bounding_box_x[0].Y, 0);

                                ptlist_for_attachments_bottom.Add(MIDPT);
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }
                        }




                    }
                    else if (prof_type == "Z")
                    {

                        bool RESULT_FOR_TOP = AlmostEqual(bounding_box_y[0].Y, top_front / 2);
                        bool RESULT_FOR_BOT = AlmostEqual(bounding_box_y[1].Y, top_front / 2);
                        if ((RESULT_FOR_TOP == true) || (RESULT_FOR_BOT == true))
                        {
                            if (Convert.ToInt64(bounding_box_y[0].Y) > 0)
                            {
                                TSG.Point MIDPT = new TSG.Point(bounding_box_x[0].X / 2 + bounding_box_x[1].X / 2, bounding_box_x[1].Y, 0);

                                ptlist_for_attachments_top.Add(MIDPT);
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }
                            else if (Convert.ToInt64(bounding_box_y[0].Y) < 0)
                            {
                                TSG.Point MIDPT = new TSG.Point(bounding_box_x[0].X / 2 + bounding_box_x[1].X / 2, bounding_box_x[0].Y, 0);

                                ptlist_for_attachments_bottom.Add(MIDPT);
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }
                        }

                    }
                    else
                    {
                        TSM.ModelObjectEnumerator boltenum = plate.GetBolts();

                        int a = boltenum.GetSize();
                        if (a >= 1)
                        {
                            while (boltenum.MoveNext())
                            {
                                TSM.BoltGroup bolt = boltenum.Current as TSM.BoltGroup;

                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                                TSG.CoordinateSystem bolt_coord = bolt.GetCoordinateSystem();
                                TSG.Vector x_vec_of_bolt = bolt_coord.AxisX;
                                TSG.Vector y_vec_of_bolt = bolt_coord.AxisY;
                                TSG.Vector z_vec_of_bolt = x_vec_of_bolt.Cross(y_vec_of_bolt);
                                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());




                                if (Convert.ToInt64(z_vec_of_bolt.Z) != 0)
                                {
                                    if ((Convert.ToInt16(bounding_box_x[0].X) > Convert.ToInt16(output)))
                                    {
                                        top_platefilter.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[1].Y, 0));

                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);

                                    }
                                    else if (Convert.ToInt16(bounding_box_x[1].X) < 0)
                                    {
                                        bottom_platefilter.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[0].Y, 0));
                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);
                                    }

                                }
                                else
                                {
                                    if ((Convert.ToInt64(bounding_box_y[0].Y) >= Convert.ToInt64(top_front / 2)))
                                    {
                                        if (prof_type == "B")
                                        {
                                            ptlist_for_attachments_top.Add(bounding_box_y[0]);
                                            Guid ID = plate.Identifier.GUID;
                                            PARTMARK_TO_RETAIN.Add(ID);

                                        }
                                        else
                                        {
                                            ptlist_for_attachments_top.Add(bounding_box_y[1]);
                                            Guid ID = plate.Identifier.GUID;
                                            PARTMARK_TO_RETAIN.Add(ID);
                                        }
                                    }
                                    else if ((Convert.ToInt64(bounding_box_y[1].Y) <= -Convert.ToInt64(top_front / 2)))
                                    {
                                        if (prof_type == "B")
                                        {

                                            ptlist_for_attachments_bottom.Add(bounding_box_y[0]);
                                            Guid ID = plate.Identifier.GUID;
                                            PARTMARK_TO_RETAIN.Add(ID);

                                        }
                                        else
                                        {

                                            ptlist_for_attachments_bottom.Add(bounding_box_y[1]);
                                            Guid ID = plate.Identifier.GUID;
                                            PARTMARK_TO_RETAIN.Add(ID);
                                        }

                                    }
                                    else if ((Convert.ToInt64(bounding_box_x[1].X) > Convert.ToInt64(output)))
                                    {
                                        top_platefilter.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, 0));
                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);

                                    }
                                    else if (Convert.ToInt64(bounding_box_x[0].X) < 0)
                                    {
                                        bottom_platefilter.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, 0));
                                        Guid ID = plate.Identifier.GUID;
                                        PARTMARK_TO_RETAIN.Add(ID);
                                    }
                                    break;

                                }


                            }
                        }


                        else if ((Convert.ToInt64(bounding_box_x[1].X) > Convert.ToInt64(output)))
                        {
                            top_platefilter.Add(new TSG.Point(bounding_box_x[1].X, bounding_box_y[1].Y, 0));
                            Guid ID = plate.Identifier.GUID;
                            PARTMARK_TO_RETAIN.Add(ID);


                        }
                        else if (Convert.ToInt64(bounding_box_x[0].X) < 0)
                        {
                            bottom_platefilter.Add(new TSG.Point(bounding_box_x[0].X, bounding_box_y[0].Y, 0));
                            Guid ID = plate.Identifier.GUID;
                            PARTMARK_TO_RETAIN.Add(ID);
                        }




                    }
                }
                
            }
            double distance = Convert.ToDouble(catalog_values[0]);
            TSD.StraightDimensionSet.StraightDimensionSetAttributes rd = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            rd.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
            rd.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            rd.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
            rd.Arrowhead.Head = ArrowheadTypes.FilledArrow;
            rd.Text.Font.Color = DrawingColors.Gray70;
            rd.Color = DrawingColors.Gray70;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    rd.Text.Font.Height = 3.571875;
                }
                else
                {
                    rd.Text.Font.Height = 3.175;
                }
            }
            else
            {
                rd.Text.Font.Height = 2.38125;


            }

            TSD.PointList final_ptlist_for_attachments_top = new TSD.PointList();


            double HT2 = Convert.ToDouble(catalog_values[0]);
            double HT = Convert.ToInt64(HT2 / 2);


            TSD.PointList pt_list_z_positive = new TSD.PointList();


            //if (profile_type == "U")
            //{
            //    double WT2 = Convert.ToDouble(catalog_values[1]);
            //    double WT = Convert.ToInt64(WT2 / 2);
            //    foreach (TSG.Point pt in ptlist_for_attachments_top)
            //    {
            //        if (pt != null)
            //        {
            //            if ((Convert.ToInt16(pt.X) > 0) && (Convert.ToInt16(pt.X) < output))
            //            {

            //                if (Convert.ToInt16(pt.Z) > -WT)
            //                {
            //                    pt_list_z_positive.Add(pt);
            //                }
            //            }
            //        }
            //    }

            //}
            //else
            //{
            //    foreach (TSG.Point pt in ptlist_for_attachments_top)
            //    {
            //        if (pt != null)
            //        {
            //            if ((Convert.ToInt16(pt.X) > 0) && (Convert.ToInt16(pt.X) < output))
            //            {

            //                if (Convert.ToInt16(pt.Z) > 0)
            //                {
            //                    pt_list_z_positive.Add(pt);
            //                }
            //            }
            //        }
            //    }
            //}




            foreach (TSG.Point pt in ptlist_for_attachments_top)
            {
                if (pt != null)
                {
                    final_ptlist_for_attachments_top.Add(pt);

                }
            }

            TSD.PointList final_ptlist_for_attachments_bottom = new TSD.PointList();
            foreach (TSG.Point pt in ptlist_for_attachments_bottom)
            {
                if (pt != null)
                {
                    final_ptlist_for_attachments_bottom.Add(pt);

                }
            }

            try
            {
                double MAXY = Math.Abs(current_view.RestrictionBox.MaxPoint.Y);

                double PART_DISTANCE_FOR_OUTSIDE_FLANGE = Math.Abs(MAXY - final_ptlist_for_attachments_top[0].Y);

                TSD.StraightDimensionSet.StraightDimensionSetAttributes rr = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                rr.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                rr.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute;
                rr.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                rr.Arrowhead.Head = ArrowheadTypes.FilledArrow;
                rr.Text.Font.Color = DrawingColors.Gray70;
                rr.Color = DrawingColors.Gray70;
                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                {
                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                    {
                        rr.Text.Font.Height = 3.571875;
                    }
                    else
                    {
                        rr.Text.Font.Height = 3.175;
                    }
                }
                else
                {
                    rr.Text.Font.Height = 2.38125;


                }
                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, final_ptlist_for_attachments_top, new TSG.Vector(0, 1, 0), PART_DISTANCE_FOR_OUTSIDE_FLANGE + 170, rr);


            }
            catch
            {
            }

            try
            {
                double MINY = Math.Abs(current_view.RestrictionBox.MinPoint.Y);

                double PART_DISTANCE_FOR_OUTSIDE_FLANGE = Math.Abs(MINY - final_ptlist_for_attachments_top[0].Y);
                TSD.StraightDimensionSet.StraightDimensionSetAttributes rr = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                rr.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                rr.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute;
                rr.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                rr.Arrowhead.Head = ArrowheadTypes.FilledArrow;
                rr.Text.Font.Color = DrawingColors.Gray70;
                rr.Color = DrawingColors.Gray70;
                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                {
                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                    {
                        rr.Text.Font.Height = 3.571875;
                    }
                    else
                    {
                        rr.Text.Font.Height = 3.175;
                    }
                }
                else
                {
                    rr.Text.Font.Height = 2.38125;


                }

                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, final_ptlist_for_attachments_bottom, new TSG.Vector(0, -1, 0), PART_DISTANCE_FOR_OUTSIDE_FLANGE + 55, rr);
            }
            catch
            {
            }


            try
            {
                //top_platefilter.Add(new TSG.Point(output, top_platefilter[0].Y, 0));
                //TSD.StraightDimensionSet.StraightDimensionSetAttributes ouside = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                //ouside.ShortDimension = TSD.DimensionSetBaseAttributes.ShortDimensionTypes.Outside;
                //dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, top_platefilter, new TSG.Vector( 0, 1,0), distance + 200, ouside);
            }
            catch
            {
            }
            try
            {
                //bottom_platefilter.Add(new TSG.Point(0, bottom_platefilter[0].Y, 0));
                //TSD.StraightDimensionSet.StraightDimensionSetAttributes ouside = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                //ouside.ShortDimension = TSD.DimensionSetBaseAttributes.ShortDimensionTypes.Outside;
                //dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, bottom_platefilter, new TSG.Vector( 0,1, 0), distance + 200, ouside);
                //Create_elevation_Dimension(new TSG.Point(0, bottom_platefilter[0].Y, 0), current_view, 500);
            }
            catch
            {
            }



            # region bolt
            TSD.DrawingObjectEnumerator enum_for_boltATT = current_view.GetAllObjects(typeof(TSD.Bolt));
            TSD.PointList rd_point_list_ATT = new TSD.PointList();
            TSG.Matrix top_mat_ATT = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            ///////////////////////////////////////////////////getting bolt matrix points for bolt dimension///////////////////////////////////////////////////////////////////////////
            while (enum_for_boltATT.MoveNext())
            {
                TSD.Bolt drgbolt = enum_for_boltATT.Current as TSD.Bolt;
                TSM.ModelObject modelbolt = new TSM.Model().SelectModelObject(drgbolt.ModelIdentifier);
                TSM.BoltGroup bolt1 = modelbolt as TSM.BoltGroup;
                int NO_OF_BOLT = bolt1.BoltPositions.Count;
                if (NO_OF_BOLT > 0)
                {


                    if (top_mat_ATT.Transform((bolt1.BoltPositions[0]) as TSG.Point).Y > Convert.ToInt64(top_front / 2))
                    {
                        TSD.Bolt drgbolt1 = drgbolt;
                        TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix(drgbolt1, current_view);
                        if (POINT_FOR_BOLT_MATRIX != null)
                        {
                            int y = POINT_FOR_BOLT_MATRIX.GetLength(0);
                            int x = POINT_FOR_BOLT_MATRIX.GetLength(1);
                            for (int i = 0; i < x; i++)
                            {
                                ///////////////////////////////////////////// condition for getting last row of bolts//////////////////////////////////////////////////////////////////////////////////////////////
                                rd_point_list_ATT.Add(POINT_FOR_BOLT_MATRIX[y - 1, i]);
                            }
                        }
                    }
                }
            }
            rd_point_list_ATT.Add(new TSG.Point(0, 0, 0));

            sorting_points_by_x_asc(rd_point_list_ATT);


            // TSD.PointList FINAL_RD_LIST = pointlist_remove_duplicate_Xvalues(rd_point_list);
            /////////////////////////////////////////////////// inserting bolt rd dimension ////////////////////////////////////////////////////////////////////////////////////////
            TSD.StraightDimensionSetHandler bolt_rd_dim_ATTACHMENTS = new TSD.StraightDimensionSetHandler();

            try
            {
                ////////////////////////////////////////////////////dimension distance placing linking ////////////////////////////////////////////////////////////////////////////////////////////////                
                //double distance = Convert.ToDouble(top_front) / 2;
                // TSG.Point p1 = (FINAL_RD_LIST[FINAL_RD_LIST.Count - 1] as TSG.Point);
                // TSG.Point p2 = new TSG.Point((FINAL_RD_LIST[FINAL_RD_LIST.Count - 1] as TSG.Point).X, distance, 0);
                //double distance_value = TSG.Distance.PointToPoint(p1, p2);
                ///////////////////////////////////////////////////rd dimension creation///////////////////////////////////////////////////////////////////////////////////////////////////////////////
                TSD.StraightDimensionSet.StraightDimensionSetAttributes rd_att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                rd_att.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
                rd_att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                rd_att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                rd_att.Arrowhead.Head = ArrowheadTypes.FilledArrow;
                rd_att.Text.Font.Color = DrawingColors.Gray70;
                rd_att.Color = DrawingColors.Gray70;
                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                {
                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                    {
                        rd_att.Text.Font.Height = 3.571875;
                    }
                    else
                    {
                        rd_att.Text.Font.Height = 3.175;
                    }
                }
                else
                {
                    rd_att.Text.Font.Height = 2.38125;


                }
                //FINAL_RD_LIST.Add(new TSG.Point(0, 0, 0));
                //sorting_points_by_x_asc(FINAL_RD_LIST);
                bolt_rd_dim_ATTACHMENTS.CreateDimensionSet(current_view, rd_point_list_ATT, new TSG.Vector(0, 1, 0), Math.Abs(current_view.RestrictionBox.MaxPoint.Y) + 150, rd_att);

            }
            catch
            {
            }
            # endregion

            # region bolt
            TSD.DrawingObjectEnumerator enum_for_boltATT2 = current_view.GetAllObjects(typeof(TSD.Bolt));
            TSD.PointList rd_point_list_ATT2 = new TSD.PointList();
            TSG.Matrix top_mat_ATT2 = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            ///////////////////////////////////////////////////getting bolt matrix points for bolt dimension///////////////////////////////////////////////////////////////////////////
            while (enum_for_boltATT2.MoveNext())
            {
                TSD.Bolt drgbolt = enum_for_boltATT2.Current as TSD.Bolt;
                TSM.ModelObject modelbolt = new TSM.Model().SelectModelObject(drgbolt.ModelIdentifier);
                TSM.BoltGroup bolt1 = modelbolt as TSM.BoltGroup;

                int NO_OF_BOLT1 = bolt1.BoltPositions.Count;

                if (NO_OF_BOLT1 > 0)
                {
                    if (top_mat_ATT2.Transform((bolt1.BoltPositions[0]) as TSG.Point).Y < -Convert.ToInt64(top_front / 2))
                    {
                        TSD.Bolt drgbolt1 = drgbolt;
                        TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix(drgbolt1, current_view);
                        if (POINT_FOR_BOLT_MATRIX != null)
                        {
                            int y = POINT_FOR_BOLT_MATRIX.GetLength(0);
                            int x = POINT_FOR_BOLT_MATRIX.GetLength(1);
                            for (int i = 0; i < x; i++)
                            {
                                ///////////////////////////////////////////// condition for getting last row of bolts//////////////////////////////////////////////////////////////////////////////////////////////
                                rd_point_list_ATT2.Add(POINT_FOR_BOLT_MATRIX[y - 1, i]);
                            }
                        }
                    }
                }
            }
            rd_point_list_ATT2.Add(new TSG.Point(0, 0, 0));

            sorting_points_by_x_asc(rd_point_list_ATT2);


            // TSD.PointList FINAL_RD_LIST = pointlist_remove_duplicate_Xvalues(rd_point_list);
            /////////////////////////////////////////////////// inserting bolt rd dimension ////////////////////////////////////////////////////////////////////////////////////////
            TSD.StraightDimensionSetHandler bolt_rd_dim_ATTACHMENTS2 = new TSD.StraightDimensionSetHandler();

            try
            {
                ////////////////////////////////////////////////////dimension distance placing linking ////////////////////////////////////////////////////////////////////////////////////////////////                
                //double distance = Convert.ToDouble(top_front) / 2;
                // TSG.Point p1 = (FINAL_RD_LIST[FINAL_RD_LIST.Count - 1] as TSG.Point);
                // TSG.Point p2 = new TSG.Point((FINAL_RD_LIST[FINAL_RD_LIST.Count - 1] as TSG.Point).X, distance, 0);
                //double distance_value = TSG.Distance.PointToPoint(p1, p2);
                ///////////////////////////////////////////////////rd dimension creation///////////////////////////////////////////////////////////////////////////////////////////////////////////////
                TSD.StraightDimensionSet.StraightDimensionSetAttributes rd_att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                rd_att.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
                rd_att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                rd_att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                rd_att.Arrowhead.Head = ArrowheadTypes.FilledArrow;
                rd_att.Text.Font.Color = DrawingColors.Gray70;
                rd_att.Color = DrawingColors.Gray70;
                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                {
                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                    {
                        rd_att.Text.Font.Height = 3.571875;
                    }
                    else
                    {
                        rd_att.Text.Font.Height = 3.175;
                    }
                }
                else
                {
                    rd_att.Text.Font.Height = 2.38125;


                }
                //FINAL_RD_LIST.Add(new TSG.Point(0, 0, 0));
                //sorting_points_by_x_asc(FINAL_RD_LIST);
                bolt_rd_dim_ATTACHMENTS2.CreateDimensionSet(current_view, rd_point_list_ATT2, new TSG.Vector(0, -1, 0), Math.Abs(current_view.RestrictionBox.MinPoint.Y) + 150, rd_att);

            }
            catch
            {
            }
            # endregion

        }


        public void Dimensions_for_attachments_for_outside_flange_top_bottom(TSM.Beam main_part, TSD.View current_view, double output)
        {
            ArrayList catalog_values = Getcatalog_values(main_part);
            double top_front;
            if (current_view.ViewType.Equals(TSD.View.ViewTypes.FrontView))

            ///////////////////Values based on which gusset plates are filtered, Outside flange or Web based on view type///////////////////
            {
                top_front = Convert.ToDouble(catalog_values[0]);
            }
            else
            {
                top_front = Convert.ToDouble(catalog_values[1]);
            }

            TSM.Model model = new TSM.Model();
            TSD.DrawingHandler drg_handler = new TSD.DrawingHandler();
            TSD.StraightDimensionSetHandler dim_set_handler = new TSD.StraightDimensionSetHandler();
            TSD.PointList ptlist_for_attachments_top = new TSD.PointList();
            ptlist_for_attachments_top.Add(new TSG.Point(0, 0, 0));
            TSD.PointList ptlist_for_attachments_bottom = new TSD.PointList();
            TSD.PointList bottom_platefilter = new TSD.PointList();
            TSD.PointList top_platefilter = new TSD.PointList();
            ptlist_for_attachments_bottom.Add(new TSG.Point(0, 0, 0));
            TSD.DrawingObjectEnumerator enum_for_parts_drg = current_view.GetAllObjects(typeof(TSD.Part));

            while (enum_for_parts_drg.MoveNext())
            {
                TSD.Part mypart = enum_for_parts_drg.Current as TSD.Part;

                TSM.Part plate = new TSM.Model().SelectModelObject(mypart.ModelIdentifier) as TSM.Part;


                string prof_type = "";

                plate.GetReportProperty("PROFILE_TYPE", ref prof_type);
                //////////////////////////////////Filtering all the plates////////////////////////////////

                TSD.PointList bounding_box_y = bounding_box_sort_y(plate, current_view);
                TSD.PointList bounding_box_x = bounding_box_sort_x(plate, current_view);
                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                TSG.Vector x_vec_of_plate = plate.GetCoordinateSystem().AxisX;
                TSG.Vector y_vec_of_plate = plate.GetCoordinateSystem().AxisY;
                TSG.Vector z_vec_of_plate = x_vec_of_plate.Cross(y_vec_of_plate);
                model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                string profile = plate.Profile.ProfileString;
                //if(prof_type.Contains("L"))
                //{

                //}-


                if (((prof_type == "L") && (Convert.ToInt32(x_vec_of_plate.X) == 0)))
                {


                    if ((Convert.ToInt64(bounding_box_x[0].X) >= Convert.ToInt64(top_front) / 2))
                    {
                        ptlist_for_attachments_top.Add(Get_face_point(plate, current_view));
                    }
                    else if ((Convert.ToInt64(bounding_box_x[1].X) <= -Convert.ToInt64(top_front) / 2))
                    {
                        ptlist_for_attachments_bottom.Add(Get_face_point(plate, current_view));
                    }

                }

                else if ((plate.GetType().Equals(typeof(TSM.PolyBeam))) && (y_vec_of_plate.Z != 0))
                {
                    if ((Convert.ToInt64(bounding_box_x[0].X) >= Convert.ToInt64(top_front) / 2))
                    {
                        ptlist_for_attachments_top.Add(Get_face_point(plate, current_view));
                    }
                    else if ((Convert.ToInt64(bounding_box_x[1].X) <= -Convert.ToInt64(top_front) / 2))
                    {
                        ptlist_for_attachments_bottom.Add(Get_face_point(plate, current_view));
                    }

                }
                else if ((profile.Contains("HSS")) || (profile.Contains("NUT")) || (profile.Contains("PIPE")))
                {

                    TSG.Point MIDPT = new TSG.Point(bounding_box_x[0].X / 2 + bounding_box_x[1].X / 2, bounding_box_x[0].Y / 2 + bounding_box_x[1].Y / 2, 0);
                    if ((Convert.ToInt64(bounding_box_x[0].X) >= Convert.ToInt64(top_front) / 2))
                    {
                        ptlist_for_attachments_top.Add(MIDPT);
                    }
                    else if ((Convert.ToInt64(bounding_box_x[1].X) <= -Convert.ToInt64(top_front) / 2))
                    {
                        ptlist_for_attachments_bottom.Add(MIDPT);
                    }

                }
                //else if (plate.GetType().Equals(typeof(TSM.ContourPlate)))
                //{


                //}
                else if ((plate.GetType().Equals(typeof(TSM.Beam))) && (profile.Contains("STUD")))
                {


                }
                else
                {
                    TSM.ModelObjectEnumerator boltenum = plate.GetBolts();

                    int a = boltenum.GetSize();
                    ArrayList zvectorlist = new ArrayList();
                    while (boltenum.MoveNext())
                    {
                        TSM.BoltGroup bolt = boltenum.Current as TSM.BoltGroup;

                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                        TSG.CoordinateSystem bolt_coord = bolt.GetCoordinateSystem();
                        TSG.Vector x_vec_of_bolt = bolt_coord.AxisX;
                        TSG.Vector y_vec_of_bolt = bolt_coord.AxisY;
                        TSG.Vector z_vec_of_bolt = x_vec_of_bolt.Cross(y_vec_of_bolt);
                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                        zvectorlist.Add(z_vec_of_bolt);

                    }

                    int az = 0;
                    int bz = 0;
                    foreach (TSG.Vector zvector in zvectorlist)
                    {
                        if (zvector.Z == 0)
                        {
                            az++;

                        }
                        else if (zvector.Z != 0)
                        {
                            bz++;
                        }
                    }
                    if (bz == 0)
                    {




                        if ((Convert.ToInt64(bounding_box_x[0].X) >= Convert.ToInt64(top_front / 2)))
                        {
                            if (prof_type == "B")
                            {
                                ptlist_for_attachments_top.Add(bounding_box_x[0]);
                            }
                            else
                            {
                                ptlist_for_attachments_top.Add(bounding_box_x[1]);
                            }
                        }
                        else if ((Convert.ToInt64(bounding_box_x[1].X) <= -Convert.ToInt64(top_front / 2)))
                        {
                            if (prof_type == "B")
                            {

                                ptlist_for_attachments_bottom.Add(bounding_box_x[0]);
                            }
                            else
                            {

                                ptlist_for_attachments_bottom.Add(bounding_box_x[1]);
                            }

                        }

                        else if ((Convert.ToInt64(bounding_box_y[1].Y) > Convert.ToInt64(output)))
                        {



                        }
                        else if (Convert.ToInt64(bounding_box_y[0].Y) < 0)
                        {

                        }




                    }


                }
            }
            TSD.StraightDimensionSet.StraightDimensionSetAttributes rd = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            rd.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
            rd.Arrowhead.Head = ArrowheadTypes.FilledArrow;
            rd.Color = DrawingColors.Gray70;
            rd.Text.Font.Color = DrawingColors.Gray70;
            rd.Color = DrawingColors.Gray70;
            
            

            double distance = Convert.ToDouble(catalog_values[0]);

            try
            {

                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_attachments_top, new TSG.Vector(1, 0, 0), distance + 200, rd);


            }
            catch
            {
            }

            try
            {


                dim_set_handler.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_attachments_bottom, new TSG.Vector(-1, 0, 0), distance + 200, rd);
            }
            catch
            {
            }






        }
        public void dimension_for_parts_outside_assembly(TSM.Beam main_part, TSD.View current_view, double output,ref List<Guid> PARTMARK_TO_RETAIN,string drg_att)
        {



            TSM.Model mymodel = new TSM.Model();
        


            ArrayList catalog_values = Getcatalog_values(main_part);
            TSD.PointList p1 = new TSD.PointList();
            TSD.PointList p2 = new TSD.PointList();
            double distance = Convert.ToDouble(catalog_values[0]) / 2;
            TSD.StraightDimensionSet.StraightDimensionSetAttributes myfi = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            myfi.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            myfi.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
            myfi.Placing.Distance.MinimalDistance = distance;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    myfi.Text.Font.Height = 3.571875;
                }
                else
                {
                    myfi.Text.Font.Height = 3.175;
                }
            }
            else
            {
                myfi.Text.Font.Height = 2.38125;


            }
        

            TSD.DrawingObjectEnumerator myenum_for_parts = current_view.GetAllObjects(typeof(TSD.Part));
            while (myenum_for_parts.MoveNext())
            {
                TSD.Part mydrg = myenum_for_parts.Current as TSD.Part;
                TSM.ModelObject mypart = new TSM.Model().SelectModelObject(mydrg.ModelIdentifier);
                TSM.Part plate = mypart as TSM.Part;
               
                if(!plate.Identifier.GUID.Equals(main_part.Identifier.GUID))
                {
                TSD.PointList mypointlist = bounding_box_sort_x(mypart, current_view);

                if ((mypointlist[0].X < 0))
                {
                    //distance = Convert.ToDouble(catalog_values[0]) / 2;
                  


                    Guid ID = plate.Identifier.GUID;
                    PARTMARK_TO_RETAIN.Add(ID);
                    p1.Add(new TSG.Point(0, 0, 0));

                    p1.Add(new TSG.Point(mypointlist[0].X, mypointlist[1].Y, 0));


                }
                else if (mypointlist[1].X > output)
                {
                    
                    //distance1 = Convert.ToDouble(catalog_values[0]) / 2;
                    Guid ID = plate.Identifier.GUID;
                    PARTMARK_TO_RETAIN.Add(ID);
                    p2.Add(new TSG.Point(output, 0, 0));
                    p2.Add(new TSG.Point(mypointlist[1].X, mypointlist[1].Y, 0));


                }
                }
            }
            TSD.PointList final_p1 = new TSD.PointList();

            TSD.PointList final_p2 = new TSD.PointList();
            try
            {
                final_p1 = pointlist_remove_duplicate_Xvalues(p1);
          
            }
            catch
            {
            }
            try
            {
                final_p2 = pointlist_remove_duplicate_Xvalues(p2);
                if (final_p2[0].Y > 0)
                {
                    sorting_points_by_y_asc(final_p2);
                }
                else
                {
                    sorting_points_by_y_des(final_p2);

                }
            }
            catch
            {
            }

            double maxy = Math.Abs(current_view.RestrictionBox.MaxPoint.Y);

            try
            {
                TSD.StraightDimensionSetHandler dim11 = new TSD.StraightDimensionSetHandler();

                //dim11.CreateDimensionSet(current_view, final_p1, new TSG.Vector(0, 1, 0), maxy + 10, myfi);//FOR BENHUR
                dim11.CreateDimensionSet(current_view, final_p1, new TSG.Vector(0, 1, 0), distance + 10, myfi);
          

            }
            catch
            {
            }

            try
            {
                TSD.StraightDimensionSetHandler dim12 = new TSD.StraightDimensionSetHandler();

                //dim12.CreateDimensionSet(current_view, final_p2, new TSG.Vector(0, 1, 0), maxy + 10, myfi);// FOR BENHUR
                dim12.CreateDimensionSet(current_view, final_p2, new TSG.Vector(0, 1, 0), distance + 10, myfi);
            }
            catch
            {
            }




        }
        public void Create_stud_dimensions(TSD.View current_view,ref List<Guid> PARTMARK_TO_RETAIN,string drg_att)
        {
            try
            {

                TSM.Model MODEL = new TSM.Model();
                TSD.StraightDimensionSetHandler dimhandler = new TSD.StraightDimensionSetHandler();
                TSD.PointList list_for_stud_dim = new TSD.PointList();
                list_for_stud_dim.Add(new TSG.Point(0, 0, 0));
                Type[] type_for_bolt_beam = new Type[] { typeof(TSD.Part), typeof(TSD.Bolt) };
                TSD.DrawingObjectEnumerator enum_for_parts_drg = current_view.GetAllObjects(type_for_bolt_beam);
                TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
                while (enum_for_parts_drg.MoveNext())
                {
                    TSD.ModelObject mypart = enum_for_parts_drg.Current as TSD.ModelObject;

                    TSM.ModelObject model_part = new TSM.Model().SelectModelObject(mypart.ModelIdentifier) as TSM.ModelObject;
                    TSM.Part plate = model_part as TSM.Part;

                    if (model_part.GetType().Equals(typeof(TSM.BoltArray)))
                    {
                        TSM.BoltArray model_bolt = model_part as TSM.BoltArray;
                        string standard = model_bolt.BoltStandard;
                        if (standard.Contains("STUD"))
                        {
                            foreach (TSG.Point pt in model_bolt.BoltPositions)
                            {
                                list_for_stud_dim.Add(toviewmatrix.Transform(pt));
                                Guid ID = plate.Identifier.GUID;
                                PARTMARK_TO_RETAIN.Add(ID);
                            }
                        }

                    }
                    else if (model_part.GetType().Equals(typeof(TSM.Beam)))
                    {
                        TSM.Beam model_beam = model_part as TSM.Beam;

                        if (model_beam.Profile.ProfileString.Contains("STUD") && model_beam.Name.Contains("FALLTECH")==false)
                        {
                            list_for_stud_dim.Add(toviewmatrix.Transform(model_beam.StartPoint));
                            Guid ID = plate.Identifier.GUID;
                            PARTMARK_TO_RETAIN.Add(ID);
                        }

                    }


                }
                try
                {
                    TSD.StraightDimensionSet.StraightDimensionSetAttributes rd_att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                    rd_att.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
                    rd_att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                    rd_att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                    rd_att.Arrowhead.Head = ArrowheadTypes.FilledArrow;
                    rd_att.Text.Font.Color = DrawingColors.Gray70;
                    rd_att.Color = DrawingColors.Gray70;
                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                    {
                        if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                        {
                            rd_att.Text.Font.Height = 3.571875;
                        }
                        else
                        {
                            rd_att.Text.Font.Height = 3.175;
                        }
                    }
                    else
                    {
                        rd_att.Text.Font.Height = 2.38125;


                    }
                    dimhandler.CreateDimensionSet(current_view as TSD.ViewBase, list_for_stud_dim, new TSG.Vector(0, 1, 0), Math.Abs(current_view.RestrictionBox.MaxPoint.Y) + 300, rd_att);
                }
                catch
                {
                }
            }
            catch
            { 
            }

        }
        public void Create_stud_dimensions_FOR_SECTION(TSD.View current_view, double HEIGHT)
        {

            TSM.Model MODEL = new TSM.Model();
            TSD.StraightDimensionSetHandler dimhandler = new TSD.StraightDimensionSetHandler();
            TSD.PointList list_for_stud_dim = new TSD.PointList();
            list_for_stud_dim.Add(new TSG.Point(0, HEIGHT, 0));
            Type[] type_for_bolt_beam = new Type[] { typeof(TSD.Part), typeof(TSD.Bolt) };

            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            double X = current_view.RestrictionBox.MaxPoint.X;
            double X1 = current_view.RestrictionBox.MinPoint.X;
            double Z = current_view.RestrictionBox.MaxPoint.Z;
            double Z1 = current_view.RestrictionBox.MinPoint.Z;
            TSD.DrawingObjectEnumerator enum_for_parts_drg = current_view.GetAllObjects(type_for_bolt_beam);
            while (enum_for_parts_drg.MoveNext())
            {
                TSD.ModelObject mypart = enum_for_parts_drg.Current as TSD.ModelObject;

                TSM.ModelObject model_part = new TSM.Model().SelectModelObject(mypart.ModelIdentifier) as TSM.ModelObject;

                if (model_part.GetType().Equals(typeof(TSM.BoltArray)))
                {
                    TSM.BoltArray model_bolt = model_part as TSM.BoltArray;
                    string standard = model_bolt.BoltStandard;
                    if (standard.Contains("STUD"))
                    {
                        if (((model_bolt.BoltPositions[0] as TSG.Point).Z < Z) && (model_bolt.BoltPositions[0] as TSG.Point).Z > Z1)
                        {
                            list_for_stud_dim.Add(toviewmatrix.Transform(model_bolt.BoltPositions[0] as TSG.Point));
                        }
                    }

                }
                else if (model_part.GetType().Equals(typeof(TSM.Beam)))
                {
                    TSM.Beam model_beam = model_part as TSM.Beam;
                    TSG.Point P1 = toviewmatrix.Transform(model_beam.StartPoint);
                    TSG.Point P2 = toviewmatrix.Transform(model_beam.EndPoint);


                    if (model_beam.Profile.ProfileString.Contains("STUD"))
                    {
                        if ((P1.Z < Z) && (P1.Z > Z1))
                        {

                            list_for_stud_dim.Add(toviewmatrix.Transform(model_beam.StartPoint));
                        }
                    }

                }


            }





            try
            {
                dimhandler.CreateDimensionSet(current_view as TSD.ViewBase, list_for_stud_dim, new TSG.Vector(1, 0, 0), X + 100);
            }
            catch
            {
            }
        }
        public class req_pts
        {
            public double distance;
            public double distance_for_y;
            public double distance_for_Z;
            public TSD.PointList list_of_points;
            public TSM.Part part;
            public string PART_MARK;


        }

        public TSD.PointList converted_points(TSD.PointList list_of_points, TSM.Beam mainpart, TSD.View current_view)
        {
            TSD.PointList webb = new TSD.PointList();

            TSG.Matrix toviewpart = TSG.MatrixFactory.FromCoordinateSystem(mainpart.GetCoordinateSystem());

            foreach (TSG.Point pt in list_of_points)
            {
                TSG.Point mtpt = toviewpart.Transform(pt);
                webb.Add(mtpt);
            }

            TSG.Matrix toviewpart1 = TSG.MatrixFactory.ToCoordinateSystem(current_view.DisplayCoordinateSystem);

            TSD.PointList webb1 = new TSD.PointList();
            foreach (TSG.Point pt in webb)
            {
                TSG.Point mtpt = toviewpart1.Transform(pt);
                webb1.Add(mtpt);
            }

            return webb1;
        }
        public TSD.PointList converted_points(TSD.PointList list_of_points, TSM.Part mainpart, TSD.View current_view)
        {
            TSD.PointList webb = new TSD.PointList();

            TSG.Matrix toviewpart = TSG.MatrixFactory.FromCoordinateSystem(mainpart.GetCoordinateSystem());

            foreach (TSG.Point pt in list_of_points)
            {
                TSG.Point mtpt = toviewpart.Transform(pt);
                webb.Add(mtpt);
            }

            TSG.Matrix toviewpart1 = TSG.MatrixFactory.ToCoordinateSystem(current_view.DisplayCoordinateSystem);

            TSD.PointList webb1 = new TSD.PointList();
            foreach (TSG.Point pt in webb)
            {
                TSG.Point mtpt = toviewpart1.Transform(pt);
                webb1.Add(mtpt);
            }

            return webb1;
        }

        public TSD.PointList converted_points_FOR_ATTRIBUTE_CHECK(TSD.PointList list_of_points, TSM.Beam mainpart)
        {
            TSD.PointList webb = new TSD.PointList();

            TSG.Matrix toviewpart = TSG.MatrixFactory.ToCoordinateSystem(mainpart.GetCoordinateSystem());

            foreach (TSG.Point pt in list_of_points)
            {
                TSG.Point mtpt = toviewpart.Transform(pt);
                webb.Add(mtpt);
            }

            //TSG.Matrix toviewpart1 = TSG.MatrixFactory.ToCoordinateSystem(current_view.DisplayCoordinateSystem);

            //TSD.PointList webb1 = new TSD.PointList();
            //foreach (TSG.Point pt in webb)
            //{
            //    TSG.Point mtpt = toviewpart1.Transform(pt);
            //    webb1.Add(mtpt);
            //}

            return webb;
        }

        public string get_report_properties(TSM.Part part, string property)
        {

            string output = "";
            part.GetReportProperty(property, ref output);
            return output;
        }
        public string get_report_properties1(TSM.Assembly part, string property)
        {

            string output = "";
            part.GetReportProperty(property, ref output);
            return output;
        }
        public double get_report_properties_double(TSM.Part part, string property)
        {

            double output = 0;
            part.GetReportProperty(property, ref output);
            return Math.Round((output), 2);
        }
        public TSD.PointList bounding_box_sort_x(TSM.ModelObject mymodel_object, TSM.Beam mainpart)
        {
            TSD.PointList bounding_box_pts = new TSD.PointList();
           
            TSM.Model MYMODEL = new TSM.Model();
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(mainpart.GetCoordinateSystem()));
            TSM.Solid MYSOLID = (mymodel_object as TSM.Part).GetSolid();
            TSG.Point MAXPT = MYSOLID.MaximumPoint;
            TSG.Point MINPT = MYSOLID.MinimumPoint;
            bounding_box_pts.Add(MAXPT);
            bounding_box_pts.Add(MINPT);
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());


            for (int i = 0; i < bounding_box_pts.Count; i++)
            {

                for (int j = 0; j < bounding_box_pts.Count; j++)
                {
                    if ((bounding_box_pts[i] as TSG.Point).X < (bounding_box_pts[j] as TSG.Point).X)
                    {
                        TSG.Point temp_point = (bounding_box_pts[i] as TSG.Point);
                        bounding_box_pts[i] = bounding_box_pts[j];
                        bounding_box_pts[j] = temp_point;

                    }

                }
            }

            return (bounding_box_pts);


        }
        public TSD.PointList bounding_box_sort_x(TSM.ModelObject mymodel_object, TSM.Part sec_part)
        {
            TSD.PointList bounding_box_pts = new TSD.PointList();

            TSM.Model MYMODEL = new TSM.Model();
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(sec_part.GetCoordinateSystem()));
            TSM.Solid MYSOLID = (mymodel_object as TSM.Part).GetSolid();
            TSG.Point MAXPT = MYSOLID.MaximumPoint;
            TSG.Point MINPT = MYSOLID.MinimumPoint;
            bounding_box_pts.Add(MAXPT);
            bounding_box_pts.Add(MINPT);
            MYMODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());


            for (int i = 0; i < bounding_box_pts.Count; i++)
            {

                for (int j = 0; j < bounding_box_pts.Count; j++)
                {
                    if ((bounding_box_pts[i] as TSG.Point).X < (bounding_box_pts[j] as TSG.Point).X)
                    {
                        TSG.Point temp_point = (bounding_box_pts[i] as TSG.Point);
                        bounding_box_pts[i] = bounding_box_pts[j];
                        bounding_box_pts[j] = temp_point;

                    }

                }
            }

            return (bounding_box_pts);


        }
        public bool FUNCTION_FOR_COMPARING_PARTMARKS_AND_ORIENTATION(List<TSM.Part> LIST1, List<TSM.Part> LIST2, TSM.Beam MAINPART)
        {
            TSM.Model MODEL = new TSM.Model();
            bool result;
            MODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(MAINPART.GetCoordinateSystem()));
            List<string> CHECK_FOR_SAME_SECTION = new List<string>();
            foreach (TSM.Part MYPART in LIST1)
            {
                string CHECK_FOR_SAME_PART = "";
                List<TSM.Part> LISTOFPARTS = new List<TSM.Part>();
                LISTOFPARTS.Add(MYPART);
                foreach (TSM.Part MYPART1 in LIST2)
                {

                    string mypartMARK_FOR_FIRST = get_report_properties(MYPART, "PART_POS");
                    string mypartMARK_FOR_SECOND = get_report_properties(MYPART1, "PART_POS");
                    if (mypartMARK_FOR_FIRST == mypartMARK_FOR_SECOND)
                    {
                        TSG.CoordinateSystem COORD1 = MYPART.GetCoordinateSystem();
                        TSG.CoordinateSystem COORD2 = MYPART1.GetCoordinateSystem();

                        if ((Convert.ToInt64(COORD1.Origin.Y) == Convert.ToInt64(COORD2.Origin.Y)) && (Convert.ToInt64(COORD1.Origin.Z) == Convert.ToInt64(COORD2.Origin.Z)))
                        {
                            if ((function_for_vector_check(COORD1.AxisX, COORD2.AxisX) && (function_for_vector_check(COORD1.AxisY, COORD2.AxisY))))
                            {
                                CHECK_FOR_SAME_PART = "SAME_PART";
                                break;
                            }

                        }

                    }


                }

                if (CHECK_FOR_SAME_PART == "SAME_PART")
                {
                    CHECK_FOR_SAME_SECTION.Add("SAME_SECTION");
                }

            }

            if (CHECK_FOR_SAME_SECTION.Count == LIST1.Count)
            {
                result = true;
            }
            else
            {
                result = false;
            }

            MODEL.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            return result;
        }
        public bool function_for_vector_check(TSG.Vector vector1, TSG.Vector vector2)
        {
            bool result;
            vector1.Normalize();
            vector2.Normalize();
            if ((Convert.ToInt64(vector1.X) == Convert.ToInt64(vector2.X)) && (Convert.ToInt64(vector1.Y) == Convert.ToInt64(vector2.Y)) && (Convert.ToInt64(vector1.Z) == Convert.ToInt64(vector2.Z)))
            {
                result = true;

            }
            else
            {
                result = false;
            }
            return result;

        }
        public class section_loc_with_parts
        {
            public List<TSM.Part> partlist;
            public double distance;
            public string sectionview_needed;
            public int index_of_same_sec;
            public TSD.View myview;
            public bool check_for_already_part_available;
            public List<TSM.Part> req_partlist;
        }
        public TSG.Point converted_points_FOR_CHANNEL(TSM.Model mymodel, TSG.Point POINT_TO_CONVERT, TSM.Beam mainpart, TSD.View current_view)
        {

            TSG.Matrix toglobal = mymodel.GetWorkPlaneHandler().GetCurrentTransformationPlane().TransformationMatrixToGlobal;


            TSG.Matrix toviewpart = TSG.MatrixFactory.ToCoordinateSystem(mainpart.GetCoordinateSystem());


            TSG.Point mtpt = toglobal.Transform(POINT_TO_CONVERT);


            TSG.Matrix toviewpart1 = TSG.MatrixFactory.ToCoordinateSystem(current_view.DisplayCoordinateSystem);
            TSD.PointList webb1 = new TSD.PointList();

            TSG.Point mtpt1 = toviewpart1.Transform(mtpt);

            return mtpt1;


        }

        private void button2_Click(object sender, EventArgs e)
        {
            dgvlog.Rows.Clear();
            chkrdconnmark.Checked = false;
            chkknockoffdim.Checked = false;
            chkcutlen.Checked = false;
            chkscale.Checked = false;
            chkminlen.Checked = false;
            chkwptxteledim.Checked = false;
            chksecscale.Checked = false;
            chkeledim.Checked = false;
            chka1.Checked = false;
            chka2.Checked = false;
            chka3.Checked = false;
            chkmanualinput.Checked = false;

            cmbsecscale.ResetText();
            cmbclient.ResetText();
    
         
     
        }


        public bool check_for_skew_attachments(TSM.Part part, TSM.Part main_part)
        {
            bool result;
            TSM.Model mymodel = new TSM.Model();
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(main_part.GetCoordinateSystem()));
            TSG.Vector x_vector = part.GetCoordinateSystem().AxisX;
            TSG.Vector y_vector = part.GetCoordinateSystem().AxisY;
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

            x_vector.Normalize();
            y_vector.Normalize();

            if (((Math.Round(x_vector.X, 2) == 1) || (Math.Round(x_vector.Y, 2)) == 1 || (Math.Round(x_vector.Z)) == 1) || (((Math.Round(x_vector.X, 2) == -1) || (Math.Round(x_vector.Y, 2)) == -1 || (Math.Round(x_vector.Z, 2)) == -1)))
            {
                if (((Math.Round(y_vector.X, 2) == 1) || (Math.Round(y_vector.Y, 2)) == 1 || (Math.Round(y_vector.Z, 2)) == 1) || (((Math.Round(y_vector.X, 2) == -1) || (Math.Round(y_vector.Y, 2)) == -1 || (Math.Round(y_vector.Z, 2)) == -1)))
                {
                    result = false;
                }
                else
                {
                    result = true;
                }
            }
            else
            {
                result = true;
            }

            return result;
        }

        //private void dataGridView2_SelectionChanged(object sender, EventArgs e)
        //{
        //    ArrayList list_of_assemblies = new ArrayList();

        //    //DataGridViewSelectedRowCollection mycollection1 = dataGridView2.SelectedRows;



        //    foreach (DataGridViewRow row in mycollection1)
        //    {

        //        try
        //        {

        //            if (row.Index == dataGridView2.RowCount - 1)
        //            {
        //            }
        //            else
        //            {
        //                Guid myguid = (Guid)row.Cells["GUID"].Value;
        //                Identifier assy_id = new Identifier(myguid);

        //                TSM.ModelObject myassembly = new TSM.Model().SelectModelObject(assy_id);

        //                list_of_assemblies.Add(myassembly);
        //                //TSM.Solid solid = (myassembly as TSM.BoltGroup).GetSolid();

        //            }
        //        }
        //        catch
        //        {
        //        }


        //    }
        //    TSM.UI.ModelObjectSelector boltselect = new TSM.UI.ModelObjectSelector();
        //    boltselect.Select(list_of_assemblies);
        //}




        public class REQ_LIST_FOR_ATTRIBUTE
        {
            public TSG.Point MINX;
            public TSG.Point MAXX;
        }

        public class req_attribute
        {
            public string attribute;
            public string req_att;
            public double scale_req;
            public double min_length_req;
        }

        public class DRG_ATTRIBUTE_SORT
        {

            public string attribute;
            public int VALUE;
        }


        public void weld_delete(TSD.View current_view_front_view_req, List<section_loc_with_parts> list, TSD.Drawing beam_drg)
        {


            List<Identifier> ide_list = new List<Identifier>();
            for (int i = 0; i < list.Count; i++)
            {

                if (list[i].partlist.Count > 0)
                {
                    List<string> anglepart = new List<string>();



                    //for (int iii = 0; iii < list[i].partlist.Count - 1; iii++)
                    //{
                    //    if(

                    //}


                    foreach (TSM.Part mybeam in list[i].partlist)
                    {
                        string prof_type = get_report_properties(mybeam, "PROFILE_TYPE");

                        if (prof_type == "L")
                        {
                            anglepart.Add(prof_type);
                        }
                    }


                    //bool check2 =  list[i].partlist.Any(p => get_report_properties(p, "PROFILE_TYPE") == "L");
                    if (anglepart.Count > 0)
                    {


                        if (anglepart.Count > 1)
                        {
                            TSM.Beam mybeam = list[i].partlist[0] as TSM.Beam;
                            TSM.Beam mybeam1 = list[i].partlist[1] as TSM.Beam;
                            if (mybeam1 == null)
                            {
                                mybeam1 = list[i].partlist[2] as TSM.Beam;
                            }

                            string PARTMARK = get_report_properties(mybeam, "PART_POS");
                            string PARTMARK1 = get_report_properties(mybeam1, "PART_POS");

                            if (PARTMARK == PARTMARK1)
                            {
                                TSM.ModelObjectEnumerator myweld_enum = mybeam.GetWelds();
                                while (myweld_enum.MoveNext())
                                {

                                    TSM.BaseWeld myweld = myweld_enum.Current as TSM.BaseWeld;
                                    Identifier id_model = myweld.Identifier;
                                    ide_list.Add(id_model);
                                }
                            }
                            else
                            {
                                TSM.ModelObjectEnumerator myweld_enum = mybeam.GetWelds();
                                while (myweld_enum.MoveNext())
                                {

                                    TSM.BaseWeld myweld = myweld_enum.Current as TSM.BaseWeld;
                                    Identifier id_model = myweld.Identifier;
                                    ide_list.Add(id_model);
                                }
                                TSM.ModelObjectEnumerator myweld_enum1 = mybeam1.GetWelds();
                                while (myweld_enum1.MoveNext())
                                {

                                    TSM.BaseWeld myweld1 = myweld_enum1.Current as TSM.BaseWeld;
                                    Identifier id_model = myweld1.Identifier;
                                    ide_list.Add(id_model);
                                }

                            }
                        }
                        else
                        {
                            TSM.Beam mybeam = list[i].partlist[0] as TSM.Beam;
                            TSM.ModelObjectEnumerator myweld_enum = mybeam.GetWelds();
                            while (myweld_enum.MoveNext())
                            {

                                TSM.BaseWeld myweld = myweld_enum.Current as TSM.BaseWeld;
                                Identifier id_model = myweld.Identifier;
                                ide_list.Add(id_model);
                            }

                        }

                    }
                }


            }

            List<Identifier> drg_list = new List<Identifier>();
            TSD.DrawingObjectEnumerator myweld_enum_for_front_view = current_view_front_view_req.GetAllObjects(typeof(TSD.WeldMark));

            while (myweld_enum_for_front_view.MoveNext())
            {
                TSD.WeldMark myweld = myweld_enum_for_front_view.Current as TSD.WeldMark;


                Identifier drg_ide_for_weld = myweld.ModelIdentifier;
                bool result = ide_list.Any(x => x.Equals(drg_ide_for_weld));
                if (result == true)
                {
                }
                else
                {
                    myweld.Delete();
                }
                //drg_list.Add(drg_ide_for_weld);
            }
            current_view_front_view_req.Modify();
            beam_drg.Modify();
            beam_drg.CommitChanges();



        }

        public void slot_symbol(TSD.Drawing mydrg, TSM.Part mainpart)
        {
            Type[] type_for_mark = new Type[] { typeof(TSD.Mark) };

            TSM.Model model = new TSM.Model();
            TSD.DrawingObjectEnumerator enum_for_views = mydrg.GetSheet().GetAllViews();
            string mainpartmark = mainpart.GetPartMark();
            while (enum_for_views.MoveNext())
            {

                TSD.View current_view = enum_for_views.Current as TSD.View;
                //TSD.DrawingObjectEnumerator enum_for_mark = mydrg.GetSheet().GetAllObjects(type_for_mark);
                TSD.DrawingObjectEnumerator enum_for_mark = current_view.GetAllObjects(type_for_mark);
                

                    while (enum_for_mark.MoveNext())
                    {
                        var mark = enum_for_mark.Current;

                        if (mark.GetType().Equals(typeof(TSD.Mark)))
                        {
                            TSD.Mark mymark = mark as TSD.Mark;

                            TSD.ContainerElement CONTAINER = mymark.Attributes.Content;
                            List<string> RESULT_FOR_SLOT = new List<string>();
                            IEnumerator CHECK1 = CONTAINER.GetEnumerator();
                            while (CHECK1.MoveNext())
                            {
                                var NAME = CHECK1.Current;
                                if (NAME.GetType().Equals(typeof(TSD.PropertyElement)))
                                {
                                    TSD.PropertyElement CHECK2 = CHECK1.Current as TSD.PropertyElement;
                                    string VALUE = CHECK2.Value;
                                    if (VALUE.Contains("SLOTS"))
                                    {
                                        RESULT_FOR_SLOT.Add("TRUE");


                                        
                                    }
                                }
                            }
                            CHECK1.Reset();

                            bool RESULT = RESULT_FOR_SLOT.Any(X => X.Contains("TRUE"));
                           

                            

                            TSD.DrawingObjectEnumerator enumcheck = mymark.GetRelatedObjects();

                            while (enumcheck.MoveNext())
                            {
                                var mark_part = enumcheck.Current;


                                if (mark_part.GetType().Equals(typeof(TSD.Bolt)))
                                {
                                    if (RESULT == true)
                                    {

                                        TSM.BoltGroup bolt = new TSM.Model().SelectModelObject((mark_part as TSD.Bolt).ModelIdentifier) as TSM.BoltGroup;
                                        TSD.Mark mymark1 = mark as TSD.Mark;

                                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
                                        /////////////////////////////////////////////////////////getting bolt coordinate system for checking of out of plane bolts/////////////////////////////////////////////////
                                        TSG.CoordinateSystem boltcoord1 = bolt.GetCoordinateSystem();
                                        model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

                                        bool check_for_bolt_coord = (boltcoord1.AxisX.X.Equals(0)) && (boltcoord1.AxisY.Y.Equals(0));


                                        double x_val = bolt.SlottedHoleX;
                                        double y_val = bolt.SlottedHoleY;
                                        TSD.SymbolInfo slotsymbol = null;
                                        if (bolt.RotateSlots.Equals(TSM.BoltGroup.BoltRotateSlotsEnum.ROTATE_SLOTS_PARALLEL))
                                        {

                                            if (check_for_bolt_coord == true)
                                            {
                                                if ((x_val > 0) && (y_val == 0))
                                                {
                                                    slotsymbol = new TSD.SymbolInfo("xsteel", 74);
                                                    //slotsymbol = new TSD.SymbolInfo("xsteel", 74);// CHECKED ERROR31-10-2018 burkecommunity church
                                                    TSG.Point insertionpoint = mymark.InsertionPoint - new TSG.Point(0, 140, 0);
                                                    TSD.Symbol newsymbol = new TSD.Symbol(current_view, insertionpoint, slotsymbol);
                                                    newsymbol.Insert();
                                                    newsymbol.Attributes.Height = 15;
                                                    newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                                                    newsymbol.Modify();
                                                    REMOVING_HLS(mymark1);




                                                }
                                                if ((y_val > 0) && (x_val == 0))
                                                {
                                                    slotsymbol = new TSD.SymbolInfo("xsteel", 75);
                                                    //slotsymbol = new TSD.SymbolInfo("xsteel", 75);// CHECKED ERROR 31-10-2018 burkecommunity church
                                                    TSG.Point insertionpoint = mymark.InsertionPoint - new TSG.Point(0, 50, 0);
                                                    TSD.Symbol newsymbol = new TSD.Symbol(current_view, insertionpoint, slotsymbol);
                                                    newsymbol.Insert();
                                                    newsymbol.Attributes.Height = 15;
                                                    newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                                                    newsymbol.Modify();
                                                    REMOVING_HLS(mymark1);




                                                }
                                            }
                                            else if (check_for_bolt_coord == false)
                                            {
                                                if ((x_val > 0) && (y_val == 0))
                                                {
                                                    slotsymbol = new TSD.SymbolInfo("xsteel", 75);
                                                    TSG.Point insertionpoint = mymark.InsertionPoint - new TSG.Point(0, 140, 0);
                                                    TSD.Symbol newsymbol = new TSD.Symbol(current_view, insertionpoint, slotsymbol);
                                                    newsymbol.Insert();
                                                    newsymbol.Attributes.Height = 15;
                                                    newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                                                    newsymbol.Modify();
                                                    REMOVING_HLS(mymark1);

                                                }
                                                if ((y_val > 0) && (x_val == 0))
                                                {
                                                    slotsymbol = new TSD.SymbolInfo("xsteel", 74);
                                                    TSG.Point insertionpoint = mymark.InsertionPoint - new TSG.Point(0, 50, 0);
                                                    TSD.Symbol newsymbol = new TSD.Symbol(current_view, insertionpoint, slotsymbol);
                                                    newsymbol.Insert();
                                                    newsymbol.Attributes.Height = 15;
                                                    newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                                                    newsymbol.Modify();
                                                    REMOVING_HLS(mymark1);


                                                }
                                            }
                                        }
                                        else if (bolt.RotateSlots.Equals(TSM.BoltGroup.BoltRotateSlotsEnum.ROTATE_SLOTS_EVEN))
                                        {

                                            if (check_for_bolt_coord == true)
                                            {
                                                if ((x_val > 0) && (y_val == 0))
                                                {
                                                    slotsymbol = new TSD.SymbolInfo("xsteel", 75);
                                                    TSG.Point insertionpoint = mymark.InsertionPoint - new TSG.Point(0, 50, 0);
                                                    TSD.Symbol newsymbol = new TSD.Symbol(current_view, insertionpoint, slotsymbol);
                                                    newsymbol.Insert();
                                                    newsymbol.Attributes.Height = 15;
                                                    newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                                                    newsymbol.Modify();
                                                    REMOVING_HLS(mymark1);

                                                }
                                                if ((y_val > 0) && (x_val == 0))
                                                {
                                                    slotsymbol = new TSD.SymbolInfo("xsteel", 74);
                                                    TSG.Point insertionpoint = mymark.InsertionPoint - new TSG.Point(0, 140, 0);
                                                    TSD.Symbol newsymbol = new TSD.Symbol(current_view, insertionpoint, slotsymbol);
                                                    newsymbol.Insert();
                                                    newsymbol.Attributes.Height = 15;
                                                    newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                                                    newsymbol.Modify();
                                                    REMOVING_HLS(mymark1);


                                                }
                                            }
                                            else if (check_for_bolt_coord == false)
                                            {
                                                if ((x_val > 0) && (y_val == 0))
                                                {
                                                    slotsymbol = new TSD.SymbolInfo("xsteel", 74);
                                                    TSG.Point insertionpoint = mymark.InsertionPoint - new TSG.Point(0, 140, 0);
                                                    TSD.Symbol newsymbol = new TSD.Symbol(current_view, insertionpoint, slotsymbol);
                                                    newsymbol.Insert();
                                                    newsymbol.Attributes.Height = 15;
                                                    newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                                                    newsymbol.Modify();
                                                    REMOVING_HLS(mymark1);

                                                }
                                                if ((y_val > 0) && (x_val == 0))
                                                {
                                                    slotsymbol = new TSD.SymbolInfo("xsteel", 75);
                                                    TSG.Point insertionpoint = mymark.InsertionPoint - new TSG.Point(0, 50, 0);
                                                    TSD.Symbol newsymbol = new TSD.Symbol(current_view, insertionpoint, slotsymbol);
                                                    newsymbol.Insert();
                                                    newsymbol.Attributes.Height = 15;
                                                    newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                                                    newsymbol.Modify();
                                                    REMOVING_HLS(mymark1);


                                                }
                                            }
                                        }
                                        else if (bolt.RotateSlots.Equals(TSM.BoltGroup.BoltRotateSlotsEnum.ROTATE_SLOTS_ODD))
                                        {

                                            if (check_for_bolt_coord == true)
                                            {
                                                if ((x_val > 0) && (y_val == 0))
                                                {
                                                    slotsymbol = new TSD.SymbolInfo("xsteel", 75);
                                                    TSG.Point insertionpoint = mymark.InsertionPoint - new TSG.Point(0, 50, 0);
                                                    TSD.Symbol newsymbol = new TSD.Symbol(current_view, insertionpoint, slotsymbol);
                                                    newsymbol.Insert();
                                                    newsymbol.Attributes.Height = 15;
                                                    newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                                                    newsymbol.Modify();
                                                    REMOVING_HLS(mymark1);

                                                }
                                                if ((y_val > 0) && (x_val == 0))
                                                {
                                                    slotsymbol = new TSD.SymbolInfo("xsteel", 74);
                                                    TSG.Point insertionpoint = mymark.InsertionPoint - new TSG.Point(0, 140, 0);
                                                    TSD.Symbol newsymbol = new TSD.Symbol(current_view, insertionpoint, slotsymbol);
                                                    newsymbol.Insert();
                                                    newsymbol.Attributes.Height = 15;
                                                    newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                                                    newsymbol.Modify();
                                                    REMOVING_HLS(mymark1);


                                                }
                                            }
                                            else if (check_for_bolt_coord == false)
                                            {
                                                if ((x_val > 0) && (y_val == 0))
                                                {
                                                    slotsymbol = new TSD.SymbolInfo("xsteel", 74);
                                                    TSG.Point insertionpoint = mymark.InsertionPoint - new TSG.Point(0, 140, 0);
                                                    TSD.Symbol newsymbol = new TSD.Symbol(current_view, insertionpoint, slotsymbol);
                                                    newsymbol.Insert();
                                                    newsymbol.Attributes.Height = 15;
                                                    newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                                                    newsymbol.Modify();
                                                    REMOVING_HLS(mymark1);

                                                }
                                                if ((y_val > 0) && (x_val == 0))
                                                {
                                                    slotsymbol = new TSD.SymbolInfo("xsteel", 75);
                                                    TSG.Point insertionpoint = mymark.InsertionPoint - new TSG.Point(0, 50, 0);
                                                    TSD.Symbol newsymbol = new TSD.Symbol(current_view, insertionpoint, slotsymbol);
                                                    newsymbol.Insert();
                                                    newsymbol.Attributes.Height = 15;
                                                    newsymbol.Attributes.Color = TSD.DrawingColors.Green;
                                                    newsymbol.Modify();
                                                    REMOVING_HLS(mymark1);


                                                }
                                            }
                                        }




                                    }

                                    //else
                                    //{
                                    //    TSM.BoltGroup bolt = new TSM.Model().SelectModelObject((mark_part as TSD.Bolt).ModelIdentifier) as TSM.BoltGroup;
                                    // int NO_OF_BOLTS =  bolt.BoltPositions.Count;
                                    //    TSD.Mark mymark1 = mark as TSD.Mark;
                                    //    //REMOVING_HLSTOHL(NO_OF_BOLTS, mymark1);
 
                                    //}


                                }
                            }
                        }
                    }
                
            }



        }

        public void SEC_VIEW_COMPARE(List<req_pts> mypoints, TSD.View current_view, TSM.Part main_part, List<List<int>> mypart_list_of_created_sect_view, TSD.AssemblyDrawing ASSEMBLY_DRAWING, out List<section_loc_with_parts> list2,string drg_att)
        {
            ArrayList mainpart_values = Getcatalog_values(main_part);

            list2 = new List<section_loc_with_parts>();
            mypoints = mypoints.OrderBy(x => x.distance).ToList();



            List<req_pts> final_distance = new List<req_pts>();

            for (int i = 0; i < mypoints.Count; i++)
            {

                if (i == Convert.ToInt16(mypoints.Count - 1))
                {
                    final_distance.Add(mypoints[i]);

                }
                else
                {
                    double ditsnace = (Convert.ToInt16(mypoints[i + 1].distance) - Convert.ToInt16(mypoints[i].distance));
                    if (ditsnace > 25)
                    {
                        final_distance.Add(mypoints[i]);

                    }

                    else
                    {
                        if (mypoints[i].distance != mypoints[i + 1].distance)
                        {
                            if (mypoints[i].distance_for_y > mypoints[i + 1].distance_for_y)
                            {
                                final_distance.Add(mypoints[i]);
                            }
                            else
                            {
                                final_distance.Add(mypoints[i + 1]);
                                //final_distance.Add(mypoints[i ]);
                            }
                        }
                    }
                }
            }
            TSM.Part main = main_part;

            List<double> final_distance_UNIQUE = new List<double>();


            section_loc_with_parts obj1 = new section_loc_with_parts();
            List<TSM.Part> list1 = new List<TSM.Part>();

            for (int i = 0; i < mypoints.Count; i++)
            {

                if (i == Convert.ToInt16(mypoints.Count - 1))
                {
                    final_distance_UNIQUE.Add(mypoints[i].distance);
                    list1.Add(mypoints[i].part);
                    list2.Add(new section_loc_with_parts() { partlist = list1, distance = mypoints[i].distance });

                }
                else
                {
                    double ditsnace = (Convert.ToInt16(mypoints[i + 1].distance) - Convert.ToInt16(mypoints[i].distance));
                    if (ditsnace > 25)
                    {

                        list1.Add(mypoints[i].part);
                        list2.Add(new section_loc_with_parts() { partlist = list1, distance = mypoints[i].distance });
                        list1 = new List<TSM.Part>();
                    }

                    else
                    {
                        list1.Add(mypoints[i].part);

                    }
                }
            }

            List<TSM.Part> final_list = new List<TSM.Part>();
            List<section_loc_with_parts> f1 = new List<section_loc_with_parts>();
            List<section_loc_with_parts> f2 = new List<section_loc_with_parts>();


            List<section_loc_with_parts> FINAL = list2.GroupBy(X => X.partlist.Count).Select(Y => Y.FirstOrDefault()).ToList();
            List<string> final_check_for_unique = new List<string>();
            for (int i = list2.Count - 1; i >= 0; i--)
            {
                if (i == 0)
                {
                    list2[i].sectionview_needed = "YES";
                }
                else
                {

                    List<string> check_for_unique = new List<string>();
                    for (int j = i - 1; j >= 0; j--)
                    {


                        var first_loop = list2[i].partlist;
                        var second_loop = list2[j].partlist;

                        if (!(first_loop.Count == second_loop.Count))
                        {
                            check_for_unique.Add("UNIQUE");

                        }
                        else
                        {
                            bool result = FUNCTION_FOR_COMPARING_PARTMARKS_AND_ORIENTATION(first_loop, second_loop, main_part as TSM.Beam);

                            if (result == true)
                            {

                                check_for_unique.Add("SAME");
                            }
                            else
                            {
                                check_for_unique.Add("UNIQUE");
                            }

                        }
                    }

                    if (!check_for_unique.Contains("SAME"))
                    {
                        list2[i].sectionview_needed = "YES";
                    }
                    else
                    {
                        list2[i].sectionview_needed = "NO";
                        int check = check_for_unique.LastIndexOf("SAME");
                        int check2 = check_for_unique.Count - (check + 1);
                        list2[i].index_of_same_sec = check2;
                    }

                }
            }





            list2 = list2.OrderBy(x => x.distance).ToList();
            List<section_loc_with_parts> section = new List<section_loc_with_parts>();
            List<TSD.SectionMark> sectionmarklist = new List<TSD.SectionMark>();








            for (int i = 0; i < list2.Count; i++)
            {
                if ((list2[i].sectionview_needed == "YES"))
                {
                    //if (list2[i].partlist.Count > 1)
                    //{
                    //    List<TSM.Beam> list_of_angles = new List<TSM.Beam>();


                    //}
                    double minx = 0;
                    double maxx = 0;
                    double mny = 0;
                    double mxy = 0;

                    minx = list2[i].partlist.Min(x => bounding_box_sort_x(x, current_view)[0].X);
                    maxx = list2[i].partlist.Max(x => bounding_box_sort_x(x, current_view)[1].X);
                    mny = list2[i].partlist.Min(x => bounding_box_sort_x(x, current_view)[0].Y);
                    mxy = list2[i].partlist.Max(x => bounding_box_sort_x(x, current_view)[1].Y);

                    double miny = Convert.ToInt64(mny);
                    double maxy = Convert.ToInt64(mxy);

                    double distanceofx = ((minx + maxx) / 2);
                    double DISTANCE_TO_COMPARE = Math.Abs((minx - maxx));


                    double distance_of_y = ((miny + maxy) / 2);
                    double height = Convert.ToDouble(mainpart_values[0]);
                    double height_for_view = 0;
                    double height_for_view1 = 0;

                    double POSIH = Convert.ToInt64(height / 2);
                    double NEGAH = -Convert.ToInt64(height / 2);



                    if ((maxy <= POSIH) && (miny >= NEGAH))
                    {
                        height_for_view = -((height / 2));
                        height_for_view1 = (height / 2);
                    }
                    else if ((maxy >= POSIH) && (miny >= POSIH))
                    {
                        height_for_view = (height / 2);
                        height_for_view1 = maxy;

                    }
                    else if ((maxy <= NEGAH) && (miny <= NEGAH))
                    {
                        height_for_view = miny;
                        height_for_view1 = (height / 2);

                    }
                    else if ((maxy >= POSIH) && (miny >= NEGAH))
                    {
                        height_for_view = -((height / 2));
                        height_for_view1 = maxy;
                    }

                    else if ((maxy <= POSIH) && (miny <= NEGAH))
                    {
                        height_for_view = miny;
                        height_for_view1 = (height / 2);
                    }
                    else if ((maxy >= POSIH) && (miny <= NEGAH))
                    {
                        height_for_view = miny;
                        height_for_view1 = maxy;
                    }




                    TSD.View bottom_view = null;


                    TSD.SectionMark sec = null;

                    double distancefor_depthup = 0;
                    double distancefor_depthdown = 0;
                    if (DISTANCE_TO_COMPARE < 300)
                    {
                        distancefor_depthup = Math.Abs(minx - distanceofx);
                        distancefor_depthdown = Math.Abs(maxx - distanceofx);
                    }
                    else if (DISTANCE_TO_COMPARE > 300)
                    {
                        distancefor_depthup = 0;
                        distancefor_depthdown = 0;

                    }

                    //if (height_for_view > 0)
                    //{



                    //    height_for_view = height_for_view + 25.4;

                    //}


                    //else
                    //{
                    //    height_for_view = height_for_view - 25.4;
                    //}

                    //if (height_for_view1 > 0)
                    //{
                    //    if (height_for_view1 > POSIH )
                    //    {
                    //        height_for_view1 = height_for_view1;

                    //    }
                    //    else
                    //    {
                    //        height_for_view1 = height_for_view1 + 25.4;
                    //    }
                    //}
                    //else
                    //{
                    //    height_for_view1 = height_for_view1 - 25.4;
                    //}

                    //TSG.Point P1 = new TSG.Point(distanceofx, height_for_view - 1, 0);
                    //TSG.Point P2 = new TSG.Point(distanceofx, height_for_view1 + 1, 0);
                    height_for_view = current_view.RestrictionBox.MaxPoint.Y;
                    height_for_view1 = current_view.RestrictionBox.MinPoint.Y;
                    TSG.Point P1 = new TSG.Point(distanceofx, height_for_view, 0);
                    TSG.Point P2 = new TSG.Point(distanceofx, height_for_view1, 0);
                    //TSG.Point P1 = new TSG.Point(minx, height_for_view, 0);
                    //TSG.Point P2 = new TSG.Point(maxx, height_for_view1, 0);



                    double dep_up = maxx - distanceofx;
                    double dep_down = distanceofx - minx;
                    try
                    {
                        //TSD.View.ViewMarkTagAttributes tag = new TSD.View.ViewMarkTagAttributes();
                        //tag.TagContent.Add(TSD.PropertyElement.PropertyElementType.SectionViewLabelMarkPropertyElementTypes.SectionName());

                        if (drg_att == "SK_BEAM_A1")
                        {
                            bool result = TSD.View.CreateSectionView(current_view, P2, P1, new TSG.Point(current_view.ExtremaCenter.X, 0, 0), Convert.ToInt64(dep_down) + 100, Convert.ToInt64(dep_up) + 100, current_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                            bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                            bottom_view.Modify();


                        }
                        else
                        {
                            bool result = TSD.View.CreateSectionView(current_view, P2, P1, new TSG.Point(current_view.ExtremaCenter.X, 0, 0), Convert.ToInt64(dep_down) + 100, Convert.ToInt64(dep_up) + 100, current_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("SK_BEAM_A1"), out bottom_view, out sec);
                            bottom_view.Attributes.LoadAttributes("SK_BEAM_A1");
                            bottom_view.Modify();
                        }
                        //bool result = TSD.View.CreateSectionView(current_view, P2, P1, new TSG.Point(current_view.ExtremaCenter.X, 0, 0), Convert.ToInt64(dep_down) + 100, Convert.ToInt64(dep_up) + 100, current_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("ESSKAYBEAM"), out bottom_view, out sec);
                         

                        //bool result = TSD.View.CreateSectionView(current_view, P2, P1, new TSG.Point(current_view.ExtremaCenter.X, 0, 0), Convert.ToInt64(dep_down) + 100, Convert.ToInt64(dep_up) + 100, current_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);
                        //bottom_view.Attributes.Scale = current_view.Attributes.Scale;
                        //bottom_view.Modify();
                        //ASSEMBLY_DRAWING.CommitChanges();

                        sec.Attributes.LineLengthOffset = 0;
                        sec.Modify();

                        double change_min = Math.Abs(bottom_view.RestrictionBox.MinPoint.X);
                        double change_max = Math.Abs(bottom_view.RestrictionBox.MaxPoint.X);


                        if (Convert.ToInt64(change_min) > Convert.ToInt64(change_max))
                        {
                            bottom_view.RestrictionBox.MaxPoint.X = change_min;
                            bottom_view.Modify();

                        }
                        else
                        {
                            bottom_view.RestrictionBox.MinPoint.X = -change_max;
                            bottom_view.Modify();

                        }


                        bottom_view.Attributes.LabelPositionHorizontal = TSD.View.HorizontalLabelPosition.CenteredByViewRestrictionBox;
                        bottom_view.Modify();


                        TSD.FontAttributes FONT = new TSD.FontAttributes();
                        FONT.Color = TSD.DrawingColors.Magenta;
                        FONT.Height = Convert.ToInt16(3.96875);
                        //bottom_view.Attributes.LabelPositionHorizontal = TSD.View.HorizontalLabelPosition.CenteredByViewFrame;
                        //bottom_view.Modify();


                        //TSD.TextElement textelement2 = new TSD.TextElement(sec.Attributes.MarkName, FONT);
                        TSD.TextElement textelement3 = new TSD.TextElement("-", FONT);

                        TSD.PropertyElement.PropertyElementType VIEW_LABEL = TSD.PropertyElement.PropertyElementType.ViewLabelMarkPropertyElementTypes.ViewName();
                        TSD.PropertyElement X = new TSD.PropertyElement(VIEW_LABEL);
                        X.Font.Color = TSD.DrawingColors.Magenta;
                        X.Font.Height = Convert.ToInt64(3.96875);


                        //TSD.ContainerElement sectionmark = new TSD.ContainerElement { textelement2, textelement3, textelement2 };

                        TSD.ContainerElement sectionmark = new TSD.ContainerElement { X, textelement3, X };



                        sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                        sec.Attributes.TagsAttributes.TagA1 = new TSD.SectionMarkBase.SectionMarkTagAttributes(TSD.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides, TSD.TagLocation.AboveLine, new TSG.Vector(1, 0, 0), TSD.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal, new TSD.ContainerElement { X });

                        bottom_view.Attributes.TagsAttributes.TagA1 = new TSD.View.ViewMarkTagAttributes(new TSG.Vector(0, 0, 0), TSD.TagLocation.AboveLine, TSD.TextAlignment.Center, sectionmark);

                        bottom_view.Attributes.LabelPositionVertical = TSD.View.VerticalLabelPosition.Bottom;

                        bottom_view.Attributes.MarkSymbolColor = TSD.DrawingColors.Magenta;
                        sec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;
                        sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                        bottom_view.Attributes.Scale.Equals(current_view.Attributes.Scale);

                        bottom_view.Modify();


                        list2[i].myview = bottom_view;
                        sectionmarklist.Add(sec);


                    }
                    catch
                    {
                    }

                }

                else
                {

                    TSD.SectionMark sec_dummy = null;
                    sectionmarklist.Add(sec_dummy);
                    TSD.SectionMark mysec = sectionmarklist[list2[i].index_of_same_sec];

                    mysec.LeftPoint.X = list2[i].distance;
                    mysec.RightPoint.X = list2[i].distance;
                    //mysec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                    //mysec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;






                    mysec.Insert();

                }






            }

        }





        public void SEC_VIEW_COMPARE_not_for_section(List<req_pts> mypoints, TSD.View current_view, TSM.Part main_part, List<List<int>> mypart_list_of_created_sect_view, TSD.AssemblyDrawing ASSEMBLY_DRAWING, out List<section_loc_with_parts> list2)
        {
            ArrayList mainpart_values = Getcatalog_values(main_part);

            list2 = new List<section_loc_with_parts>();
            mypoints = mypoints.OrderBy(x => x.distance).ToList();



            List<req_pts> final_distance = new List<req_pts>();

            for (int i = 0; i < mypoints.Count; i++)
            {

                if (i == Convert.ToInt16(mypoints.Count - 1))
                {
                    final_distance.Add(mypoints[i]);

                }
                else
                {
                    double ditsnace = (Convert.ToInt16(mypoints[i + 1].distance) - Convert.ToInt16(mypoints[i].distance));
                    if (ditsnace > 125)
                    {
                        final_distance.Add(mypoints[i]);

                    }

                    else
                    {
                        if (mypoints[i].distance != mypoints[i + 1].distance)
                        {
                            if (mypoints[i].distance_for_y > mypoints[i + 1].distance_for_y)
                            {
                                final_distance.Add(mypoints[i]);
                            }
                            else
                            {
                                final_distance.Add(mypoints[i + 1]);
                                //final_distance.Add(mypoints[i ]);
                            }
                        }
                    }
                }
            }
            TSM.Part main = main_part;

            List<double> final_distance_UNIQUE = new List<double>();


            section_loc_with_parts obj1 = new section_loc_with_parts();
            List<TSM.Part> list1 = new List<TSM.Part>();

            for (int i = 0; i < mypoints.Count; i++)
            {

                if (i == Convert.ToInt16(mypoints.Count - 1))
                {
                    final_distance_UNIQUE.Add(mypoints[i].distance);
                    list1.Add(mypoints[i].part);
                    list2.Add(new section_loc_with_parts() { partlist = list1, distance = mypoints[i].distance });

                }
                else
                {
                    double ditsnace = (Convert.ToInt16(mypoints[i + 1].distance) - Convert.ToInt16(mypoints[i].distance));
                    if (ditsnace > 125)
                    {

                        list1.Add(mypoints[i].part);
                        list2.Add(new section_loc_with_parts() { partlist = list1, distance = mypoints[i].distance });
                        list1 = new List<TSM.Part>();
                    }

                    else
                    {
                        list1.Add(mypoints[i].part);

                    }
                }
            }

            List<TSM.Part> final_list = new List<TSM.Part>();
            List<section_loc_with_parts> f1 = new List<section_loc_with_parts>();
            List<section_loc_with_parts> f2 = new List<section_loc_with_parts>();


            List<section_loc_with_parts> FINAL = list2.GroupBy(X => X.partlist.Count).Select(Y => Y.FirstOrDefault()).ToList();
            List<string> final_check_for_unique = new List<string>();
            for (int i = list2.Count - 1; i >= 0; i--)
            {
                if (i == 0)
                {
                    list2[i].sectionview_needed = "YES";
                }
                else
                {

                    List<string> check_for_unique = new List<string>();
                    for (int j = i - 1; j >= 0; j--)
                    {


                        var first_loop = list2[i].partlist;
                        var second_loop = list2[j].partlist;

                        if (!(first_loop.Count == second_loop.Count))
                        {
                            check_for_unique.Add("UNIQUE");

                        }
                        else
                        {
                            bool result = FUNCTION_FOR_COMPARING_PARTMARKS_AND_ORIENTATION(first_loop, second_loop, main_part as TSM.Beam);

                            if (result == true)
                            {

                                check_for_unique.Add("SAME");
                            }
                            else
                            {
                                check_for_unique.Add("UNIQUE");
                            }

                        }
                    }

                    if (!check_for_unique.Contains("SAME"))
                    {
                        list2[i].sectionview_needed = "YES";
                    }
                    else
                    {
                        list2[i].sectionview_needed = "NO";
                        int check = check_for_unique.LastIndexOf("SAME");
                        int check2 = check_for_unique.Count - (check + 1);
                        list2[i].index_of_same_sec = check2;
                    }

                }
            }





            list2 = list2.OrderBy(x => x.distance).ToList();
            List<section_loc_with_parts> section = new List<section_loc_with_parts>();
            List<TSD.SectionMark> sectionmarklist = new List<TSD.SectionMark>();








            for (int i = 0; i < list2.Count; i++)
            {
                if ((list2[i].sectionview_needed == "YES"))
                {
                    //if (list2[i].partlist.Count > 1)
                    //{
                    //    List<TSM.Beam> list_of_angles = new List<TSM.Beam>();


                    //}
                    double minx = 0;
                    double maxx = 0;
                    double mny = 0;
                    double mxy = 0;

                    minx = list2[i].partlist.Min(x => bounding_box_sort_x(x, current_view)[0].X);
                    maxx = list2[i].partlist.Max(x => bounding_box_sort_x(x, current_view)[1].X);
                    mny = list2[i].partlist.Min(x => bounding_box_sort_x(x, current_view)[0].Y);
                    mxy = list2[i].partlist.Max(x => bounding_box_sort_x(x, current_view)[1].Y);

                    double miny = Convert.ToInt64(mny);
                    double maxy = Convert.ToInt64(mxy);

                    double distanceofx = ((minx + maxx) / 2);
                    double DISTANCE_TO_COMPARE = Math.Abs((minx - maxx));


                    double distance_of_y = ((miny + maxy) / 2);
                    double height = Convert.ToDouble(mainpart_values[0]);
                    double height_for_view = 0;
                    double height_for_view1 = 0;

                    double POSIH = Convert.ToInt64(height / 2);
                    double NEGAH = -Convert.ToInt64(height / 2);



                    if ((maxy <= POSIH) && (miny >= NEGAH))
                    {
                        height_for_view = -((height / 2));
                        height_for_view1 = (height / 2);
                    }
                    else if ((maxy >= POSIH) && (miny >= POSIH))
                    {
                        height_for_view = (height / 2);
                        height_for_view1 = maxy;

                    }
                    else if ((maxy <= NEGAH) && (miny <= NEGAH))
                    {
                        height_for_view = miny;
                        height_for_view1 = (height / 2);

                    }
                    else if ((maxy >= POSIH) && (miny >= NEGAH))
                    {
                        height_for_view = -((height / 2));
                        height_for_view1 = maxy;
                    }

                    else if ((maxy <= POSIH) && (miny <= NEGAH))
                    {
                        height_for_view = miny;
                        height_for_view1 = (height / 2);
                    }
                    else if ((maxy >= POSIH) && (miny <= NEGAH))
                    {
                        height_for_view = miny;
                        height_for_view1 = maxy;
                    }




                    TSD.View bottom_view = null;


                    TSD.SectionMark sec = null;

                    double distancefor_depthup = 0;
                    double distancefor_depthdown = 0;
                    if (DISTANCE_TO_COMPARE < 300)
                    {
                        distancefor_depthup = Math.Abs(minx - distanceofx);
                        distancefor_depthdown = Math.Abs(maxx - distanceofx);
                    }
                    else if (DISTANCE_TO_COMPARE > 300)
                    {
                        distancefor_depthup = 0;
                        distancefor_depthdown = 0;

                    }

                    //if (height_for_view > 0)
                    //{



                    //    height_for_view = height_for_view + 25.4;

                    //}


                    //else
                    //{
                    //    height_for_view = height_for_view - 25.4;
                    //}

                    //if (height_for_view1 > 0)
                    //{
                    //    if (height_for_view1 > POSIH )
                    //    {
                    //        height_for_view1 = height_for_view1;

                    //    }
                    //    else
                    //    {
                    //        height_for_view1 = height_for_view1 + 25.4;
                    //    }
                    //}
                    //else
                    //{
                    //    height_for_view1 = height_for_view1 - 25.4;
                    //}

                    //TSG.Point P1 = new TSG.Point(distanceofx, height_for_view - 1, 0);
                    //TSG.Point P2 = new TSG.Point(distanceofx, height_for_view1 + 1, 0);
                    height_for_view = current_view.RestrictionBox.MaxPoint.Y;
                    height_for_view1 = current_view.RestrictionBox.MinPoint.Y;
                    TSG.Point P1 = new TSG.Point(distanceofx, height_for_view, 0);
                    TSG.Point P2 = new TSG.Point(distanceofx, height_for_view1, 0);
                    //TSG.Point P1 = new TSG.Point(minx, height_for_view, 0);
                    //TSG.Point P2 = new TSG.Point(maxx, height_for_view1, 0);

                    double dep_up = maxx - distanceofx;
                    double dep_down = distanceofx - minx;
                    try
                    {
                        //TSD.View.ViewMarkTagAttributes tag = new TSD.View.ViewMarkTagAttributes();
                        //tag.TagContent.Add(TSD.PropertyElement.PropertyElementType.SectionViewLabelMarkPropertyElementTypes.SectionName());

                        ////bool result = TSD.View.CreateSectionView(current_view, P2, P1, new TSG.Point(current_view.ExtremaCenter.X, 0, 0), Convert.ToInt64(dep_down) + 100, Convert.ToInt64(dep_up) + 100, current_view.Attributes, new TSD.SectionMarkBase.SectionMarkAttributes("standard"), out bottom_view, out sec);
                        ////bottom_view.Attributes.Scale = current_view.Attributes.Scale;
                        ////bottom_view.Modify();
                        ////ASSEMBLY_DRAWING.CommitChanges();


                        //TSD.FontAttributes FONT = new TSD.FontAttributes();
                        //FONT.Color = TSD.DrawingColors.Magenta;
                        //FONT.Height = Convert.ToInt16(3.96875);



                        //TSD.TextElement textelement2 = new TSD.TextElement(sec.Attributes.MarkName, FONT);
                        //TSD.TextElement textelement3 = new TSD.TextElement("-", FONT);




                        //TSD.ContainerElement sectionmark = new TSD.ContainerElement { textelement2, textelement3, textelement2 };





                        //sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                        //sec.Attributes.TagsAttributes.TagA1 = new TSD.SectionMarkBase.SectionMarkTagAttributes(TSD.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides, TSD.TagLocation.AboveLine, new TSG.Vector(1, 0, 0), TSD.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal, new TSD.ContainerElement { textelement2 });

                        //bottom_view.Attributes.TagsAttributes.TagA1 = new TSD.View.ViewMarkTagAttributes(new TSG.Vector(0, 0, 0), TSD.TagLocation.AboveLine, TSD.TextAlignment.Center, sectionmark);

                        //bottom_view.Attributes.LabelPositionVertical = TSD.View.VerticalLabelPosition.Bottom;

                        //bottom_view.Attributes.MarkSymbolColor = TSD.DrawingColors.Magenta;
                        //sec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;
                        //sec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                        //bottom_view.Attributes.Scale.Equals(current_view.Attributes.Scale);

                        //bottom_view.Modify();
                        //double size = 0;


                        list2[i].myview = bottom_view;
                        sectionmarklist.Add(sec);


                    }
                    catch
                    {
                    }

                }

                else
                {

                    //TSD.SectionMark sec_dummy = null;
                    //sectionmarklist.Add(sec_dummy);
                    //TSD.SectionMark mysec = sectionmarklist[list2[i].index_of_same_sec];

                    //mysec.LeftPoint.X = list2[i].distance;
                    //mysec.RightPoint.X = list2[i].distance;
                    ////mysec.Attributes.LineColor = TSD.DrawingColors.Magenta;
                    ////mysec.Attributes.SymbolColor = TSD.DrawingColors.Magenta;






                    //mysec.Insert();

                }






            }

        }

        public void angle_place_check_for_hole_locking(TSD.PointList my_pt_of_angle, out TSD.PointList rd_point_list, TSM.ModelObjectEnumerator enum_for_bolt, TSD.View current_view, ref List<Guid> PARTMARK_TO_RETAIN, ref List<Guid> POSBOLTMARK_TO_RETAIN, ref  List<Guid> NEGBOLTMARK_TO_RETAIN)
        {
            rd_point_list = new TSD.PointList();

            if ((my_pt_of_angle[0].Y < 0) && (my_pt_of_angle[1].Y < 0))
            {

                while (enum_for_bolt.MoveNext())
                {
                    //TSD.Bolt drgbolt = enum_for_bolt.Current as TSD.Bolt;
                    TSM.BoltGroup drgbolt = enum_for_bolt.Current as TSM.BoltGroup;
                    //TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(drgbolt, current_view);
                    TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(drgbolt, current_view);


                    ///////////////////////////////////////////////////condition for depth adjustment////////////////////////////////////////////////////////////////////////////////////////////
                    //////////////////////////////////////////////////// filtering bolts which lies within the section depth/////////////////////////////////////////////////////////////////////                       
                    double upper_limit = current_view.RestrictionBox.MaxPoint.Z;
                    double lower_limit = current_view.RestrictionBox.MinPoint.Z;
                    if (POINT_FOR_BOLT_MATRIX != null)
                    {
                        if ((POINT_FOR_BOLT_MATRIX[0, 0].Z > lower_limit) && (POINT_FOR_BOLT_MATRIX[0, 0].Z < upper_limit))
                        {
                            int y = POINT_FOR_BOLT_MATRIX.GetLength(0);
                            int x = POINT_FOR_BOLT_MATRIX.GetLength(1);
                            for (int i = 0; i < x; i++)
                            {
                                //////////////////////////////////////////// condition for getting last row of bolts//////////////////////////////////////////////////////////////////////////////////////////////
                                rd_point_list.Add(POINT_FOR_BOLT_MATRIX[0, i]);
                            }
                            if ((POINT_FOR_BOLT_MATRIX[0, 0].X) > 0)
                            {
                                POSBOLTMARK_TO_RETAIN.Add(drgbolt.Identifier.GUID);
                            }
                           else if ((POINT_FOR_BOLT_MATRIX[0, 0].X) < 0)
                            {
                                NEGBOLTMARK_TO_RETAIN.Add(drgbolt.Identifier.GUID);
                            }
                            
                            break;
                        }
                    }
                }
            }
            else
            {

                while (enum_for_bolt.MoveNext())
                {
                    //TSD.Bolt drgbolt = enum_for_bolt.Current as TSD.Bolt;
                    TSM.BoltGroup drgbolt = enum_for_bolt.Current as TSM.BoltGroup;
                    //TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(drgbolt, current_view);
                    TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(drgbolt, current_view);

                    
                    ///////////////////////////////////////////////////condition for depth adjustment////////////////////////////////////////////////////////////////////////////////////////////
                    //////////////////////////////////////////////////// filtering bolts which lies within the section depth/////////////////////////////////////////////////////////////////////                       
                    double upper_limit = current_view.RestrictionBox.MaxPoint.Z;
                    double lower_limit = current_view.RestrictionBox.MinPoint.Z;
                    if (POINT_FOR_BOLT_MATRIX != null)
                    {
                        if ((POINT_FOR_BOLT_MATRIX[0, 0].Z > lower_limit) && (POINT_FOR_BOLT_MATRIX[0, 0].Z < upper_limit))
                        {
                            int y = POINT_FOR_BOLT_MATRIX.GetLength(0);
                            int x = POINT_FOR_BOLT_MATRIX.GetLength(1);
                            for (int i = 0; i < x; i++)
                            {
                                //////////////////////////////////////////// condition for getting last row of bolts//////////////////////////////////////////////////////////////////////////////////////////////
                                rd_point_list.Add(POINT_FOR_BOLT_MATRIX[y - 1, i]);
                            }
                            if ((POINT_FOR_BOLT_MATRIX[0, 0].X) > 0)
                            {
                                POSBOLTMARK_TO_RETAIN.Add(drgbolt.Identifier.GUID);
                            }
                            else if ((POINT_FOR_BOLT_MATRIX[0, 0].X) < 0)
                            {
                                NEGBOLTMARK_TO_RETAIN.Add(drgbolt.Identifier.GUID);
                            }
                        }
                    }
                }
            }


        }


        public void ANGLE_BOLT_DIM(TSD.PointList FINAL_list3x3_positive, TSD.PointList FINAL_list3x3_negative, double height, TSD.View current_view, ArrayList MAINPART_PROFILE_VALUES, double maxx, double minx,string drg_att)
        {
            TSD.StraightDimensionSetHandler dim_3x3 = new TSD.StraightDimensionSetHandler();


            TSD.StraightDimensionSet.StraightDimensionSetAttributes fixed_attributes = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            fixed_attributes.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            fixed_attributes.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    fixed_attributes.Text.Font.Height = 3.571875;
                }
                else
                {
                    fixed_attributes.Text.Font.Height = 3.175;
                }
            } 
            else
            {
                fixed_attributes.Text.Font.Height = 2.38125;


            }

            TSD.PointList FINAL_RD_LIST_within_ht_POS = new TSD.PointList();

            TSD.PointList FINAL_RD_LIST_above_fl_POS = new TSD.PointList();
            TSD.PointList FINAL_RD_LIST_below_fl_POS = new TSD.PointList();


            TSD.PointList FINAL_RD_LIST_within_ht_NEG = new TSD.PointList();

            TSD.PointList FINAL_RD_LIST_above_fl_NEG = new TSD.PointList();
            TSD.PointList FINAL_RD_LIST_below_fl_NEG = new TSD.PointList();

            foreach (TSG.Point PT in FINAL_list3x3_positive)
            {
                if ((Convert.ToInt64(PT.Y) < height) && (Convert.ToInt64(PT.Y) > -height))
                {
                    FINAL_RD_LIST_within_ht_POS.Add(PT);

                }
                else if (Convert.ToInt64(PT.Y) > height)
                {
                    FINAL_RD_LIST_above_fl_POS.Add(PT);

                }
                else if (Convert.ToInt64(PT.Y) < -height)
                {
                    FINAL_RD_LIST_below_fl_POS.Add(PT);

                }
            }
            foreach (TSG.Point PT in FINAL_list3x3_negative)
            {
                if ((Convert.ToInt64(PT.Y) < height) && (Convert.ToInt64(PT.Y) > -height))
                {
                    FINAL_RD_LIST_within_ht_NEG.Add(PT);

                }
                else if (Convert.ToInt64(PT.Y) > height)
                {
                    FINAL_RD_LIST_above_fl_NEG.Add(PT);

                }
                else if (Convert.ToInt64(PT.Y) < -height)
                {
                    FINAL_RD_LIST_below_fl_NEG.Add(PT);

                }
            }


            FINAL_RD_LIST_within_ht_POS.Add(new TSG.Point((Convert.ToDouble(MAINPART_PROFILE_VALUES[1])) / 2, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
            FINAL_RD_LIST_above_fl_POS.Add(new TSG.Point((Convert.ToDouble(MAINPART_PROFILE_VALUES[1])) / 2, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
            FINAL_RD_LIST_below_fl_POS.Add(new TSG.Point((Convert.ToDouble(MAINPART_PROFILE_VALUES[1])) / 2, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));

            TSG.Vector VECTOR1 = new TSG.Vector(1, 0, 0);

            FINAL_RD_LIST_within_ht_NEG.Add(new TSG.Point(-(Convert.ToDouble(MAINPART_PROFILE_VALUES[1])) / 2, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
            FINAL_RD_LIST_above_fl_NEG.Add(new TSG.Point(-(Convert.ToDouble(MAINPART_PROFILE_VALUES[1])) / 2, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));
            FINAL_RD_LIST_below_fl_NEG.Add(new TSG.Point(-(Convert.ToDouble(MAINPART_PROFILE_VALUES[1])) / 2, (Convert.ToDouble(MAINPART_PROFILE_VALUES[0])) / 2, 0));

            TSG.Vector VECTOR2 = new TSG.Vector(-1, 0, 0);





            try
            {
                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_within_ht_POS[0].X) - Math.Abs(maxx));
                dim_3x3.CreateDimensionSet(current_view, FINAL_RD_LIST_within_ht_POS, VECTOR1, distance1 + 75, fixed_attributes);

            }
            catch
            {
            }

            try
            {
                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_within_ht_NEG[0].X) - Math.Abs(minx));
                dim_3x3.CreateDimensionSet(current_view, FINAL_RD_LIST_within_ht_NEG, VECTOR2, distance1 + 75, fixed_attributes);

            }
            catch
            {
            }

            try
            {

                if (FINAL_RD_LIST_above_fl_POS.Count > 2)
                {

                    double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_above_fl_POS[0].X) - Math.Abs(maxx));
                    dim_3x3.CreateDimensionSet(current_view, FINAL_RD_LIST_above_fl_POS, VECTOR1, distance1 + 75, fixed_attributes);
                }
                else
                {
                    TSD.PointList FINAL_RD_LIST_above_fl_POS_duplicate = new TSD.PointList();
                    FINAL_RD_LIST_above_fl_POS_duplicate.Add(FINAL_RD_LIST_above_fl_POS[1]);
                    FINAL_RD_LIST_above_fl_POS_duplicate.Add(FINAL_RD_LIST_above_fl_POS[0]);
                    double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_above_fl_POS[0].X) - Math.Abs(maxx));
                    dim_3x3.CreateDimensionSet(current_view, FINAL_RD_LIST_above_fl_POS_duplicate, VECTOR1, distance1 + 75, fixed_attributes);

                }

            }
            catch
            {
            }

            try
            {
                if (FINAL_RD_LIST_above_fl_NEG.Count > 2)
                {
                    double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_above_fl_NEG[0].X) - Math.Abs(minx));
                    dim_3x3.CreateDimensionSet(current_view, FINAL_RD_LIST_above_fl_NEG, VECTOR2, distance1 + 75, fixed_attributes);
                }
                else
                {
                    TSD.PointList FINAL_RD_LIST_above_fl_NEG_duplicate = new TSD.PointList();
                    FINAL_RD_LIST_above_fl_NEG_duplicate.Add(FINAL_RD_LIST_above_fl_NEG[1]);
                    FINAL_RD_LIST_above_fl_NEG_duplicate.Add(FINAL_RD_LIST_above_fl_NEG[0]);
                    double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_above_fl_NEG[0].X) - Math.Abs(minx));
                    dim_3x3.CreateDimensionSet(current_view, FINAL_RD_LIST_above_fl_NEG_duplicate, VECTOR2, distance1 + 75, fixed_attributes);

                }



            }
            catch
            {
            }
            try
            {
                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_below_fl_POS[0].X) - Math.Abs(maxx));
                dim_3x3.CreateDimensionSet(current_view, FINAL_RD_LIST_below_fl_POS, VECTOR1, distance1 + 150, fixed_attributes);

            }
            catch
            {
            }

            try
            {
                double distance1 = Math.Abs(Math.Abs(FINAL_RD_LIST_below_fl_NEG[0].X) - Math.Abs(minx));
                dim_3x3.CreateDimensionSet(current_view, FINAL_RD_LIST_below_fl_NEG, VECTOR2, distance1 + 150, fixed_attributes);

            }
            catch
            {
            }





        }
        public void arrange_parts_for_bottom_view(TSD.View current_view, List<TSM.Part> list)
        {
            Type[] type_for_mark = new Type[] { typeof(TSD.Mark), typeof(TSD.WeldMark) };
            TSD.DrawingObjectEnumerator enum_for_mark = current_view.GetAllObjects(type_for_mark);
            List<int> list_of_id = new List<int>();
            foreach (TSM.Part id_for_part in list)
            {
                list_of_id.Add(id_for_part.Identifier.ID);

            }


            while (enum_for_mark.MoveNext())
            {
                var mark = enum_for_mark.Current;

                if (mark.GetType().Equals(typeof(TSD.Mark)))
                {
                    TSD.Mark mymark = mark as TSD.Mark;

                    TSD.DrawingObjectEnumerator enumcheck = mymark.GetRelatedObjects();

                    while (enumcheck.MoveNext())
                    {
                        var mark_part = enumcheck.Current;
                        if (mark_part.GetType().Equals(typeof(TSD.Part)))
                        {
                            TSM.Part modelpart = new TSM.Model().SelectModelObject((mark_part as TSD.Part).ModelIdentifier) as TSM.Part;

                            Guid guid = modelpart.Identifier.GUID;

                            bool part_to_retain = list_of_id.Contains(modelpart.Identifier.ID);

                            if (part_to_retain == true)
                            {
                            }
                            else
                            {
                                mymark.Delete();
                            }


                        }



                    }
                }


                else if (mark.GetType().Equals(typeof(TSD.WeldMark)))
                {
                    TSD.WeldMark weldmark = mark as TSD.WeldMark;




                    {
                        //TSD.DrawingObjectEnumerator enumcheck1 = weldmark.GetObjects();
                        Identifier id = weldmark.ModelIdentifier;
                        TSM.BaseWeld weld = (new TSM.Model().SelectModelObject(id) as TSM.BaseWeld);
                        TSM.Part mainpart = (weld.MainObject as TSM.Part);
                        TSM.Part secondary_part = (weld.SecondaryObject as TSM.Part);

                        //if ((list[i].Identifier.ID == mainpart.Identifier.ID) || ((list[i].Identifier.ID == secondary_part.Identifier.ID)))
                        //{

                        //}
                        //else
                        //{
                        //    weldmark.Delete();
                        //}

                    }

                }
            }


        }

        public class WELD_MERGE_CLASS
        {
            public TSD.WeldMark LIST_OF_WELD;
            public Guid PART_GUID;
        }



        public void view_placement(TSD.Drawing beam_assembly_drg, string drg_att, TSG.Point start_pt_for_section_view_aling, List<TSD.View> bottom_view_list, List<TSD.View> sectionviews_in_drawing,List<TSD.View> bottom_flange_cut_list, List<TSD.View> top_flange_cut_list)
        {
            //BOM_DETAILS.BOM_DETAILS bom = new BOM_DETAILS.BOM_DETAILS();
            //bom.constantRowHeight = .5;
            //bom.variableRowHeight 
           
            TSG.Point rbb_lower_left = new TSG.Point();
            TSG.Point rbb_lower_right = new TSG.Point();
            List<TSD.View> top_front = new List<TSD.View>();
            List<TSD.View> ALL_VIEWS = new List<TSD.View>();
            TSD.DrawingObjectEnumerator RBB_FOR_FRONT_VIEW = beam_assembly_drg.GetSheet().GetAllViews();

            while (RBB_FOR_FRONT_VIEW.MoveNext())
            {
                TSD.View MYVIEW = RBB_FOR_FRONT_VIEW.Current as TSD.View;
                if (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                {

                    top_front.Add(MYVIEW);
                }
                else if (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.TopView))
                {
                    top_front.Add(MYVIEW);
                }
                ALL_VIEWS.Add(MYVIEW);

            }
            TSG.Point p_1 = new TSG.Point();

            for (int I = 0; I < top_front.Count; I++)
            {


                if (drg_att == "SK_BEAM_A3")
                {
                    if (ALL_VIEWS.Count < 2)
                    {
                        p_1 = new TSG.Point(35, -15, 0);
                    }
                    else
                    {
                        p_1 = new TSG.Point(0, -15, 0);
                    }
                }
                else if (drg_att == "SK_BEAM_A2")
                {
                    p_1 = new TSG.Point(35, -15, 0);
                    //p_1 = new TSG.Point(50, -75, 0);
                }
                else if (drg_att == "SK_BEAM_A1")
                {
                    //p_1 = new TSG.Point(50, -75, 0);
                }


                top_front[I].Modify();
                TSD.RectangleBoundingBox RBB = top_front[I].GetAxisAlignedBoundingBox();
                TSG.Point origin = top_front[I].Origin;
                TSG.Point RBB_lower_left = RBB.LowerLeft;
                TSG.Point RBB_lower_right = RBB.LowerRight;
                TSG.Vector REF_VECTOR = new TSG.Vector(top_front[I].Origin - RBB.UpperLeft);


                TSG.Point origin_point_for_front = origin + p_1;
                TSG.Point P3 = origin_point_for_front;
                top_front[I].Origin = P3;
                top_front[I].Modify();


            }
            RBB_FOR_FRONT_VIEW.Reset();

            while (RBB_FOR_FRONT_VIEW.MoveNext())
            {
                TSD.View MYVIEW = RBB_FOR_FRONT_VIEW.Current as TSD.View;
                if (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                {
                    MYVIEW.Modify();
                    TSD.RectangleBoundingBox RBB = MYVIEW.GetAxisAlignedBoundingBox();

                    TSG.Point P1 = RBB.UpperRight;
                    TSG.Point P2 = RBB.LowerLeft;
                    rbb_lower_left = RBB.LowerLeft;
                    rbb_lower_right = RBB.LowerRight;

                    start_pt_for_section_view_aling = P2;
                    top_front.Add(MYVIEW);
                }

            }
            double length1 = TSG.Distance.PointToPoint(rbb_lower_left, rbb_lower_right);

            for (int I = 0; I < bottom_view_list.Count; I++)
            {
                bottom_view_list[I].Modify();
                TSD.RectangleBoundingBox RBB = bottom_view_list[I].GetAxisAlignedBoundingBox();
                TSG.Point RBB_lower_left = RBB.LowerLeft;
                TSG.Point RBB_lower_right = RBB.LowerRight;
                double length2 = TSG.Distance.PointToPoint(RBB_lower_left, RBB_lower_right);
                double difference = length1 - length2;
                TSG.Vector REF_VECTOR = new TSG.Vector(bottom_view_list[I].Origin - RBB.UpperLeft);
                TSG.Point P3 = start_pt_for_section_view_aling + REF_VECTOR;
                bottom_view_list[I].Origin = P3;
                bottom_view_list[I].Modify();
                bottom_view_list[I].Origin = P3 + new TSG.Point(difference / 2, 0, 0);
                bottom_view_list[I].Modify();
                TSD.RectangleBoundingBox RBB1 = bottom_view_list[I].GetAxisAlignedBoundingBox();
                start_pt_for_section_view_aling = RBB1.LowerLeft;

            }
            List<TSD.View> all_sectionviews_in_drawing = new List<TSD.View>();
            all_sectionviews_in_drawing = sectionviews_in_drawing;
            foreach (TSD.View my_view in bottom_flange_cut_list)
            {
                all_sectionviews_in_drawing.Add(my_view);

            }
            foreach (TSD.View my_view in top_flange_cut_list)
            {
                all_sectionviews_in_drawing.Add(my_view);

            }

            ArrayList HEIGHT_TO_FIX = new ArrayList();

            foreach (TSD.View MYVIEW in all_sectionviews_in_drawing)
            {
                MYVIEW.Modify();
                TSD.RectangleBoundingBox RBB = MYVIEW.GetAxisAlignedBoundingBox();
                HEIGHT_TO_FIX.Add(RBB.Height);
            }
            HEIGHT_TO_FIX.Sort();
            double HEIGHT = 0;
            if (HEIGHT_TO_FIX.Count > 0)
            {
                 HEIGHT = Convert.ToDouble(HEIGHT_TO_FIX[HEIGHT_TO_FIX.Count - 1]);
            }

            for (int I = 0; I < all_sectionviews_in_drawing.Count; I++)
            {
                if (all_sectionviews_in_drawing[I] == all_sectionviews_in_drawing.First<TSD.ViewBase>())
                {
                    all_sectionviews_in_drawing[I].Modify();
                    TSD.RectangleBoundingBox RBB = all_sectionviews_in_drawing[I].GetAxisAlignedBoundingBox();
                    TSG.Vector REF_VECTOR = new TSG.Vector(all_sectionviews_in_drawing[I].Origin - RBB.LowerLeft);

                    //TSG.Point TEST = new TSG.Point(start_pt_for_section_view_aling.X, start_pt_for_section_view_aling.Y + HEIGHT, start_pt_for_section_view_aling.Z);

                    TSG.Point P3 = start_pt_for_section_view_aling + REF_VECTOR;
                    all_sectionviews_in_drawing[I].Origin = P3-new TSG.Point(0,HEIGHT,0) ;
                    all_sectionviews_in_drawing[I].Modify();
                }
                else
                {
                    all_sectionviews_in_drawing[I].Modify();
                    TSD.RectangleBoundingBox RBB = all_sectionviews_in_drawing[I].GetAxisAlignedBoundingBox();
                    TSD.RectangleBoundingBox PREVIOUS_RBB = all_sectionviews_in_drawing[I - 1].GetAxisAlignedBoundingBox();
                    TSG.Vector REF_VECTOR = new TSG.Vector(all_sectionviews_in_drawing[I].Origin - RBB.LowerLeft);
                    start_pt_for_section_view_aling = PREVIOUS_RBB.LowerRight;
                    TSG.Point P3 = start_pt_for_section_view_aling + REF_VECTOR;
                    all_sectionviews_in_drawing[I].Origin = P3;
                    all_sectionviews_in_drawing[I].Modify();
                }

            }

        }

        public void weld_merge(TSD.AssemblyDrawing beam_assembly_drg, TSM.Part main, TSD.DrawingHandler my_handler)
        {
            Type type_for_WELD = typeof(TSD.WeldMark);
            TSD.DrawingObjectEnumerator WELD_MARK_ENUM = beam_assembly_drg.GetSheet().GetAllViews();
            while (WELD_MARK_ENUM.MoveNext())
            {
                List<WELD_MERGE_CLASS> WELD_CLAS = new List<WELD_MERGE_CLASS>();
                TSD.View MYVIEW = WELD_MARK_ENUM.Current as TSD.View;

                if ((MYVIEW.ViewType.Equals(TSD.View.ViewTypes.SectionView)) || (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.FrontView)))
                {
                    TSD.DrawingObjectEnumerator my_top_view_dimension_check = MYVIEW.GetAllObjects(type_for_WELD);
                    while (my_top_view_dimension_check.MoveNext())
                    {
                        TSD.WeldMark weldmark = my_top_view_dimension_check.Current as TSD.WeldMark;
                        //List<TSM.Part> list_of_parts = new List<TSM.Part>();
                        //TSD.WeldMark weldmark = mark as TSD.WeldMark;
                        Identifier id = weldmark.ModelIdentifier;
                        TSM.BaseWeld weld = (new TSM.Model().SelectModelObject(id) as TSM.BaseWeld);
                        TSM.Part WELD_MAIN_part = weld.MainObject as TSM.Part;
                        TSM.Part WELD_secondary_part = weld.SecondaryObject as TSM.Part;
                        Guid GUID_FOR_MAINPART = main.Identifier.GUID;

                        if (!WELD_MAIN_part.Identifier.GUID.Equals(GUID_FOR_MAINPART))
                        {
                            WELD_CLAS.Add(new WELD_MERGE_CLASS { LIST_OF_WELD = weldmark, PART_GUID = WELD_MAIN_part.Identifier.GUID });
                        }
                        else if (!WELD_secondary_part.Identifier.GUID.Equals(GUID_FOR_MAINPART))
                        {
                            WELD_CLAS.Add(new WELD_MERGE_CLASS { LIST_OF_WELD = weldmark, PART_GUID = WELD_secondary_part.Identifier.GUID });

                        }
                    }


                    var GROUPED_WELD_MARK = WELD_CLAS.GroupBy(X => X.PART_GUID);


                    foreach (var WELD_GROUP in GROUPED_WELD_MARK)
                    {
                        ArrayList mergeWelds = new ArrayList();

                        foreach (WELD_MERGE_CLASS NAME in WELD_GROUP)
                        {
                            mergeWelds.Add(NAME.LIST_OF_WELD);
                        }




                        my_handler.GetDrawingObjectSelector().SelectObjects(mergeWelds, true);
                        my_handler.GetDrawingObjectSelector().SelectObjects(mergeWelds, true);
                        Tekla.Structures.Model.Operations.Operation.RunMacro(@"..\drawings\acmdMergeSelectedMarks.cs");
                        my_handler.GetDrawingObjectSelector().UnselectAllObjects();
                        my_handler.GetDrawingObjectSelector().UnselectAllObjects();

                    }
                    beam_assembly_drg.CommitChanges();
                }



            }

            if (cmbclient.Text == "SME")
            {
                WELD_MARK_ENUM.Reset();
                while (WELD_MARK_ENUM.MoveNext())
                {
                    TSD.View MYVIEW = WELD_MARK_ENUM.Current as TSD.View;
                    TSD.DrawingObjectEnumerator my_top_view_dimension_check = MYVIEW.GetAllObjects(type_for_WELD);
                    while (my_top_view_dimension_check.MoveNext())
                    {
                        TSD.WeldMark weldMark = my_top_view_dimension_check.Current as TSD.WeldMark;
                        if (weldMark != null)
                        {
                            weldMark.Attributes.Font.Color = DrawingColors.Gray70;
                            weldMark.Modify();
                            MYVIEW.Modify();
                        }
                    }
                }       
            }

        }
        public void PART_MARK_FREE_FIX(TSD.AssemblyDrawing beam_assembly_drg, TSM.Part main, TSD.DrawingHandler my_handler)
        {

            TSD.DrawingObjectEnumerator WELD_MARK_ENUM = beam_assembly_drg.GetSheet().GetAllViews();
            while (WELD_MARK_ENUM.MoveNext())
            {
                List<WELD_MERGE_CLASS> WELD_CLAS = new List<WELD_MERGE_CLASS>();
                Type type_for_PART_MARK = typeof(TSD.Mark);
                TSD.View MYVIEW = WELD_MARK_ENUM.Current as TSD.View;
                TSD.DrawingObjectEnumerator my_top_view_dimension_check = MYVIEW.GetAllObjects(type_for_PART_MARK);

                while (my_top_view_dimension_check.MoveNext())
                {
                    TSD.Mark PARTmark = my_top_view_dimension_check.Current as TSD.Mark;
                    my_handler.GetDrawingObjectSelector().SelectObject(PARTmark);
                    Tekla.Structures.Model.Operations.Operation.RunMacro(@"..\drawings\ReFreeplaceSelected.cs");
                    my_handler.GetDrawingObjectSelector().UnselectAllObjects();


                    beam_assembly_drg.CommitChanges();
                }
            }
        }
        public void centre_line(TSD.AssemblyDrawing beam_assembly_drg, TSM.Part main_part)
        {

            Type type_for_part = typeof(TSD.Part);
            TSD.DrawingObjectEnumerator MYDRG_VIEWS = beam_assembly_drg.GetSheet().GetAllViews();
            while (MYDRG_VIEWS.MoveNext())
            {
                TSD.View MYVIEW = MYDRG_VIEWS.Current as TSD.View;
                if (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.TopView))
                {
                    TSD.DrawingObjectEnumerator MYPARTENUM = MYVIEW.GetAllObjects(type_for_part);
                    while (MYPARTENUM.MoveNext())
                    {
                        TSD.Part MYPART = MYPARTENUM.Current as TSD.Part;
                        TSM.ModelObject modelPART = new TSM.Model().SelectModelObject(MYPART.ModelIdentifier);
                        TSM.Part PART = modelPART as TSM.Part;
                        if (PART.Identifier.GUID.Equals(main_part.Identifier.GUID))
                        {


                            MYPART.Attributes.DrawCenterLine = true;
                            MYPART.Attributes.SymbolOffset = 0; 
                            MYPART.Modify();
                            MYVIEW.Modify();
                            beam_assembly_drg.CommitChanges();

                        }
                    }
                }
                else if (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.FrontView))
                {
                    TSD.DrawingObjectEnumerator MYPARTENUM = MYVIEW.GetAllObjects(type_for_part);
                    while (MYPARTENUM.MoveNext())
                    {
                        TSD.Part MYPART = MYPARTENUM.Current as TSD.Part;
                        TSM.ModelObject modelPART = new TSM.Model().SelectModelObject(MYPART.ModelIdentifier);
                        TSM.Part PART = modelPART as TSM.Part;
                        if (PART.Identifier.GUID.Equals(main_part.Identifier.GUID))
                        {
                            string prof_typ = "";
                            main_part.GetReportProperty("PROFILE_TYPE", ref prof_typ);
                            if ((prof_typ != "I") && (prof_typ != "U"))
                            {

                                MYPART.Attributes.DrawCenterLine = true;
                                MYPART.Attributes.SymbolOffset = 0;
                                MYPART.Modify();
                                MYVIEW.Modify();
                            }
                            else if ((prof_typ == "U")&&(!PART.Name.Contains("BEAM")))
                            {
                                MYPART.Attributes.DrawOrientationMark = false;
                                MYPART.Modify();

                            }


                        }
                    }
                }
                else
                {




                }

            }
        }
        public void delete_sec_view_same_dims(AssemblyDrawing assemblyDrawing,TSD.DrawingHandler my_handler)
        {
            TSD.DrawingObjectEnumerator drawingObjectEnumerator = assemblyDrawing.GetSheet().GetAllViews();
            while(drawingObjectEnumerator.MoveNext())
            {
                TSD.View view = drawingObjectEnumerator.Current as TSD.View;
                if(view.ViewType== TSD.View.ViewTypes.SectionView)
                {
                    Type type_for_dimension = typeof(TSD.StraightDimension);
                    ArrayList dim_list = new ArrayList();
                    ArrayList Dims_to_be_deleted = new ArrayList();
                    TSD.DrawingObjectEnumerator dimensions = view.GetAllObjects(type_for_dimension);
                    
                    while (dimensions.MoveNext())
                    {
                        StraightDimension straightDimension = dimensions.Current as StraightDimension;

                        if (dim_list.Count == 0)
                        {
                            dim_list.Add(straightDimension);
                        }
                        else
                        {
                            bool found = false;
                            foreach (StraightDimension temp_dimension in dim_list)
                            {
                                double vect_x_diff = temp_dimension.UpDirection.X - straightDimension.UpDirection.X;
                                double vect_y_diff = temp_dimension.UpDirection.Y - straightDimension.UpDirection.Y;
                                double vect_z_diff = temp_dimension.UpDirection.Z - straightDimension.UpDirection.Z;
                                double start_X_diff = Math.Abs(Math.Round(temp_dimension.StartPoint.X, 2) - Math.Round(straightDimension.StartPoint.X, 2));
                                double start_Y_diff = Math.Abs(Math.Round(temp_dimension.StartPoint.Y, 2) - Math.Round(straightDimension.StartPoint.Y, 2));
                                double end_X_diff = Math.Abs(Math.Round(temp_dimension.EndPoint.X, 2) - Math.Round(straightDimension.EndPoint.X, 2));
                                double end_Y_diff = Math.Abs(Math.Round(temp_dimension.EndPoint.Y, 2) - Math.Round(straightDimension.EndPoint.Y, 2));
                                if(vect_x_diff==0 && vect_y_diff==0 && vect_z_diff==0 && start_X_diff<=0.5 && start_Y_diff<=0.5 && end_X_diff<=0.5 && end_Y_diff<=0.5)
                                {
                                    found = true;
                                    Dims_to_be_deleted.Add(straightDimension);
                                    break;
                                }
                            }
                            if(found==false)
                            {
                                dim_list.Add(straightDimension);
                            }
                        }
                    }
                    my_handler.GetDrawingObjectSelector().SelectObjects(Dims_to_be_deleted, true);
                    view.Modify();
                    assemblyDrawing.CommitChanges();
                    Tekla.Structures.Model.Operations.Operation.RunMacro(@"..\drawings\acmd_delete_selected_dr.cs");
                    my_handler.GetDrawingObjectSelector().UnselectAllObjects();
                    view.Modify();
                }
            }
            assemblyDrawing.CommitChanges();

        }
        public void top_view_check_for_dim(TSD.AssemblyDrawing beam_assembly_drg, string TOP_VIEW_needed)
        {
            TSD.DrawingObjectEnumerator MYDRG_VIEWS_for_top_view_delete = beam_assembly_drg.GetSheet().GetAllViews();
            while (MYDRG_VIEWS_for_top_view_delete.MoveNext())
            {
                Type type_for_dim = typeof(TSD.DimensionBase);
                TSD.View MYVIEW = MYDRG_VIEWS_for_top_view_delete.Current as TSD.View;
                if (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.TopView))
                {
                    TSD.DrawingObjectEnumerator my_top_view_dimension_check = MYVIEW.GetAllObjects(type_for_dim);
                    int size_for_dim_check = 0;
                    size_for_dim_check = my_top_view_dimension_check.GetSize();
                    if (size_for_dim_check > 0)
                    {

                    }
                    else if (TOP_VIEW_needed == "yes")
                    {
                    }
                    //else if (farside_parts.Count > 0)
                    //{
                    //}
                    else
                    {
                        if(cmbclient.Text == "SME")
                        {
                            DrawingObjectEnumerator drawingObjects = MYVIEW.GetAllObjects(typeof(Tekla.Structures.Drawing.Mark));                                                                                                                                                                                                                                                   
                            while(drawingObjects.MoveNext())
                            {
                                drawingObjects.Current.Delete();
                            }
                        }
                        else
                        {
                            MYVIEW.Delete();
                        }
                            
                    }

                }



            }
        }


        public void SECTION_VIEW_PART_MARK_DELETE(TSD.View current_view, TSD.DrawingHandler my_handler)
        {
            ArrayList PART_MARK_TO_DELETE = new ArrayList();
          
                Type type_for_MARK = typeof(TSD.Mark);
                TSD.View MYVIEW = current_view;

                if (MYVIEW.ViewType.Equals(TSD.View.ViewTypes.SectionView))
                {

                    TSD.DrawingObjectEnumerator my_top_view_dimension_check = MYVIEW.GetAllObjects(type_for_MARK);
                    while (my_top_view_dimension_check.MoveNext())
                    {

                        TSD.Mark MYMARK = my_top_view_dimension_check.Current as TSD.Mark;


                        PART_MARK_TO_DELETE.Add(MYMARK);

                    }
                    
                }
                my_handler.GetDrawingObjectSelector().SelectObjects(PART_MARK_TO_DELETE, true);
                Tekla.Structures.Model.Operations.Operation.RunMacro(@"..\drawings\acmd_delete_selected_dr.cs");
                my_handler.GetDrawingObjectSelector().UnselectAllObjects();
        }

        public void partmark_for_bolt_dim_attachments(TSD.View current_view,ref List<Guid> PARTMARK_TO_RETAIN)
        {
            Type type_for_part = typeof(TSD.Part);
             TSD.DrawingObjectEnumerator enum_part_REMOVE_DUPLICATE_MARKS = current_view.GetAllObjects(type_for_part);
             while (enum_part_REMOVE_DUPLICATE_MARKS.MoveNext())
             {
                 TSD.Part part_drg = enum_part_REMOVE_DUPLICATE_MARKS.Current as TSD.Part;
                 TSM.Part part_model = new TSM.Model().SelectModelObject(part_drg.ModelIdentifier) as TSM.Part;

                     string PARTMARK = get_report_properties(part_model, "PART_POS");
                     TSM.ModelObjectEnumerator enum_for_bolt1 = part_model.GetBolts();
                     while (enum_for_bolt1.MoveNext())
                     {

                        

                         TSM.BoltGroup drgbolt = enum_for_bolt1.Current as TSM.BoltGroup;
                         TSG.Point[,] POINT_FOR_BOLT_MATRIX = Get_Bolt_properties_matrix_input_as_modelobject(drgbolt, current_view);
                           
                             if (POINT_FOR_BOLT_MATRIX != null)
                             {
                                 PARTMARK_TO_RETAIN.Add(part_model.Identifier.GUID);

                             }

                        
                     }
              
             }
        }

        public TSD.PointList PT_LIST_FOR_LAST_BOLT(TSD.PointList MYPT_LIST)
        {
            TSD.PointList FINAL_RD_LIST = sorting_points_by_x_asc(MYPT_LIST);
            FINAL_RD_LIST.RemoveAt(0);
            TSD.PointList LAST_BOLT = new TSD.PointList();
            for (int I = 0; I < FINAL_RD_LIST.Count; I++)
            {
                int A = FINAL_RD_LIST.Count;
                int B = I+1;
                if(A>B)
                {

                long X = Convert.ToInt64( FINAL_RD_LIST[I + 1].X);
                long X1 = Convert.ToInt64(FINAL_RD_LIST[I].X);
                long DIFFERENCE = X - X1;
                if (DIFFERENCE < 150)
                {

                    LAST_BOLT.Add(FINAL_RD_LIST[I + 1]);
                }

                }

            }
            return (LAST_BOLT);
        }
        public class DIMENSION_WITH_DIFFERNCE
        {
            public TSD.StraightDimension MTDIM;
            public double DIFFER;
            public TSG.Vector MYVECTOR;

        }
        public bool KNOCKOFF_DIM(TSD.StraightDimension MYDIM)
        {
            bool RESULT = false;
           
               

                TSD.ContainerElement dimval = MYDIM.Value;



                IEnumerator check1 = dimval.GetEnumerator();

                List<string> list_of_texts = new List<string>();
                while (check1.MoveNext())
                {
                    var name = check1.Current;
                    if (name.GetType().Equals(typeof(TSD.TextElement)))
                    {
                        TSD.TextElement check2 = check1.Current as TSD.TextElement;
                        string value = check2.Value;

                        list_of_texts.Add(value);


                    }
                }

                

                bool checkFOR_BRACKET = list_of_texts.Any(x => x.Contains("("));
               
                    if (checkFOR_BRACKET == true)
                    {
                        RESULT = true;
                    }
                    else
                    {
                        RESULT = false;
                    }
                




            
            return RESULT;


        }
        public class attachments
        {
            
            
        }
        public class sort_by_y_value_asc : IComparer<TSG.Point>
        {
            public int Compare( TSG.Point a, TSG.Point b)
            {
                if (a.Y > b.Y)
                {
                    return 1;
                }
                if (a.Y < b.Y)
                {
                    return -1;
                }
                else
                {
                    return 0;
                }
            }
        }
        public class sort_by_x_value_max : IComparer<TSG.Point>
        {
            public int Compare(TSG.Point a, TSG.Point b)
            {
                if (a.X > b.X)
                {
                    return 1;
                }
                if (a.X < b.X)
                {
                    return -1;
                }
                else
                {
                    return 0;
                }
            }
        }
        public class sort_by_x_value_min : IComparer<TSG.Point>
        {
            public int Compare(TSG.Point a, TSG.Point b)
            {


                if (a.X < b.X)
                {
                    return 1;
                }
                if (a.X > b.X)
                {
                    return -1;
                }
                else
                {
                    return 0;
                }
            }
        }

        public class sort_by_x_value_DOUBLE : IComparer<double>
        {
            public int Compare(double a, double b)
            {


                if (a < b)
                {
                    return 1;
                }
                if (a > b)
                {
                    return -1;
                }
                else
                {
                    return 0;
                }
            }
        }

        public List<TSG.Point> mypoint_for_bolt_skew(TSM.Part plate, TSD.View current_view, out TSG.Vector zaxis)
        {
            zaxis = new TSG.Vector();
            List<TSG.Point> BOLT_PTLIST = new List<TSG.Point>();
           
            TSM.Model mymodel = new TSM.Model();
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
         
            TSG.Matrix to_view_matrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
           TSM.ModelObjectEnumerator bolt_enum = plate.GetBolts();
           TSG.Point bolt_point = new TSG.Point();
           while (bolt_enum.MoveNext())
           {


               TSM.BoltGroup boltgrp = bolt_enum.Current as TSM.BoltGroup;

               mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
               mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.DisplayCoordinateSystem));
               TSG.CoordinateSystem boltcheck = boltgrp.GetCoordinateSystem();
               TSG.Vector xaxis = boltcheck.AxisX;
               TSG.Vector yaxis = boltcheck.AxisY;
                zaxis = yaxis.Cross(xaxis);
              

               mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

               foreach (TSG.Point PT in boltgrp.BoltPositions)
               {
                   bolt_point = to_view_matrix.Transform(PT);
                   BOLT_PTLIST.Add(bolt_point);
               }

           
            
           }
           return BOLT_PTLIST;


          

 
        }
        public TSG.Point mypoint_for_bolt_skew1(TSM.Part plate, TSD.View current_view)
        {
           

            TSM.Model mymodel = new TSM.Model();
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            //mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(plate.GetCoordinateSystem()));
            ////mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
            TSG.Matrix to_view_matrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            TSM.ModelObjectEnumerator bolt_enum = plate.GetBolts();
            TSG.Point bolt_point = new TSG.Point();
            while (bolt_enum.MoveNext())
            {
                TSM.BoltGroup mybolt = bolt_enum.Current as TSM.BoltGroup;
                bolt_point = to_view_matrix.Transform((mybolt.BoltPositions[0] as TSG.Point));
           
            }
            return bolt_point;





        }
        public TSG.Vector vector_for_slope(TSM.BoltGroup mybolt_group, TSD.View current_view)
        {
            TSG.Vector myvector = new TSG.Vector();

            TSM.Model mymodel = new TSM.Model();
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));
            TSG.CoordinateSystem bolt_coord_in_view = mybolt_group.GetCoordinateSystem();
            long x_axis_x = Convert.ToInt64(bolt_coord_in_view.AxisX.X);
            long x_axis_y = Convert.ToInt64(bolt_coord_in_view.AxisX.Y);
            bool resultfor_xvlue = x_axis_x > 0;
            bool resultfor_ylue = x_axis_y > 0;
            if ((resultfor_xvlue == true) && (resultfor_ylue == true))
            {
                ////////////first_quadrant////////////////
                myvector = bolt_coord_in_view.AxisX;
            }
            else if ((resultfor_xvlue == false) && (resultfor_ylue == true))
            {
                ////////////second_quadrant////////////////
                myvector = bolt_coord_in_view.AxisX;

            }
            else if ((resultfor_xvlue == false) && (resultfor_ylue == false))
            {
                ////////////third_quadrant////////////////
                myvector = bolt_coord_in_view.AxisY;

            }
            else
            {
                ////////////fourth_quadrant////////////////
                myvector = bolt_coord_in_view.AxisY;
            }
            return myvector;
        }
        public class slope_bolt_class
        {
            public TSG.Point original_pt;
            public TSG.Point converted_pts;
            public double  x_dist_of_rotated;
            public int value;
            public List<TSG.Point> mypoint_list_original;
        }

        public void slope_bolt_logic(List<TSG.Point> singlebolts1, TSG.Matrix to_rotate_matrix, TSD.View current_view, double output, ArrayList MAINPART_PROFILE_VALUES, TSG.Vector myvector_for_slope_bolt, TSG.Vector yvector_for_slope_bolt,string drg_att)
        {
            double angle_check_FOR_NOT_IN_VIEW = Math.Abs(RadianToDegree((myvector_for_slope_bolt.GetAngleBetween(new TSG.Vector(1, 0, 0)))));
            TSG.Matrix to_rotate = new TSG.Matrix();
            int a = 1;
            if (Convert.ToInt64(myvector_for_slope_bolt.X) > 0)
            {
                a = -1;
            }
            int b = 1;
            if (Convert.ToInt64(yvector_for_slope_bolt.Y) > 0)
            {
                b = -1;
            }
            double view_scale = current_view.Attributes.Scale;
            TSD.StraightDimensionSetHandler bolt_combine_dim = new TSD.StraightDimensionSetHandler();
            TSD.StraightDimensionSet.StraightDimensionSetAttributes fixed_attributes = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            fixed_attributes.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            fixed_attributes.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    fixed_attributes.Text.Font.Height = 3.571875;
                }
                else
                {
                    fixed_attributes.Text.Font.Height = 3.175;
                }
            }
            else
            {
                fixed_attributes.Text.Font.Height = 2.38125;
            }

            singlebolts1.Sort(new sort_by_x_value_max());
            List<slope_bolt_class> myclass = new List<slope_bolt_class>();
            foreach (TSG.Point pt in singlebolts1)
            {
                TSG.Point myconverted_pt = to_rotate_matrix.Transform(pt);
                double x_value_rotated = Convert.ToInt64(myconverted_pt.X);
                myclass.Add(new slope_bolt_class { converted_pts = myconverted_pt, original_pt = pt, x_dist_of_rotated = Math.Abs(x_value_rotated) });
            }
            int increment_for_grouping1 = 1;
            for (int i = 0; i < myclass.Count - 1; i++)
            {
                int current = i;
                int next = i + 1;
                long x_current = Convert.ToInt64(myclass[current].converted_pts.X);
                long x_next = Convert.ToInt64(myclass[next].converted_pts.X);
                double difference = x_next - x_current;
                if (difference < 150)
                {
                    myclass[i].value = increment_for_grouping1;
                    if (next == myclass.Count - 1)
                    {
                        myclass[i + 1].value = increment_for_grouping1;
                    }
                }
                else
                {
                    myclass[i].value = increment_for_grouping1;
                    increment_for_grouping1++;
                    if (next == myclass.Count - 1)
                    {
                        myclass[i + 1].value = increment_for_grouping1;
                    }
                }
            }
            var groupedbolts = (from x_value in myclass
                                group x_value by x_value.x_dist_of_rotated into newlist
                                orderby newlist.Key ascending
                                select new
                                {
                                    x_dist = newlist.Key,
                                    point_in_group = (newlist.OrderBy(y => y.converted_pts.Y).ToList())
                                }).ToList();

            TSD.AngleDimensionAttributes myangle_att = new TSD.AngleDimensionAttributes();
            myangle_att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    myangle_att.Text.Font.Height = 3.571875;
                }
                else
                {
                    myangle_att.Text.Font.Height = 3.175;
                }
            }
            else
            {
                myangle_att.Text.Font.Height = 2.38125;


            }


            double distance_for_bolt_dim = 0;
            if (groupedbolts.Count > 1)
            {
                if (groupedbolts[0].x_dist < 150)
                {
                    double REST_BOX_MIN = Math.Abs(current_view.RestrictionBox.MinPoint.X);

                    distance_for_bolt_dim = groupedbolts[0].x_dist + REST_BOX_MIN + 85;
                }
                else
                {
                    distance_for_bolt_dim = 30;
                }
            }

            int h = 1;
            TSD.PointList ptlist_for_boltdim_TO_CHECK_THE_DISTANCE = new TSD.PointList();
            for (int i = 0; i < groupedbolts.Count; i++)
            {

                TSD.PointList ptlist_for_boltdim = new TSD.PointList();
                TSD.PointList ptlist_for_boltdim_first_bolt = new TSD.PointList();
                TSD.PointList ptlist_for_boltdim_rd = new TSD.PointList();
                ptlist_for_boltdim_rd.Add(new TSG.Point(0, 0, 0));


                if (i < groupedbolts.Count)
                {
                    int number_of_bolts_current = 0;
                    int number_of_bolts_next = 0;
                    try
                    {
                        number_of_bolts_current = groupedbolts[i].point_in_group.Count;
                        number_of_bolts_next = groupedbolts[i + 1].point_in_group.Count;

                        if (number_of_bolts_current == number_of_bolts_next)
                        {
                            for (int j = 0; j < number_of_bolts_current; j++)
                            {
                                long y_value_current = Convert.ToInt64(groupedbolts[i].point_in_group[j].converted_pts.Y);
                                long y_value_next = Convert.ToInt64(groupedbolts[i + 1].point_in_group[j].converted_pts.Y);
                                if (y_value_current == y_value_next)
                                {
                                    int threshold_value_for_boltdim_combine = 145;
                                    long x_value_current = Convert.ToInt64(groupedbolts[i].point_in_group[j].converted_pts.X);
                                    long x_value_next = Convert.ToInt64(groupedbolts[i + 1].point_in_group[j].converted_pts.X);
                                    long difference = Math.Abs(x_value_current - x_value_next);
                                    if (difference < threshold_value_for_boltdim_combine)
                                    {
                                        if (j == number_of_bolts_current - 1)
                                        {
                                            distance_for_bolt_dim = distance_for_bolt_dim + difference;
                                            h++;

                                        }
                                        ptlist_for_boltdim_rd.Add(groupedbolts[i].point_in_group[j].original_pt);


                                    }
                                    else
                                    {

                                        for (int k = 0; k < groupedbolts[i].point_in_group.Count; k++)
                                        {
                                            ptlist_for_boltdim.Add(groupedbolts[i].point_in_group[k].original_pt);
                                        }


                                        ptlist_for_boltdim_first_bolt.Add(new TSG.Point(ptlist_for_boltdim[ptlist_for_boltdim.Count - 1]));
                                        ptlist_for_boltdim_first_bolt.Add(new TSG.Point(groupedbolts[i].point_in_group[j].original_pt.X, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2, 0));

                                        //bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim_first_bolt, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim+25, fixed_attributes);
                                        //bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, fixed_attributes);
                                        bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, a * myvector_for_slope_bolt, distance_for_bolt_dim, fixed_attributes);
                                        TSG.Point origin_for_bolt_angle_dim = new TSG.Point(ptlist_for_boltdim[ptlist_for_boltdim.Count - 1]);

                                        TSG.Point last_pt_for_bolt_angle_dim = new TSG.Point(ptlist_for_boltdim[0]);
                                        double dist_for_anglular_dim = (TSG.Distance.PointToPoint(last_pt_for_bolt_angle_dim, origin_for_bolt_angle_dim) + 200) / view_scale;
                                        TSG.Vector myvector_angle_dim = new TSG.Vector(origin_for_bolt_angle_dim - last_pt_for_bolt_angle_dim);
                                        TSD.AngleDimension myangle_dim = new TSD.AngleDimension(current_view as TSD.ViewBase, origin_for_bolt_angle_dim, -1 * myvector_angle_dim, new TSG.Vector(1, 0, 1), dist_for_anglular_dim, myangle_att);
                                        myangle_dim.Insert();
                                        h = 1;
                                        distance_for_bolt_dim = 30;
                                        break;
                                    }
                                }
                                else
                                {

                                    for (int k = 0; k < groupedbolts[i].point_in_group.Count; k++)
                                    {
                                        ptlist_for_boltdim.Add(groupedbolts[i].point_in_group[k].original_pt);
                                    }
                                    ptlist_for_boltdim_first_bolt.Add(new TSG.Point(ptlist_for_boltdim[ptlist_for_boltdim.Count - 1]));
                                    ptlist_for_boltdim_first_bolt.Add(new TSG.Point(groupedbolts[i].point_in_group[j].original_pt.X, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2, 0));

                                    //bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim_first_bolt, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim+25, fixed_attributes);
                                    bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, a * myvector_for_slope_bolt, distance_for_bolt_dim, fixed_attributes);


                                    TSG.Point origin_for_bolt_angle_dim = new TSG.Point(ptlist_for_boltdim[ptlist_for_boltdim.Count - 1]);

                                    TSG.Point last_pt_for_bolt_angle_dim = new TSG.Point(ptlist_for_boltdim[0]);
                                    double dist_for_anglular_dim = (TSG.Distance.PointToPoint(last_pt_for_bolt_angle_dim, origin_for_bolt_angle_dim) + 200) / view_scale;
                                    TSG.Vector myvector_angle_dim = new TSG.Vector(origin_for_bolt_angle_dim - last_pt_for_bolt_angle_dim);
                                    TSD.AngleDimension myangle_dim = new TSD.AngleDimension(current_view as TSD.ViewBase, origin_for_bolt_angle_dim, -1 * myvector_angle_dim, new TSG.Vector(1, 0, 1), dist_for_anglular_dim, myangle_att);

                                    myangle_dim.Insert();

                                    h = 1;
                                    distance_for_bolt_dim = 30;
                                    break;
                                }

                            }
                        }
                        else
                        {
                            for (int k = 0; k < groupedbolts[i].point_in_group.Count; k++)
                            {
                                ptlist_for_boltdim.Add(groupedbolts[i].point_in_group[k].original_pt);
                            }
                            ptlist_for_boltdim_first_bolt.Add(new TSG.Point(ptlist_for_boltdim[ptlist_for_boltdim.Count - 1]));
                            ptlist_for_boltdim_first_bolt.Add(new TSG.Point(ptlist_for_boltdim[0].X, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2, 0));
                            //ptlist_for_boltdim.Add(new TSG.Point(ptlist_for_boltdim[0].X, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2, 0));

                            //bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim_first_bolt, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim+25, fixed_attributes);
                            bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, a * myvector_for_slope_bolt, distance_for_bolt_dim, fixed_attributes);
                            TSG.Point origin_for_bolt_angle_dim = new TSG.Point(ptlist_for_boltdim[ptlist_for_boltdim.Count - 1]);
                            TSG.Point last_pt_for_bolt_angle_dim = new TSG.Point(ptlist_for_boltdim[0]);
                            double dist_for_anglular_dim = (TSG.Distance.PointToPoint(last_pt_for_bolt_angle_dim, origin_for_bolt_angle_dim) + 200) / view_scale;
                            TSG.Vector myvector_angle_dim = new TSG.Vector(origin_for_bolt_angle_dim - last_pt_for_bolt_angle_dim);
                            TSD.AngleDimension myangle_dim = new TSD.AngleDimension(current_view as TSD.ViewBase, origin_for_bolt_angle_dim, -1 * myvector_angle_dim, new TSG.Vector(1, 0, 1), dist_for_anglular_dim, myangle_att);
                            myangle_dim.Insert();
                            h = 1;
                            distance_for_bolt_dim = 30;



                        }
                    }



                    catch
                    {
                        if (groupedbolts.Count > 1)
                        {


                            double threshold_value = groupedbolts[i].x_dist - groupedbolts[i - 1].x_dist;


                            if (threshold_value > 140)
                            {

                                for (int k = 0; k < groupedbolts[i].point_in_group.Count; k++)
                                {
                                    ptlist_for_boltdim.Add(groupedbolts[i].point_in_group[k].original_pt);
                                }

                                if (groupedbolts[i].x_dist > output - 500)
                                {
                                    double REST_BOX_MAX = Math.Abs(current_view.RestrictionBox.MaxPoint.X);
                                    distance_for_bolt_dim = Math.Abs(groupedbolts[i].x_dist - REST_BOX_MAX);
                                }
                                else
                                {

                                    distance_for_bolt_dim = 0;
                                }
                            }
                            else
                            {
                                for (int k = 0; k < groupedbolts[groupedbolts.Count - 2].point_in_group.Count; k++)
                                {
                                    ptlist_for_boltdim.Add(groupedbolts[groupedbolts.Count - 2].point_in_group[k].original_pt);
                                }
                                if (groupedbolts[i].x_dist > output - 500)
                                {
                                    double REST_BOX_MAX = Math.Abs(current_view.RestrictionBox.MaxPoint.X);
                                    distance_for_bolt_dim = Math.Abs(groupedbolts[i - 1].x_dist - REST_BOX_MAX);
                                }
                                else
                                {
                                    distance_for_bolt_dim = Math.Abs(groupedbolts[i - 1].x_dist - groupedbolts[i].x_dist);
                                }
                            }
                        }
                        else
                        {
                            for (int k = 0; k < groupedbolts[i].point_in_group.Count; k++)
                            {
                                ptlist_for_boltdim.Add(groupedbolts[i].point_in_group[k].original_pt);
                            }

                            if (groupedbolts[i].x_dist > output - 500)
                            {
                                double REST_BOX_MAX = Math.Abs(current_view.RestrictionBox.MaxPoint.X);
                                distance_for_bolt_dim = Math.Abs(groupedbolts[i].x_dist - REST_BOX_MAX);
                            }
                            else
                            {

                                distance_for_bolt_dim = 0;
                            }
                        }
                        TSG.Vector new_vector = new TSG.Vector();


                        if (groupedbolts[i].x_dist > output - 500)
                        {

                            new_vector = a * myvector_for_slope_bolt;
                        }
                        else
                        {

                            new_vector = a * myvector_for_slope_bolt;
                        }




                        try
                        {
                            bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, a * new_vector, distance_for_bolt_dim + 100, fixed_attributes);

                        }
                        catch
                        {
                        }
                        try
                        {
                            TSG.Point origin_for_bolt_angle_dim = new TSG.Point(ptlist_for_boltdim[ptlist_for_boltdim.Count - 1]);
                            TSG.Point last_pt_for_bolt_angle_dim = new TSG.Point(ptlist_for_boltdim[0]);
                            double dist_for_anglular_dim = (TSG.Distance.PointToPoint(last_pt_for_bolt_angle_dim, origin_for_bolt_angle_dim) + 200) / view_scale;
                            TSG.Vector myvector_angle_dim = new TSG.Vector(origin_for_bolt_angle_dim - last_pt_for_bolt_angle_dim);
                            TSD.AngleDimension myangle_dim = new TSD.AngleDimension(current_view as TSD.ViewBase, origin_for_bolt_angle_dim, -1 * myvector_angle_dim, new TSG.Vector(1, 0, 1), dist_for_anglular_dim, myangle_att);
                            myangle_dim.Insert();
                        }
                        catch
                        {
                        }


                    }
                }

            }
            TSD.StraightDimensionSet.StraightDimensionSetAttributes rd_att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            rd_att.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
            rd_att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            rd_att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
            rd_att.Color= DrawingColors.Gray70;
            rd_att.Text.Font.Color = DrawingColors.Gray70;
            rd_att.Arrowhead.Head = ArrowheadTypes.FilledArrow;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    rd_att.Text.Font.Height = 3.571875;
                }
                else
                {
                    rd_att.Text.Font.Height = 3.175;
                }
            }
            else
            {
                rd_att.Text.Font.Height = 2.38125;


            }

            TSD.PointList mypt_for_rd = new TSD.PointList();
            mypt_for_rd.Add(new TSG.Point(0, 0, 0));
            for (int z = 0; z < groupedbolts.Count - 1; z++)
            {

                int current = z;
                int next = z + 1;
                double current_xvalue = groupedbolts[current].x_dist;
                double next_xvalue = groupedbolts[next].x_dist;
                double difference = next_xvalue - current_xvalue;
                int s = groupedbolts[z].point_in_group.Count;
                int s_next = groupedbolts[z + 1].point_in_group.Count;
                TSG.Point pp = groupedbolts[z].point_in_group[s - 1].original_pt;
                TSG.Point pp_next = groupedbolts[z + 1].point_in_group[s_next - 1].original_pt;
                TSG.Point pp_first = groupedbolts[z].point_in_group[0].original_pt;
                TSD.PointList mypt_for_bolt_single_vertical = new TSD.PointList();
                TSG.Point pp1 = new TSG.Point();

                mypt_for_rd.Add(pp);
                if (next == groupedbolts.Count - 1)
                {

                    mypt_for_rd.Add(pp_next);

                }
                if (difference < 150)
                {
                    TSD.PointList mypt_for_boltpitch = new TSD.PointList();
                    mypt_for_boltpitch.Add(pp);
                    mypt_for_boltpitch.Add(pp_next);

                    double distance_for_pitch = TSG.Distance.PointToPoint(pp_first, pp);
                    bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, mypt_for_boltpitch, b * yvector_for_slope_bolt, distance_for_pitch + 75, fixed_attributes);


                    mypt_for_bolt_single_vertical.Add(pp);
                    mypt_for_bolt_single_vertical.Add(new TSG.Point(pp.X, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2, 0));
                    bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, mypt_for_bolt_single_vertical, new TSG.Vector(-1, 0, 0), 50, fixed_attributes);
                    if (next == groupedbolts.Count - 1)
                    {
                        TSD.PointList mypt_for_bolt_single_vertical1 = new TSD.PointList();
                        mypt_for_bolt_single_vertical1.Add(pp_next);
                        mypt_for_bolt_single_vertical1.Add(new TSG.Point(pp_next.X, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2, 0));
                        bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, mypt_for_bolt_single_vertical1, new TSG.Vector(-1, 0, 0), 50, fixed_attributes);


                    }

                }
                else
                {
                    mypt_for_bolt_single_vertical.Add(pp);
                    mypt_for_bolt_single_vertical.Add(new TSG.Point(pp.X, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2, 0));
                    bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, mypt_for_bolt_single_vertical, new TSG.Vector(1, 0, 0), 50, fixed_attributes);
                    if (next == groupedbolts.Count - 1)
                    {
                        TSD.PointList mypt_for_bolt_single_vertical1 = new TSD.PointList();
                        mypt_for_bolt_single_vertical1.Add(pp_next);
                        mypt_for_bolt_single_vertical1.Add(new TSG.Point(pp_next.X, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2, 0));
                        bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, mypt_for_bolt_single_vertical1, new TSG.Vector(1, 0, 0), 50, fixed_attributes);


                    }

                }





            }
            if (groupedbolts.Count == 1)
            {


                double current_xvalue = groupedbolts[0].x_dist;


                int s = groupedbolts[0].point_in_group.Count;

                TSG.Point pp = groupedbolts[0].point_in_group[s - 1].original_pt;


                TSD.PointList mypt_for_bolt_single_vertical = new TSD.PointList();
                TSG.Point pp1 = new TSG.Point();
                mypt_for_rd.Add(pp);

                mypt_for_bolt_single_vertical.Add(pp);
                mypt_for_bolt_single_vertical.Add(new TSG.Point(pp.X, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2, 0));
                bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, mypt_for_bolt_single_vertical, new TSG.Vector(-1, 0, 0), 50, fixed_attributes);
            }

            try
            {

                bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, mypt_for_rd, new TSG.Vector(0, 1, 0), current_view.RestrictionBox.MaxPoint.Y + 100, rd_att);
            }
            catch
            {
            }








        }
        public void bolt_logic(List<TSG.Point> singlebolts,  TSD.View current_view, double output, ArrayList MAINPART_PROFILE_VALUES,string drg_att)
        {

           

            var groupedbolts = (from points in singlebolts
                                group points by Convert.ToInt64(points.X) into newlist
                                orderby newlist.Key ascending
                                select new
                                {
                                    x_dist = newlist.Key,
                                    point_in_group = (newlist.OrderBy(y => y.Y).ToList())

                                }).ToList();

            TSD.StraightDimensionSetHandler bolt_combine_dim = new TSD.StraightDimensionSetHandler();
            TSD.StraightDimensionSet.StraightDimensionSetAttributes fixed_attributes = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
            fixed_attributes.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
            fixed_attributes.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
            if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
            {
                if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                {
                    fixed_attributes.Text.Font.Height = 3.571875;
                }
                else
                {
                    fixed_attributes.Text.Font.Height = 3.175;
                }
            }
            else
            {
                fixed_attributes.Text.Font.Height = 2.38125;


            }


            double distance_for_bolt_dim = 0;
            if (groupedbolts.Count > 1)
            {
                if (groupedbolts[0].x_dist < 150)
                {
                    double REST_BOX_MIN = Math.Abs(current_view.RestrictionBox.MinPoint.X);

                    distance_for_bolt_dim = groupedbolts[0].x_dist + REST_BOX_MIN + 85;
                }
                else
                {
                    distance_for_bolt_dim = 30;
                }
            }

            int h = 1;
            TSD.PointList ptlist_for_boltdim_TO_CHECK_THE_DISTANCE = new TSD.PointList();
            for (int i = 0; i < groupedbolts.Count; i++)
            {

                TSD.PointList ptlist_for_boltdim = new TSD.PointList();
                TSD.PointList ptlist_for_boltdim_rd = new TSD.PointList();
                ptlist_for_boltdim_rd.Add(new TSG.Point(0, 0, 0));


                if (i < groupedbolts.Count)
                {
                    int number_of_bolts_current = 0;
                    int number_of_bolts_next = 0;
                    try
                    {
                        number_of_bolts_current = groupedbolts[i].point_in_group.Count;
                        number_of_bolts_next = groupedbolts[i + 1].point_in_group.Count;

                        if (number_of_bolts_current == number_of_bolts_next)
                        {
                            for (int j = 0; j < number_of_bolts_current; j++)
                            {
                                long y_value_current = Convert.ToInt64(groupedbolts[i].point_in_group[j].Y);
                                long y_value_next = Convert.ToInt64(groupedbolts[i + 1].point_in_group[j].Y);
                                if (y_value_current == y_value_next)
                                {
                                    int threshold_value_for_boltdim_combine = 145;
                                    long x_value_current = Convert.ToInt64(groupedbolts[i].point_in_group[j].X);
                                    long x_value_next = Convert.ToInt64(groupedbolts[i + 1].point_in_group[j].X);
                                    long difference = Math.Abs(x_value_current - x_value_next);
                                    if (difference < threshold_value_for_boltdim_combine)
                                    {
                                        if (j == number_of_bolts_current - 1)
                                        {
                                            distance_for_bolt_dim = distance_for_bolt_dim + difference;
                                            h++;

                                        }
                                        ptlist_for_boltdim_rd.Add(groupedbolts[i].point_in_group[j]);


                                    }
                                    else
                                    {
                                        foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                                        {
                                            ptlist_for_boltdim.Add(pt);

                                        }

                                        ptlist_for_boltdim.Add(new TSG.Point(groupedbolts[i].point_in_group[j].X, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2, 0));



                                        bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, fixed_attributes);
                                        h = 1;
                                        distance_for_bolt_dim = 50;
                                        break;
                                    }
                                }
                                else
                                {
                                    foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                                    {
                                        ptlist_for_boltdim.Add(pt);
                                    }
                                    ptlist_for_boltdim.Add(new TSG.Point(groupedbolts[i].point_in_group[j].X, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2, 0));
                                    bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, fixed_attributes);
                                    h = 1;
                                    distance_for_bolt_dim = 50;
                                    break;
                                }

                            }
                        }
                        else
                        {
                            foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                            {
                                ptlist_for_boltdim.Add(pt);
                            }
                            ptlist_for_boltdim.Add(new TSG.Point(ptlist_for_boltdim[0].X, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2, 0));
                            bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, new TSG.Vector(-1, 0, 0), distance_for_bolt_dim, fixed_attributes);
                            h = 1;
                            distance_for_bolt_dim = 50;
                        }
                    }



                    catch
                    {
                        int value = 0;
                        if (groupedbolts.Count > 1)
                        {
                            double threshold_value = groupedbolts[i].x_dist - groupedbolts[i - 1].x_dist;
                            if (threshold_value > 140)
                            {
                                foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                                {
                                    ptlist_for_boltdim.Add(pt);
                                }

                                if (groupedbolts[i].x_dist > output - 500)
                                {
                                    double REST_BOX_MAX = Math.Abs(current_view.RestrictionBox.MaxPoint.X);
                                    distance_for_bolt_dim = Math.Abs(groupedbolts[i].x_dist - REST_BOX_MAX);
                                }
                                else
                                {
                                    distance_for_bolt_dim = 0;
                                }
                            }
                            else
                            {



                                for (int ll = groupedbolts.Count - 1; ll > 0; ll--)
                                {
                                    double x_dist_current = groupedbolts[ll].x_dist;
                                    double x_dist_before = groupedbolts[ll - 1].x_dist;
                                    double differece = x_dist_current - x_dist_before;
                                    if (differece > 140)
                                    {
                                        value = ll;
                                        break;

                                    }
                                }
                                foreach (TSG.Point pt in groupedbolts[value].point_in_group)
                                {
                                    ptlist_for_boltdim.Add(pt);

                                }
                                if (groupedbolts[i].x_dist > output - 500)
                                {
                                    double REST_BOX_MAX = Math.Abs(current_view.RestrictionBox.MaxPoint.X);
                                    distance_for_bolt_dim = Math.Abs(groupedbolts[i - 1].x_dist - REST_BOX_MAX);
                                }
                                else
                                {
                                    distance_for_bolt_dim = Math.Abs(groupedbolts[i - 1].x_dist - groupedbolts[i].x_dist);
                                }
                                distance_for_bolt_dim = groupedbolts[groupedbolts.Count - 1].x_dist - groupedbolts[value].x_dist;
                            }
                        }
                        else
                        {
                            foreach (TSG.Point pt in groupedbolts[i].point_in_group)
                            {
                                ptlist_for_boltdim.Add(pt);

                            }

                            if (groupedbolts[i].x_dist > output - 500)
                            {
                                double REST_BOX_MAX = Math.Abs(current_view.RestrictionBox.MaxPoint.X);
                                distance_for_bolt_dim = Math.Abs(groupedbolts[i].x_dist - REST_BOX_MAX);
                            }
                            else
                            {

                                distance_for_bolt_dim = 0;
                            }
                        }

                        TSG.Vector new_vector = new TSG.Vector();


                        if (groupedbolts[value].x_dist > output - 500)
                        {

                            new_vector = new TSG.Vector(1, 0, 0);
                        }
                        else
                        {

                            new_vector = new TSG.Vector(1, 0, 0);
                        }


                        ptlist_for_boltdim.Add(new TSG.Point(ptlist_for_boltdim[0].X, Convert.ToDouble(MAINPART_PROFILE_VALUES[0]) / 2, 0));


                        try
                        {
                            bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, ptlist_for_boltdim, new_vector, distance_for_bolt_dim + 150, fixed_attributes);
                        }
                        catch
                        {
                        }


                    }
                }

            }



            TSD.PointList mypt_for_rd = new TSD.PointList();
            mypt_for_rd.Add(new TSG.Point(0, 0, 0));
            for (int z = 0; z < groupedbolts.Count; z++)
            {
                int s = groupedbolts[z].point_in_group.Count;
                TSG.Point pp = groupedbolts[z].point_in_group[0];
                mypt_for_rd.Add(pp);
            }


            try
            {
                TSD.StraightDimensionSet.StraightDimensionSetAttributes rd_att = new TSD.StraightDimensionSet.StraightDimensionSetAttributes();
                rd_att.DimensionType = TSD.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2;
                rd_att.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Fixed;
                rd_att.ExtensionLine = TSD.DimensionSetBaseAttributes.ExtensionLineTypes.No;
                rd_att.Color = DrawingColors.Gray70;
                rd_att.Text.Font.Color = DrawingColors.Gray70;
                rd_att.Arrowhead.Head = ArrowheadTypes.FilledArrow;

                if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                {
                    if (cmbclient.Text.Equals("HILLSDALE") || (chk9by64.Checked == true))
                    {
                        rd_att.Text.Font.Height = 3.571875;
                    }
                    else
                    {
                        rd_att.Text.Font.Height = 3.175;
                    }
                }
                else
                {
                    rd_att.Text.Font.Height = 2.38125;


                }


                double MAXY = Math.Abs(current_view.RestrictionBox.MaxPoint.Y);

                double DISTANCE_FOR_BOLT = Math.Abs(MAXY - mypt_for_rd[0].Y);

                bolt_combine_dim.CreateDimensionSet(current_view as TSD.ViewBase, mypt_for_rd, new TSG.Vector(0, 1, 0), DISTANCE_FOR_BOLT + 50, rd_att);
            }
            catch
            {
            }
        }
      
        public List<angle_face_area> getface_for_angle(TSM.Part mypart)
        {

            List<angle_face_area> myangle_face_area = new List<angle_face_area>();
            TSM.Model mymodel = new TSM.Model();
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane( new TSM.TransformationPlane( mypart.GetCoordinateSystem()));

            TSM.Solid solid = mypart.GetSolid(TSM.Solid.SolidCreationTypeEnum.RAW);
            TSS.FaceEnumerator face_enum = solid.GetFaceEnumerator();
            while (face_enum.MoveNext())
            {
                TSS.Face face = face_enum.Current as TSS.Face;
                TSG.Vector myvector = face.Normal;
                List<TSG.Point> mypoint_for_area = new List<TSG.Point>();
                if (Convert.ToInt64(myvector.Y) != 0)
                {
                  TSS.LoopEnumerator loopenum =   face.GetLoopEnumerator();
                  while (loopenum.MoveNext())
                  {
                      TSS.Loop loop = loopenum.Current as TSS.Loop;
                     TSS.VertexEnumerator myvertex =  loop.GetVertexEnumerator();
                     while (myvertex.MoveNext())
                     {
                         TSG.Point mypoint = myvertex.Current as TSG.Point;
                         mypoint_for_area.Add(mypoint);
                     }
                  }
               double area =    area_for_each_face(mypoint_for_area);

               myangle_face_area.Add(new angle_face_area { area = area, face = face, vectortype = "Y" });

 
                }
                else if (Convert.ToInt64(myvector.Z) != 0)
                {

                    TSS.LoopEnumerator loopenum = face.GetLoopEnumerator();
                    while (loopenum.MoveNext())
                    {
                        TSS.Loop loop = loopenum.Current as TSS.Loop;
                        TSS.VertexEnumerator myvertex = loop.GetVertexEnumerator();
                        while (myvertex.MoveNext())
                        {
                            TSG.Point mypoint = myvertex.Current as TSG.Point;
                            mypoint_for_area.Add(mypoint);
                        }
                    }
                    double area = area_for_each_face(mypoint_for_area);

                    myangle_face_area.Add(new angle_face_area { area = area, face = face, vectortype = "Z" });


                }
                else
                {

                    TSS.LoopEnumerator loopenum = face.GetLoopEnumerator();
                    while (loopenum.MoveNext())
                    {
                        TSS.Loop loop = loopenum.Current as TSS.Loop;
                        TSS.VertexEnumerator myvertex = loop.GetVertexEnumerator();
                        while (myvertex.MoveNext())
                        {
                            TSG.Point mypoint = myvertex.Current as TSG.Point;
                            mypoint_for_area.Add(mypoint);
                        }
                    }
                    double area = area_for_each_face(mypoint_for_area);

                    myangle_face_area.Add(new angle_face_area { area = area, face = face, vectortype = "X" });

 
                }
               
             
            }

            return myangle_face_area;
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());

 
        }


        public List<angle_face_area> getface_for_tprofile(TSM.Part mypart)
        {

            List<angle_face_area> myangle_face_area = new List<angle_face_area>();
            TSM.Model mymodel = new TSM.Model();
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(mypart.GetCoordinateSystem()));

            TSM.Solid solid = mypart.GetSolid(TSM.Solid.SolidCreationTypeEnum.RAW);
            TSS.FaceEnumerator face_enum = solid.GetFaceEnumerator();
            while (face_enum.MoveNext())
            {
                TSS.Face face = face_enum.Current as TSS.Face;
                TSG.Vector myvector = face.Normal;
                List<TSG.Point> mypoint_for_area = new List<TSG.Point>();
                if (Convert.ToInt64(myvector.Y) != 0)
                {
                    TSS.LoopEnumerator loopenum = face.GetLoopEnumerator();
                    while (loopenum.MoveNext())
                    {
                        TSS.Loop loop = loopenum.Current as TSS.Loop;
                        TSS.VertexEnumerator myvertex = loop.GetVertexEnumerator();
                        while (myvertex.MoveNext())
                        {
                            TSG.Point mypoint = myvertex.Current as TSG.Point;
                            mypoint_for_area.Add(mypoint);
                        }
                    }
                    double area = area_for_each_face(mypoint_for_area);

                    myangle_face_area.Add(new angle_face_area { area = area, face = face, vectortype = "Y" });


                }
                


            }

            return myangle_face_area;
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());


        }
        public List<angle_face_area> getface_for_CHANNEL(TSM.Part mypart)
        {

            List<angle_face_area> myangle_face_area = new List<angle_face_area>();
            TSM.Model mymodel = new TSM.Model();
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(mypart.GetCoordinateSystem()));

            TSM.Solid solid = mypart.GetSolid(TSM.Solid.SolidCreationTypeEnum.RAW);
            TSS.FaceEnumerator face_enum = solid.GetFaceEnumerator();
            while (face_enum.MoveNext())
            {
                TSS.Face face = face_enum.Current as TSS.Face;
                TSG.Vector myvector = face.Normal;
                List<TSG.Point> mypoint_for_area = new List<TSG.Point>();
                if (Convert.ToInt64(myvector.Z) != 0)
                {
                    TSS.LoopEnumerator loopenum = face.GetLoopEnumerator();
                    while (loopenum.MoveNext())
                    {
                        TSS.Loop loop = loopenum.Current as TSS.Loop;
                        TSS.VertexEnumerator myvertex = loop.GetVertexEnumerator();
                        while (myvertex.MoveNext())
                        {
                            TSG.Point mypoint = myvertex.Current as TSG.Point;
                            mypoint_for_area.Add(mypoint);
                        }
                    }
                    double area = area_for_each_face(mypoint_for_area);

                    myangle_face_area.Add(new angle_face_area { area = area, face = face, vectortype = "Y" });


                }



            }

            return myangle_face_area;
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());


        }



        public List<TSG.Point> pts_in_each_face(TSM.Part mypart,TSD.View current_view)
        {

            List<TSG.Point> ALL_PTS_IN_EACH_FACE = new List<TSG.Point>();
            TSM.Model mymodel = new TSM.Model();
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(current_view.ViewCoordinateSystem));

            TSM.Solid solid = mypart.GetSolid(TSM.Solid.SolidCreationTypeEnum.RAW);
            TSS.FaceEnumerator face_enum = solid.GetFaceEnumerator();
            while (face_enum.MoveNext())
            {
                TSS.Face face = face_enum.Current as TSS.Face;
                TSG.Vector myvector = face.Normal;
             
              
                    TSS.LoopEnumerator loopenum = face.GetLoopEnumerator();
                    while (loopenum.MoveNext())
                    {
                        TSS.Loop loop = loopenum.Current as TSS.Loop;
                        TSS.VertexEnumerator myvertex = loop.GetVertexEnumerator();
                        while (myvertex.MoveNext())
                        {
                            TSG.Point mypoint = myvertex.Current as TSG.Point;
                            ALL_PTS_IN_EACH_FACE.Add(mypoint);
                        }
                    }

            }
            ALL_PTS_IN_EACH_FACE.Sort(new sort_by_y_value_asc());
           
            return ALL_PTS_IN_EACH_FACE;


        }

        public double area_for_each_face(List<TSG.Point> mylist)
        {
            List<double> distance_list = new List<double>();
            for (int i = 0; i < mylist.Count ; i++)
            {
                TSG.Point current_pt = new TSG.Point();
                TSG.Point next_pt = new TSG.Point();
                if (i != mylist.Count-1)
                {
                    current_pt = mylist[i];
                    next_pt = mylist[i + 1];
                }
                else 
                {
                    current_pt = mylist[i];
                    next_pt = mylist[0];

                }
               

                double distance = TSG.Distance.PointToPoint(current_pt, next_pt);
                distance_list.Add(distance);
               

            }
            var obj = distance_list.Distinct();
            List<double> area_list = new List<double>();
            foreach (double distance in obj)
            {
                area_list.Add(distance);
 
            }
             double area =0;
            if (area_list.Count > 1)
            {
               area = area_list[0] * area_list[1];
                
            }
            return area;
        }

        public class angle_face_area
        {
            public TSS.Face face;
            public double area;
            public string vectortype;
        }


        public TSG.Point angle_mid_pt(List<angle_face_area> myreq, TSD.View current_view)
        {
            TSM.Model mymodel = new TSM.Model();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            myreq.RemoveAll(x => x.vectortype.Equals("X"));
            var myreq1 = (from vector in myreq
                          group vector by vector.vectortype into newlist
                          select new
                          {
                              vector_type = newlist.Key,
                              face = newlist.ToList()
                          }).ToList();
            List<TSS.Face> myface_list = new List<TSS.Face>();

            for (int h = 0; h < myreq1.Count; h++)
            {
                myface_list.Add((myreq1[h].face.Find(x => x.area.Equals(myreq1[h].face.Max(y => y.area)))).face);
            }
            List<TSG.Point> list1 = new List<TSG.Point>();
            List<TSG.Point> list2 = new List<TSG.Point>();

            for (int x = 0; x < myface_list.Count; x++)
            {
                if (x == 0)
                {

                    TSS.LoopEnumerator myloop_enum = myface_list[x].GetLoopEnumerator();
                    while (myloop_enum.MoveNext())
                    {
                        TSS.Loop myloop = myloop_enum.Current as TSS.Loop;
                        TSS.VertexEnumerator myvertex_enum = myloop.GetVertexEnumerator();
                        while (myvertex_enum.MoveNext())
                        {
                            TSG.Point myvertex = myvertex_enum.Current as TSG.Point;
                            list1.Add(myvertex);

                        }
                    }
                }
                else
                {
                    TSS.LoopEnumerator myloop_enum = myface_list[x].GetLoopEnumerator();
                    while (myloop_enum.MoveNext())
                    {
                        TSS.Loop myloop = myloop_enum.Current as TSS.Loop;
                        TSS.VertexEnumerator myvertex_enum = myloop.GetVertexEnumerator();
                        while (myvertex_enum.MoveNext())
                        {
                            TSG.Point myvertex = myvertex_enum.Current as TSG.Point;
                            list2.Add(myvertex);

                        }
                    }

                }

            }

            List<TSG.Point> myedge = list1.Intersect(list2).ToList();
            TSG.Point point = new TSG.Point();
            if (myedge.Count > 0)
            {
                TSG.Matrix global_matrix = mymodel.GetWorkPlaneHandler().GetCurrentTransformationPlane().TransformationMatrixToGlobal;
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                TSG.Point globalpt = global_matrix.Transform(myedge[0]);
                TSG.Point viewpt = toviewmatrix.Transform(globalpt);
                TSG.Point globalpt1 = global_matrix.Transform(myedge[1]);
                TSG.Point viewpt1 = toviewmatrix.Transform(globalpt1);
              point = MidPoint(viewpt, viewpt1);
                

            }
            return point;

        }


        public TSD.PointList angle_pts_for_section(List<angle_face_area> myreq, TSD.View current_view)
        {
            TSM.Model mymodel = new TSM.Model();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            myreq.RemoveAll(x => x.vectortype.Equals("X"));
            var myreq1 = (from vector in myreq
                          group vector by vector.vectortype into newlist
                          select new
                          {
                              vector_type = newlist.Key,
                              face = newlist.ToList()
                          }).ToList();
            List<TSS.Face> myface_list = new List<TSS.Face>();

            for (int h = 0; h < myreq1.Count; h++)
            {
                myface_list.Add((myreq1[h].face.Find(x => x.area.Equals(myreq1[h].face.Max(y => y.area)))).face);
            }
            List<TSG.Point> list1 = new List<TSG.Point>();
            List<TSG.Point> list2 = new List<TSG.Point>();

            for (int x = 0; x < myface_list.Count; x++)
            {
                if (x == 0)
                {

                    TSS.LoopEnumerator myloop_enum = myface_list[x].GetLoopEnumerator();
                    while (myloop_enum.MoveNext())
                    {
                        TSS.Loop myloop = myloop_enum.Current as TSS.Loop;
                        TSS.VertexEnumerator myvertex_enum = myloop.GetVertexEnumerator();
                        while (myvertex_enum.MoveNext())
                        {
                            TSG.Point myvertex = myvertex_enum.Current as TSG.Point;
                            list1.Add(myvertex);

                        }
                    }
                }
                else
                {
                    TSS.LoopEnumerator myloop_enum = myface_list[x].GetLoopEnumerator();
                    while (myloop_enum.MoveNext())
                    {
                        TSS.Loop myloop = myloop_enum.Current as TSS.Loop;
                        TSS.VertexEnumerator myvertex_enum = myloop.GetVertexEnumerator();
                        while (myvertex_enum.MoveNext())
                        {
                            TSG.Point myvertex = myvertex_enum.Current as TSG.Point;
                            list2.Add(myvertex);

                        }
                    }

                }

            }

            List<TSG.Point> myedge = list1.Intersect(list2).ToList();
            TSG.Matrix global_matrix = mymodel.GetWorkPlaneHandler().GetCurrentTransformationPlane().TransformationMatrixToGlobal;
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            TSG.Point globalpt = global_matrix.Transform(myedge[0]);
            TSG.Point viewpt = toviewmatrix.Transform(globalpt);
            TSG.Point globalpt1 = global_matrix.Transform(myedge[1]);
            TSG.Point viewpt1 = toviewmatrix.Transform(globalpt1);
            TSD.PointList point = new TSD.PointList();
            return point;

        }



        public TSG.Point tpro_mid_pt(List<angle_face_area> myreq, TSD.View current_view)
        {
            TSM.Model mymodel = new TSM.Model();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            myreq.RemoveAll(x => x.vectortype.Equals("X"));
            var myreq1 = (from vector in myreq
                          group vector by vector.vectortype into newlist
                          select new
                          {
                              vector_type = newlist.Key,
                              face = newlist.ToList()
                          }).ToList();
            List<TSS.Face> myface_list = new List<TSS.Face>();

            for (int h = 0; h < myreq1.Count; h++)
            {
                myface_list.Add((myreq1[h].face.Find(x => x.area.Equals(myreq1[h].face.Max(y => y.area)))).face);
            }
            List<TSG.Point> list1 = new List<TSG.Point>();
            List<TSG.Point> list2 = new List<TSG.Point>();

            for (int x = 0; x < myface_list.Count; x++)
            {
                if (x == 0)
                {

                    TSS.LoopEnumerator myloop_enum = myface_list[x].GetLoopEnumerator();
                    while (myloop_enum.MoveNext())
                    {
                        TSS.Loop myloop = myloop_enum.Current as TSS.Loop;
                        TSS.VertexEnumerator myvertex_enum = myloop.GetVertexEnumerator();
                        while (myvertex_enum.MoveNext())
                        {
                            TSG.Point myvertex = myvertex_enum.Current as TSG.Point;
                            list1.Add(myvertex);

                        }
                    }
                }
                else
                {
                    TSS.LoopEnumerator myloop_enum = myface_list[x].GetLoopEnumerator();
                    while (myloop_enum.MoveNext())
                    {
                        TSS.Loop myloop = myloop_enum.Current as TSS.Loop;
                        TSS.VertexEnumerator myvertex_enum = myloop.GetVertexEnumerator();
                        while (myvertex_enum.MoveNext())
                        {
                            TSG.Point myvertex = myvertex_enum.Current as TSG.Point;
                            list2.Add(myvertex);

                        }
                    }

                }

            }

            List<TSG.Point> myedge = list1;
            TSG.Matrix global_matrix = mymodel.GetWorkPlaneHandler().GetCurrentTransformationPlane().TransformationMatrixToGlobal;
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            TSG.Point globalpt = global_matrix.Transform(myedge[0]);
            TSG.Point viewpt = toviewmatrix.Transform(globalpt);
            TSG.Point globalpt1 = global_matrix.Transform(myedge[1]);
            TSG.Point viewpt1 = toviewmatrix.Transform(globalpt1);
            TSG.Point point = new TSG.Point();
            if(cmbclient.Text=="SME")
            {
                point = viewpt1;
            }
            else
            {
                point = MidPoint(viewpt, viewpt1);
            }

            return point;

        }

        public TSG.Point angle_bottom_pts_for_slope(List<angle_face_area> myreq,TSD.View current_view)
        {
            TSM.Model mymodel = new TSM.Model();
            TSG.Matrix toviewmatrix = TSG.MatrixFactory.ToCoordinateSystem(current_view.ViewCoordinateSystem);
            myreq.RemoveAll(x => x.vectortype.Equals("X"));
            var myreq1 = (from vector in myreq
                          group vector by vector.vectortype into newlist
                          select new
                          {
                              vector_type = newlist.Key,
                              face = newlist.ToList()
                          }).ToList();
            List<TSS.Face> myface_list = new List<TSS.Face>();

            for (int h = 0; h < myreq1.Count; h++)
            {
                myface_list.Add((myreq1[h].face.Find(x => x.area.Equals(myreq1[h].face.Max(y => y.area)))).face);
            }
            List<TSG.Point> list1 = new List<TSG.Point>();
            List<TSG.Point> list2 = new List<TSG.Point>();

            for (int x = 0; x < myface_list.Count; x++)
            {
                if (x == 0)
                {

                    TSS.LoopEnumerator myloop_enum = myface_list[x].GetLoopEnumerator();
                    while (myloop_enum.MoveNext())
                    {
                        TSS.Loop myloop = myloop_enum.Current as TSS.Loop;
                        TSS.VertexEnumerator myvertex_enum = myloop.GetVertexEnumerator();
                        while (myvertex_enum.MoveNext())
                        {
                            TSG.Point myvertex = myvertex_enum.Current as TSG.Point;
                            list1.Add(myvertex);

                        }
                    }
                }
                else
                {
                    TSS.LoopEnumerator myloop_enum = myface_list[x].GetLoopEnumerator();
                    while (myloop_enum.MoveNext())
                    {
                        TSS.Loop myloop = myloop_enum.Current as TSS.Loop;
                        TSS.VertexEnumerator myvertex_enum = myloop.GetVertexEnumerator();
                        while (myvertex_enum.MoveNext())
                        {
                            TSG.Point myvertex = myvertex_enum.Current as TSG.Point;
                            list2.Add(myvertex);

                        }
                    }

                }

            }


            List<TSG.Point> list3 = new List<TSG.Point>();


            for (int x = 0; x < myface_list.Count; x++)
            {
                if (myface_list[x].Normal.Z != 0)
                {
                    if (x == 0)
                    {

                        TSS.LoopEnumerator myloop_enum = myface_list[x].GetLoopEnumerator();
                        while (myloop_enum.MoveNext())
                        {
                            TSS.Loop myloop = myloop_enum.Current as TSS.Loop;
                            TSS.VertexEnumerator myvertex_enum = myloop.GetVertexEnumerator();
                            while (myvertex_enum.MoveNext())
                            {
                                TSG.Point myvertex = myvertex_enum.Current as TSG.Point;
                                list3.Add(myvertex);

                            }
                        }
                    }
                    else
                    {
                        TSS.LoopEnumerator myloop_enum = myface_list[x].GetLoopEnumerator();
                        while (myloop_enum.MoveNext())
                        {
                            TSS.Loop myloop = myloop_enum.Current as TSS.Loop;
                            TSS.VertexEnumerator myvertex_enum = myloop.GetVertexEnumerator();
                            while (myvertex_enum.MoveNext())
                            {
                                TSG.Point myvertex = myvertex_enum.Current as TSG.Point;
                                list3.Add(myvertex);

                            }
                        }

                    }
                }
            }


            list3.Sort(new sort_by_y_value_asc()); 



            List<TSG.Point> myedge = list1.Intersect(list2).ToList();
            TSG.Matrix global_matrix = mymodel.GetWorkPlaneHandler().GetCurrentTransformationPlane().TransformationMatrixToGlobal;
            mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
            TSG.Point globalpt = global_matrix.Transform(myedge[0]);
            TSG.Point viewpt = toviewmatrix.Transform(globalpt);
            TSG.Point globalpt1 = global_matrix.Transform(myedge[1]);
            TSG.Point viewpt1 = toviewmatrix.Transform(globalpt1);
          TSG.Point point =  MidPoint(viewpt, viewpt1);
          return point;
          
        }



      


        public static TSG.Point MidPoint(TSG.Point pt1, TSG.Point pt2)
        {
            TSG.Point point = new TSG.Point((pt1.X + pt2.X) / 2.0, (pt1.Y + pt2.Y) / 2.0, (pt1.Z + pt2.Z) / 2.0);
            return point;
        }

        public string  check_for_angle_dim(TSM.Part anglepart, TSD.View currentview)
        {
          
            TSM.Model mymodel = new TSM.Model();
            List<string> list_of_bolt = new List<string>();
            TSM.ModelObjectEnumerator mybolt_enum = anglepart.GetBolts();
            int BOLT_COUNT = mybolt_enum.GetSize();
            
                while (mybolt_enum.MoveNext())
                {
                    TSM.BoltGroup boltgrp = mybolt_enum.Current as TSM.BoltGroup;

                    mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(currentview.ViewCoordinateSystem));
                    TSG.CoordinateSystem boltcheck = boltgrp.GetCoordinateSystem();
                    TSG.Vector xaxis = boltcheck.AxisX;
                    TSG.Vector yaxis = boltcheck.AxisY;
                    TSG.Vector zaxis = yaxis.Cross(xaxis);
                    zaxis.Normalize();
                    mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                    if (Convert.ToInt64(zaxis.Z) != 0)
                    {

                        list_of_bolt.Add("TRUE");

                    }
                    else
                    {
                        list_of_bolt.Add("FALSE");

                    }



                }
            

           bool RESULT = list_of_bolt.Any(X => X.Equals("TRUE"));
            string angle_dim;
            if(RESULT == true)
            {
                angle_dim = "NOT_NEED";

            }
            else
            {
                 angle_dim = "NEED";

            }

            return angle_dim;
        }

      

        public string BOLT_IN_VIEW(TSM.Part anglepart, TSD.View currentview)
        {

            TSM.Model mymodel = new TSM.Model();
            List<string> list_of_bolt = new List<string>();
            TSM.ModelObjectEnumerator mybolt_enum = anglepart.GetBolts();
            int BOLT_COUNT = mybolt_enum.GetSize();

            while (mybolt_enum.MoveNext())
            {
                TSM.BoltGroup boltgrp = mybolt_enum.Current as TSM.BoltGroup;

                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane(currentview.ViewCoordinateSystem));
                TSG.CoordinateSystem boltcheck = boltgrp.GetCoordinateSystem();
                TSG.Vector xaxis = boltcheck.AxisX;
                TSG.Vector yaxis = boltcheck.AxisY;
                TSG.Vector zaxis = yaxis.Cross(xaxis);
                zaxis.Normalize();
                mymodel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TSM.TransformationPlane());
                double angle_check_FOR_NOT_IN_VIEW = Math.Abs(RadianToDegree((zaxis.GetAngleBetween(new TSG.Vector(1, 0, 0)))));
                double angle_check_FOR_SLOPE_AND_NORMAL = Math.Abs(RadianToDegree((xaxis.GetAngleBetween(new TSG.Vector(0, 1, 0)))));
                if (Convert.ToInt64(angle_check_FOR_NOT_IN_VIEW) == 90)
                {

                    list_of_bolt.Add("TRUE");

                }
                else
                {
                    list_of_bolt.Add("FALSE");

                }



            }


            bool RESULT = list_of_bolt.Any(X => X.Equals("TRUE"));
            string angle_dim;
            if (RESULT == true)
            {
                angle_dim = "NEED";

            }
            else
            {
                angle_dim = "NOT_NEED";

            }

            return angle_dim;
        }


        public class REMOVING_DUPLICATE_Z_VALUE_IN_CURRENT_VIEW : IEqualityComparer<TSG.Point>
        {
            public bool Equals(TSG.Point a, TSG.Point b)
            {


                if (( Convert.ToInt64( a.X) == Convert.ToInt64( b.X)) &&( Convert.ToInt64(a.Y) == Convert.ToInt64(b.Y)))
                {
                    return true;
                }
                else 
                { 
                    return false; 
                }

            }
            public int GetHashCode(TSG.Point codeh)
            {
                return codeh.X.GetHashCode() ^ codeh.Y.GetHashCode();
            }
        }

        public class REMOVING_DUPLICATE_angle_VALUE_IN_CURRENT_VIEW : IEqualityComparer<angle_dim_3_5>
        {
            public bool Equals(angle_dim_3_5 a, angle_dim_3_5 b)
            {
                //double ax1 = (a.pt1.X);
                //double bx1 = (b.pt1.X);
                //double ay1 = (a.pt1.Y);
                //double by1 = (b.pt1.Y);
                //double ax2 = (a.pt2.X);
                //double bx2 = (b.pt2.X);
                //double ay2 = (a.pt2.Y);
                //double by2 = (b.pt2.Y);

                bool result_for_x_1 = (Convert.ToInt64(a.pt1.X) == Convert.ToInt64(b.pt1.X));
                bool result_for_y_1 = (Convert.ToInt64(a.pt1.Y) == Convert.ToInt64(b.pt1.Y));
                bool result_for_x_2 = (Convert.ToInt64(a.pt2.X) == Convert.ToInt64(b.pt2.X));
                bool result_for_y_2 = (Convert.ToInt64(a.pt2.Y) == Convert.ToInt64(b.pt2.Y));
              

                if ((result_for_x_1 == true) && (result_for_y_1 == true) && (result_for_x_2 == true) && (result_for_y_2 == true))
                {
                    return true;
                }
                else
                {
                    return false;
                }

            }
            public int GetHashCode(angle_dim_3_5 codeh)
            {
                //return codeh.X.GetHashCode() ^ codeh.Y.GetHashCode();
                return codeh.pt1.X.GetHashCode() ^ codeh.pt1.Y.GetHashCode() ^ codeh.pt2.X.GetHashCode() ^ codeh.pt2.Y.GetHashCode();
            }
        }

        public class angle_dim_3_5
        {
            public TSG.Point pt1;
            public TSG.Point pt2;
            public TSG.Vector x_axis;
            public TSD.PointList myptlist;
            public TSM.Part angle;


        }

        public static bool AlmostEqual(double x, double y)
        {
           



            var epsilon = Math.Abs( Math.Abs( x )- Math.Abs( y));
           
            return epsilon <=10 ;

        }

        public void REMOVING_HLS(TSD.Mark mark_part)
    {
        
                

                TSD.ContainerElement CONTAINER1 = mark_part.Attributes.Content;


                IEnumerator CHECKFOR_HLS = CONTAINER1.GetEnumerator();
                ArrayList MYLIST_FOR_REMOVING_HLS = new ArrayList();
                while (CHECKFOR_HLS.MoveNext())
                {
                       var NAME = CHECKFOR_HLS.Current;
                       MYLIST_FOR_REMOVING_HLS.Add(NAME);
                }


        foreach( var NAME in MYLIST_FOR_REMOVING_HLS)
                {
                 
                    if (NAME.GetType().Equals(typeof(TSD.TextElement)))
                    {
                        TSD.TextElement CHECK2 = NAME as TSD.TextElement;
                        string VALUE = CHECK2.Value;
                        if (VALUE.Contains("HLS"))
                        {

                            CHECK2.Value = "";
                            mark_part.Modify();


                        }
                    }
                }
                


            


        

    }

        public void REMOVING_HLSTOHL( int BOLT_NUMBER, TSD.Mark mark_part)
        {

            if (BOLT_NUMBER == 1)
            {

                TSD.ContainerElement CONTAINER1 = mark_part.Attributes.Content;
      
               
    

                IEnumerator CHECKFOR_HLS = CONTAINER1.GetEnumerator();
                ArrayList MYLIST_FOR_REMOVING_HLS = new ArrayList();
                while (CHECKFOR_HLS.MoveNext())
                {

                    var NAME = CHECKFOR_HLS.Current;
                   
                    MYLIST_FOR_REMOVING_HLS.Add(NAME);
                }


                foreach (var NAME in MYLIST_FOR_REMOVING_HLS)
                {
            
                  
                    if (NAME.GetType().Equals(typeof(TSD.TextElement)))
                    {
                        TSD.TextElement CHECK2 = NAME as TSD.TextElement;
                        string VALUE = CHECK2.Value;
                        if (VALUE.Contains("HLS"))
                        {

                            CHECK2.Value = "HL";
                            mark_part.Modify();


                        }
                    }
                    else
                    {
                      string MM =  NAME.ToString();
                    }
                }
            }

        }



        private void comboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            string PROJECT_NAME = cmbclient.Text;
            if (PROJECT_NAME.Equals("LIPHART"))
            {
                chkmanualinput.Checked = false;
                chka0.Enabled = false;
                chkrdconnmark.Checked = false;
                chkknockoffdim.Checked = false;
                chkeledim.Checked = false;
                chkwptxteledim.Checked = false;
                chk1by8.Checked = false;
                chk3by32.Checked = false;
                chkscale.Checked = false;
                chkminlen.Checked = false;

                chkrdconnmark.Checked = true;
                chkknockoffdim.Checked = true;
                chkfontsize.Checked = false;



            }
            if (PROJECT_NAME.Equals("SME"))
            {
                chkmanualinput.Checked = false;
                chka0.Enabled = false;
                chkrdconnmark.Checked = false;
                chkknockoffdim.Checked = false;
                chkeledim.Checked = false;
                chkwptxteledim.Checked = false;
                chk1by8.Checked = false;
                chk3by32.Checked = false;
                chkscale.Checked = false;
                chkminlen.Checked = false;

                chkrdconnmark.Checked = true;
                chkknockoffdim.Checked = true;
                chkfontsize.Checked = false;



            }
            else if (cmbclient.Text.Equals("BENHUR"))
            {
                chkmanualinput.Checked = false;
                chka0.Enabled = false;
                chkrdconnmark.Checked = false;
                chkknockoffdim.Checked = false;
                chkeledim.Checked = false;
                chkwptxteledim.Checked = false;
                chk1by8.Checked = false;
                chk3by32.Checked = false;
                chkscale.Checked = false;
                chkminlen.Checked = false;

                chkrdconnmark.Checked = true;
                chkknockoffdim.Checked = true;
                chkeledim.Checked = true;
                chkwptxteledim.Checked = true;
                chkfontsize.Checked = false;


            }
            else if (cmbclient.Text.Equals("FORD"))
            {
                chkmanualinput.Checked = false;
                chka0.Enabled = false;
                chkrdconnmark.Checked = false;
                chkknockoffdim.Checked = false;
                chkeledim.Checked = false;
                chkwptxteledim.Checked = false;
                chk1by8.Checked = false;
                chk3by32.Checked = false;
                chkscale.Checked = false;
                chkminlen.Checked = false;

                chkeledim.Checked = true;
                chkfontsize.Checked = false;


            }
            else if (cmbclient.Text.Equals("TRINITY"))
            {
                chkmanualinput.Checked = false;
                chka0.Enabled = false;
                chkrdconnmark.Checked = false;
                chkknockoffdim.Checked = false;
                chkeledim.Checked = false;
                chkwptxteledim.Checked = false;
                chk1by8.Checked = false;
                chk3by32.Checked = false;
                chkscale.Checked = false;
                chkminlen.Checked = false;

                chkeledim.Checked = true;
                chkfontsize.Checked = false;

            }
            else if (cmbclient.Text.Equals("STEFFY&SON"))
            {
                chkmanualinput.Checked = false;
                chka0.Enabled = false;
                chkrdconnmark.Checked = false;
                chkknockoffdim.Checked = false;
                chkeledim.Checked = false;
                chkwptxteledim.Checked = false;
                chk1by8.Checked = false;
                chk3by32.Checked = false;
                chkscale.Checked = false;
                chkminlen.Checked = false;

                chkrdconnmark.Checked = true;
                chkeledim.Checked = true;
                chkfontsize.Checked = false;
            }
            else if (cmbclient.Text.Equals("HAMILTON"))
            {
                chkmanualinput.Checked = false;
                chka0.Enabled = false;
                chkrdconnmark.Checked = false;
                chkknockoffdim.Checked = false;
                chkeledim.Checked = false;
                chkwptxteledim.Checked = false;
                chk1by8.Checked = false;
                chk3by32.Checked = false;
                chkscale.Checked = false;
                chkminlen.Checked = false;

                chkrdconnmark.Checked = true;
                chkeledim.Checked = true;
                chkfontsize.Checked = false;
            }
            else if (cmbclient.Text.Equals("NONE"))
            {
                chkmanualinput.Checked = false;
                chka0.Enabled = false;
                chkrdconnmark.Checked = false;
                chkknockoffdim.Checked = false;
                chkeledim.Checked = false;
                chkwptxteledim.Checked = false;
                chkfontsize.Checked = false;
                chk1by8.Checked = false;
                chk3by32.Checked = false;
                chkscale.Checked = false;
                chkminlen.Checked = false;

            }


        }

        public void Fall_Tech(AssemblyDrawing assemblyDrawing)
        {
            DrawingObjectEnumerator drawingObjectEnumerator = assemblyDrawing.GetSheet().GetAllViews();
            while (drawingObjectEnumerator.MoveNext())
            {
                TSD.View view = drawingObjectEnumerator.Current as TSD.View;
                if (view.ViewType == TSD.View.ViewTypes.FrontView)
                {
                    DrawingObjectEnumerator marks = view.GetAllObjects(typeof(TSD.Mark));
                    while (marks.MoveNext())
                    {
                        TSD.Mark mark = marks.Current as TSD.Mark;
                        DrawingObjectEnumerator rel_objects = mark.GetRelatedObjects();
                        while (rel_objects.MoveNext())
                        {
                            TSD.Part part = rel_objects.Current as TSD.Part;
                            if(part!=null)
                            {
                                TSM.Part mdl_obj = MyModel.SelectModelObject(part.ModelIdentifier) as TSM.Part;
                                if(mdl_obj!=null)
                                {
                                    if (mdl_obj.Name.Contains("FALLTECH"))
                                    {
                                        ContainerElement containerElement = mark.Attributes.Content;
                                        mark.Attributes.Content.Clear();
                                        TSD.PropertyElement.PropertyElementType part_pos = TSD.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.PartPosition();
                                        TSD.PropertyElement position = new TSD.PropertyElement(part_pos);
                                        position.Font.Color = DrawingColors.Green;
                                        position.Font.Height = 3.175;
                                        TSD.ContainerElement mycontainer1 = new TSD.ContainerElement { position };
                                        TSD.NewLineElement newLineElement = new TSD.NewLineElement();
                                        TSD.TextElement textElement1 = new TSD.TextElement("(FIT WITH PINS,");
                                        TSD.TextElement textElement2 = new TSD.TextElement("SHACKLES AND");
                                        TSD.TextElement textElement3 = new TSD.TextElement("CATENARY LINE)");
                                        TSD.TextElement textElement4 = new TSD.TextElement("REFER SHOP NOTE");
                                        textElement1.Font.Color = DrawingColors.Red;
                                        textElement1.Font.Height = 3.175;
                                        textElement2.Font.Color = DrawingColors.Red;
                                        textElement2.Font.Height = 3.175;
                                        textElement3.Font.Color = DrawingColors.Red;
                                        textElement3.Font.Height = 3.175;
                                        textElement4.Font.Color = DrawingColors.Red;
                                        textElement4.Font.Height = 3.175;
                                        mark.Attributes.Content.Add(mycontainer1);
                                        mark.Attributes.Content.Add(newLineElement);
                                        mark.Attributes.Content.Add(textElement1);
                                        mark.Attributes.Content.Add(newLineElement);
                                        mark.Attributes.Content.Add(textElement2);
                                        mark.Attributes.Content.Add(newLineElement);
                                        mark.Attributes.Content.Add(textElement3);
                                        mark.Attributes.Content.Add(newLineElement);
                                        mark.Attributes.Content.Add(textElement4);

                                        mark.Attributes.Frame.Type = TSD.FrameTypes.None;
                                        mark.Attributes.ArrowHead.Head = TSD.ArrowheadTypes.FilledArrow;
                                        mark.Modify();
                                        view.Modify();
                                    }
                                }
                                

                            }


                        }



                    }
                }

            }

            assemblyDrawing.CommitChanges();
        }

        public void Dim_Fix(AssemblyDrawing assemblyDrawing)
        {
            DrawingObjectEnumerator drawingObjectEnumerator = assemblyDrawing.GetSheet().GetAllObjects();
            ArrayList st_dims = new ArrayList();
            Dictionary<int,double> distances = new Dictionary<int, double>();
            while (drawingObjectEnumerator.MoveNext())
            {
                var mark = drawingObjectEnumerator.Current;
                
                if (mark.GetType().Equals(typeof(TSD.AngleDimension)))
                {
                    TSD.AngleDimension angledim = mark as TSD.AngleDimension;
                    angledim.Attributes.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Free;
                    angledim.Modify();


                }
                else if (mark.GetType().Equals(typeof(TSD.RadiusDimension)))
                {
                    TSD.RadiusDimension angledim = mark as TSD.RadiusDimension;
                    angledim.Attributes.Placing.Placing = TSD.DimensionSetBaseAttributes.Placings.Free;
                    angledim.Modify();

                }
                else if (mark.GetType().Equals(typeof(TSD.StraightDimension)))
                {
                    
                    st_dims.Add(mark);
                }
            }

            foreach(StraightDimension straightDimension in st_dims)
            {

                int id = straightDimension.GetDimensionSet().GetIdentifier().ID;
                if(distances.Count==0)
                {
                    distances.Add(id, Math.Abs(straightDimension.EndPoint.X - straightDimension.StartPoint.X));
                }
                else
                {
                    if(distances.ContainsKey(id))
                    {
                        double temp_dist = distances[id];
                        if(temp_dist < Math.Abs(straightDimension.EndPoint.X - straightDimension.StartPoint.X))
                        {
                            distances.Remove(id);
                            distances.Add(id, Math.Abs(straightDimension.EndPoint.X - straightDimension.StartPoint.X));
                        }
                    }
                    else
                    {
                        distances.Add(id, Math.Abs(straightDimension.EndPoint.X - straightDimension.StartPoint.X));
                    }
                }
            }

            if (distances.Count > 0)
            {
                var max = distances.Aggregate((l, r) => l.Value > r.Value ? l : r).Key;
                int big_id = Convert.ToInt32(max);


                foreach (StraightDimension straightDimension in st_dims)
                {
                    if (straightDimension.GetDimensionSet().GetIdentifier().ID != big_id)
                    {
                        TSD.StraightDimensionSet strdim = straightDimension.GetDimensionSet() as TSD.StraightDimensionSet;
                        strdim.Attributes.Placing.Placing = DimensionSetBaseAttributes.Placings.Free;
                        strdim.Modify();

                    }
                    else
                    {

                    }
                }
            } 



            assemblyDrawing.CommitChanges();
        }
        public void ATT_SETT(TSD.AssemblyDrawing assembly_drg, TSM.Part main_part)
        {
            Type[] type_for_mark = new Type[] { typeof(TSD.Mark), typeof(TSD.MarkSet) };

           
            TSD.DrawingObjectEnumerator enum_for_views = assembly_drg.GetSheet().GetAllViews();
            while (enum_for_views.MoveNext())
            {
                TSD.View CURRENT_VIEW = enum_for_views.Current as TSD.View;
                TSD.DrawingObjectEnumerator MYMARK_ENUM = CURRENT_VIEW.GetAllObjects(type_for_mark);

                while (MYMARK_ENUM.MoveNext())
                {
                    var obj = MYMARK_ENUM.Current;
                    if (obj.GetType().Equals(typeof(TSD.Mark)))
                    {
                        TSD.Mark mymark = MYMARK_ENUM.Current as TSD.Mark;
                        TSD.DrawingObjectEnumerator MYBJ = mymark.GetRelatedObjects();
                        while (MYBJ.MoveNext())
                        {
                            var mark_part = MYBJ.Current;
                            if (mark_part.GetType().Equals(typeof(TSD.Part)))
                            {
                                TSM.Part modelpart = new TSM.Model().SelectModelObject((mark_part as TSD.Part).ModelIdentifier) as TSM.Part;

                                Guid guid = modelpart.Identifier.GUID;
                                if (guid != main_part.Identifier.GUID)
                                {
                                    TSD.ContainerElement MYCONTAINER_ELEMENT = mymark.Attributes.Content;
                                    List<string> RESULT_FOR_SLOT = new List<string>();
                                    IEnumerator CHECK1 = MYCONTAINER_ELEMENT.GetEnumerator();
                                    while (CHECK1.MoveNext())
                                    {
                                        var NAME = CHECK1.Current;
                                        if (NAME.GetType().Equals(typeof(TSD.SymbolElement)))
                                        {

                                            RESULT_FOR_SLOT.Add("TRUE");

                                            mymark.Attributes.ArrowHead.ArrowPosition = TSD.ArrowheadPositions.None;
                                            mymark.Modify();


                                        }
                                    }
                                    bool RESULT = RESULT_FOR_SLOT.Any(X => X.Contains("TRUE"));
                                    if (RESULT == false)
                                    {
                                        if ((cmbclient.Text.Equals("LIPHART"))||(cmbclient.Text.Equals("TRINITY") || (cmbclient.Text.Equals("SME"))))
                                        {
                                            mymark.Attributes.Frame.Type = TSD.FrameTypes.None;
                                            mymark.Attributes.ArrowHead.Head = TSD.ArrowheadTypes.FilledArrow;
                                            mymark.Modify();
                                        }
                                        else
                                        {
                                            mymark.Attributes.Frame.Type = TSD.FrameTypes.None;
                                            mymark.Attributes.ArrowHead.ArrowPosition = TSD.ArrowheadPositions.None;
                                            mymark.Modify();
 
                                        }

                                    }
                                }

                            }
                        }

                    }
                    else
                    {
                        TSD.MarkSet mymark = MYMARK_ENUM.Current as TSD.MarkSet;
                        if ((cmbclient.Text.Equals("LIPHART")) || (cmbclient.Text.Equals("TRINITY"))|| (cmbclient.Text.Equals("SME")))
                        {
                            mymark.Attributes.Frame.Type = TSD.FrameTypes.None;
                            mymark.Attributes.ArrowHead.Head = TSD.ArrowheadTypes.FilledArrow;
                            mymark.Modify();
                        }
                        else
                        {
                            mymark.Attributes.Frame.Type = TSD.FrameTypes.None;
                            mymark.Attributes.ArrowHead.ArrowPosition = TSD.ArrowheadPositions.None;
                            mymark.Modify();

                        }

                    }
                }
            }
        }


        public void bolt_mark_detail(TSD.AssemblyDrawing assembly_drg, TSM.Part MAIN_PART, string drg_att)
        {
            Type[] type_for_mark = new Type[] { typeof(TSD.Mark), typeof(TSD.MarkSet) };


            TSD.DrawingObjectEnumerator enum_for_views = assembly_drg.GetSheet().GetAllViews();
            while (enum_for_views.MoveNext())
            {
                TSD.View CURRENT_VIEW = enum_for_views.Current as TSD.View;

                TSD.DrawingObjectEnumerator MYMARK_ENUM = CURRENT_VIEW.GetAllObjects(type_for_mark);

                while (MYMARK_ENUM.MoveNext())
                {
                    var obj = MYMARK_ENUM.Current;
                    if (obj.GetType().Equals(typeof(TSD.Mark)))
                    {
                        TSD.Mark mymark = MYMARK_ENUM.Current as TSD.Mark;

                        TSD.DrawingObjectEnumerator MYBJ = mymark.GetRelatedObjects();
                        while (MYBJ.MoveNext())
                        {
                            var mark_part = MYBJ.Current;
                            if (mark_part.GetType().Equals(typeof(TSD.Bolt)))
                            {



                                TSM.BoltGroup modelpart = new TSM.Model().SelectModelObject((mark_part as TSD.Bolt).ModelIdentifier) as TSM.BoltGroup;
                                int NO_BOLT = modelpart.BoltPositions.Count;
                                if (modelpart.BoltType.Equals(TSM.BoltGroup.BoltTypeEnum.BOLT_TYPE_SITE))
                                {
                                    mymark.Attributes.Content.Clear();
                                    TSD.PropertyElement.PropertyElementType no_of_bolts = TSD.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.NumberOfBolts();
                                    TSD.PropertyElement final_no_of_bolts = new TSD.PropertyElement(no_of_bolts);
                                    final_no_of_bolts.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            final_no_of_bolts.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            final_no_of_bolts.Font.Height  = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        final_no_of_bolts.Font.Height = 2.38125;

                                    }
                                    TSD.SymbolElement mysymbol = new TSD.SymbolElement(new TSD.SymbolInfo("xsteel", 64));
                                    mysymbol.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            mysymbol.Height = 3.571875;
                                        }
                                        else
                                        {
                                            mysymbol.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        mysymbol.Height = 2.38125;

                                    }
                                    TSD.PropertyElement.PropertyElementType size = TSD.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.Size();
                                    TSD.PropertyElement final_size = new TSD.PropertyElement(size);
                                    final_size.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            final_size.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            final_size.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        final_size.Font.Height = 2.38125;

                                    }

                                    string HLSTEXT = "";
                                    if (NO_BOLT == 1)
                                    {
                                        HLSTEXT = "HL";
                                    }
                                    else
                                    {
                                        HLSTEXT = "HLS";

                                    }


                                    TSD.TextElement hls = new TSD.TextElement(HLSTEXT);
                                    hls.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            hls.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            hls.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        hls.Font.Height = 2.38125;
                                    }

                                    TSD.PropertyElement.PropertyElementType Assemblytype = TSD.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.AssemblyType();
                                    TSD.PropertyElement final_Assemblytype = new TSD.PropertyElement(Assemblytype);
                                    final_Assemblytype.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            final_Assemblytype.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            final_Assemblytype.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        final_Assemblytype.Font.Height = 2.38125;

                                    }

                                    TSD.TextElement Boltstext = new TSD.TextElement("BOLTS");
                                    Boltstext.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            Boltstext.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            Boltstext.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        Boltstext.Font.Height = 2.38125;
                                    }

                                    TSD.PropertyElement.PropertyElementType boltdia = TSD.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.BoltDiameter();
                                    TSD.PropertyElement final_boltdia = new TSD.PropertyElement(boltdia);
                                    final_boltdia.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            final_boltdia.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            final_boltdia.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        final_boltdia.Font.Height = 2.38125;

                                    }

                                    TSD.TextElement DIA_SYMBOL = new TSD.TextElement("\"Ø");
                                    DIA_SYMBOL.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            DIA_SYMBOL.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            DIA_SYMBOL.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        DIA_SYMBOL.Font.Height = 2.38125;

                                    }

                                    TSD.PropertyElement.PropertyElementType STANDARD = TSD.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.Standard();
                                    TSD.PropertyElement final_STANDARD = new TSD.PropertyElement(STANDARD);
                                    final_STANDARD.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            final_STANDARD.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            final_STANDARD.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        final_STANDARD.Font.Height = 2.38125;

                                    }

                                    TSD.PropertyElement.PropertyElementType BOLT_LENGTH = TSD.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.BoltLength();
                                    TSD.PropertyElement final_BOLT_LENGTH = new TSD.PropertyElement(BOLT_LENGTH);
                                    final_BOLT_LENGTH.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            final_BOLT_LENGTH.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            final_BOLT_LENGTH.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        final_BOLT_LENGTH.Font.Height = 2.38125;

                                    }


                                    if ((cmbclient.Text.Equals("BENHUR")) || (cmbclient.Text.Equals("STEFFY&SON")))
                                    {
                                        TSD.ContainerElement mycontainer1 = new TSD.ContainerElement { final_no_of_bolts };
                                        TSD.ContainerElement mycontainer2 = new TSD.ContainerElement { mysymbol };
                                        TSD.ContainerElement mycontainer3 = new TSD.ContainerElement { final_size };
                                        TSD.ContainerElement mycontainer4 = new TSD.ContainerElement { hls };
                                        mymark.Attributes.Content.Add(mycontainer1);
                                        mymark.Attributes.Content.Add(mycontainer2);
                                        mymark.Attributes.Content.Add(mycontainer3);
                                        mymark.Attributes.Content.Add(mycontainer4);
                                        mymark.Attributes.Frame.Type = TSD.FrameTypes.Sharpened;

                                    }
                                    else if ((cmbclient.Text.Equals("FORD")) || (cmbclient.Text.Equals("HAMILTON")))
                                    {
                                        TSD.ContainerElement mycontainer1 = new TSD.ContainerElement { final_no_of_bolts };
                                        TSD.ContainerElement mycontainer2 = new TSD.ContainerElement { mysymbol };
                                        TSD.ContainerElement mycontainer3 = new TSD.ContainerElement { final_size };

                                        mymark.Attributes.Content.Add(mycontainer1);
                                        mymark.Attributes.Content.Add(mycontainer2);
                                        mymark.Attributes.Content.Add(mycontainer3);

                                        mymark.Attributes.Frame.Type = TSD.FrameTypes.Round;
                                    }
                                    else if (cmbclient.Text.Equals("TRINITY"))
                                    {
                                        TSD.ContainerElement mycontainer1 = new TSD.ContainerElement { final_no_of_bolts };
                                        TSD.ContainerElement mycontainer2 = new TSD.ContainerElement { mysymbol };
                                        TSD.ContainerElement mycontainer3 = new TSD.ContainerElement { final_size };
                                        TSD.ContainerElement mycontainer4 = new TSD.ContainerElement { hls };
                                        mymark.Attributes.Content.Add(mycontainer1);
                                        mymark.Attributes.Content.Add(mycontainer2);
                                        mymark.Attributes.Content.Add(mycontainer3);
                                        mymark.Attributes.Content.Add(mycontainer4);
                                        mymark.Attributes.Frame.Type = TSD.FrameTypes.None;
                                    }
                                    else if (cmbclient.Text.Equals("NONE"))
                                    {
                                        TSD.ContainerElement mycontainer1 = new TSD.ContainerElement { final_no_of_bolts };
                                        TSD.ContainerElement mycontainer2 = new TSD.ContainerElement { mysymbol };
                                        TSD.ContainerElement mycontainer3 = new TSD.ContainerElement { final_size };

                                        mymark.Attributes.Content.Add(mycontainer1);
                                        mymark.Attributes.Content.Add(mycontainer2);
                                        mymark.Attributes.Content.Add(mycontainer3);

                                        mymark.Attributes.Frame.Type = TSD.FrameTypes.Round;
                                    }
                                    else if (cmbclient.Text.Equals("SME"))
                                    {
                                        string dia_text = "";
                                        Hashtable hashtable = new Hashtable();
                                        MyModel.GetProjectInfo().GetStringUserProperties(ref hashtable);

                                        dia_text = hashtable["PROJECT_STD_HOLE_DI"] as string;
                                        double dia = 0;
                                        if (dia_text.EndsWith("\""))
                                        {
                                            string[] split_text = dia_text.Split('/');
                                            double numerator = Double.Parse(split_text[0]);
                                            double denominator = Convert.ToDouble(split_text[1].Substring(0, split_text[1].Length - 1));
                                            dia = (numerator / denominator) * 25.4;
                                        }
                                        else
                                        {
                                            string[] split_text = dia_text.Split('\"');
                                            double inch = Double.Parse(split_text[0]);
                                            string[] fraction_split = split_text[1].Split('/');
                                            double numerator = Double.Parse(fraction_split[0]);
                                            double denominator = Convert.ToDouble(fraction_split[1]);
                                            dia = (inch + (numerator / denominator)) * 25.4;
                                        }

                                        if (modelpart.HoleType == TSM.BoltGroup.BoltHoleTypeEnum.HOLE_TYPE_OVERSIZED)
                                        {

                                            double oversize_dia = modelpart.BoltSize + modelpart.Tolerance + modelpart.SlottedHoleX;
                                            Tekla.Structures.Datatype.Distance distance = new Tekla.Structures.Datatype.Distance();
                                            distance.Millimeters = oversize_dia;
                                            TSD.TextElement textElement1 = new TSD.TextElement("( ");
                                            TSD.TextElement textElement2 = new TSD.TextElement(" )");
                                            TSD.TextElement textElement3 = new TSD.TextElement(" - ");
                                            TSD.TextElement textElement4 = new TSD.TextElement(distance.ToFractionalInchesString());
                                            textElement1.Font.Color = TSD.DrawingColors.Green;
                                            textElement2.Font.Color = TSD.DrawingColors.Green;
                                            textElement3.Font.Color = TSD.DrawingColors.Green;

                                            TSD.ContainerElement mycontainer1 = new TSD.ContainerElement { final_no_of_bolts };

                                            mymark.Attributes.Content.Add(textElement1);
                                            mymark.Attributes.Content.Add(mycontainer1);
                                            mymark.Attributes.Content.Add(textElement2);
                                            mymark.Attributes.Content.Add(textElement3);
                                            mymark.Attributes.Content.Add(textElement4);

                                            mymark.Attributes.Frame.Type = TSD.FrameTypes.Rectangular;
                                            mymark.Attributes.ArrowHead.Head = TSD.ArrowheadTypes.FilledArrow;

                                        }
                                        else
                                        {
                                            if (Math.Abs(modelpart.BoltSize + modelpart.Tolerance - dia) < 0.2)
                                            {
                                                TSM.Part part1 = modelpart.PartToBeBolted;
                                                TSM.Part part2 = modelpart.PartToBoltTo;
                                                ArrayList parts = modelpart.GetOtherPartsToBolt();
                                                parts.Add(part1);
                                                parts.Add(part2);
                                                bool found = false;
                                                foreach (TSM.Part part in parts)
                                                {
                                                    if (part != null)
                                                    {
                                                        if (MAIN_PART.Identifier.GUID.ToString() == part.Identifier.GUID.ToString())
                                                        {
                                                            found = true;
                                                            mymark.Delete();
                                                        }
                                                    }
                                                }
                                                if (found == false)
                                                {
                                                    TSD.TextElement textElement1 = new TSD.TextElement("( ");
                                                    TSD.TextElement textElement2 = new TSD.TextElement(" )");
                                                    TSD.TextElement textElement3 = new TSD.TextElement(" - ");
                                                    textElement1.Font.Color = TSD.DrawingColors.Green;
                                                    textElement2.Font.Color = TSD.DrawingColors.Green;
                                                    textElement3.Font.Color = TSD.DrawingColors.Green;


                                                    TSD.ContainerElement mycontainer1 = new TSD.ContainerElement { final_no_of_bolts };
                                                    TSD.ContainerElement mycontainer2 = new TSD.ContainerElement { mysymbol };
                                                    TSD.ContainerElement mycontainer3 = new TSD.ContainerElement { final_size };

                                                    mymark.Attributes.Content.Add(textElement1);
                                                    mymark.Attributes.Content.Add(mycontainer1);
                                                    mymark.Attributes.Content.Add(textElement2);
                                                    mymark.Attributes.Content.Add(textElement3);
                                                    mymark.Attributes.Content.Add(mycontainer3);

                                                    mymark.Attributes.Frame.Type = TSD.FrameTypes.Rectangular;
                                                    mymark.Attributes.ArrowHead.Head = TSD.ArrowheadTypes.FilledArrow;
                                                }

                                            }
                                            else
                                            {
                                                TSD.TextElement textElement1 = new TSD.TextElement("( ");
                                                TSD.TextElement textElement2 = new TSD.TextElement(" )");
                                                TSD.TextElement textElement3 = new TSD.TextElement(" - ");
                                                textElement1.Font.Color = TSD.DrawingColors.Green;
                                                textElement2.Font.Color = TSD.DrawingColors.Green;
                                                textElement3.Font.Color = TSD.DrawingColors.Green;


                                                TSD.ContainerElement mycontainer1 = new TSD.ContainerElement { final_no_of_bolts };
                                                TSD.ContainerElement mycontainer2 = new TSD.ContainerElement { mysymbol };
                                                TSD.ContainerElement mycontainer3 = new TSD.ContainerElement { final_size };

                                                mymark.Attributes.Content.Add(textElement1);
                                                mymark.Attributes.Content.Add(mycontainer1);
                                                mymark.Attributes.Content.Add(textElement2);
                                                mymark.Attributes.Content.Add(textElement3);
                                                mymark.Attributes.Content.Add(mycontainer3);

                                                mymark.Attributes.Frame.Type = TSD.FrameTypes.Rectangular;
                                                mymark.Attributes.ArrowHead.Head = TSD.ArrowheadTypes.FilledArrow;
                                            }
                                            if (modelpart.HoleType == TSM.BoltGroup.BoltHoleTypeEnum.HOLE_TYPE_OVERSIZED)
                                            {

                                                double oversize_dia = modelpart.BoltSize + modelpart.Tolerance + modelpart.SlottedHoleX;
                                                Tekla.Structures.Datatype.Distance distance = new Tekla.Structures.Datatype.Distance();
                                                distance.Millimeters = oversize_dia;
                                                TSD.TextElement textElement1 = new TSD.TextElement("( ");
                                                TSD.TextElement textElement2 = new TSD.TextElement(" )");
                                                TSD.TextElement textElement3 = new TSD.TextElement(" - ");
                                                TSD.TextElement textElement4 = new TSD.TextElement(distance.ToFractionalInchesString());
                                                textElement1.Font.Color = TSD.DrawingColors.Green;
                                                textElement2.Font.Color = TSD.DrawingColors.Green;
                                                textElement3.Font.Color = TSD.DrawingColors.Green;

                                                TSD.ContainerElement mycontainer1 = new TSD.ContainerElement { final_no_of_bolts };

                                                mymark.Attributes.Content.Add(textElement1);
                                                mymark.Attributes.Content.Add(mycontainer1);
                                                mymark.Attributes.Content.Add(textElement2);
                                                mymark.Attributes.Content.Add(textElement3);
                                                mymark.Attributes.Content.Add(textElement4);

                                                mymark.Attributes.Frame.Type = TSD.FrameTypes.Rectangular;
                                                mymark.Attributes.ArrowHead.Head = TSD.ArrowheadTypes.FilledArrow;

                                            }
                                        }



                                        



                                    }
                                    else if (cmbclient.Text.Equals("HILLSDALE"))
                                    {
                                        TSD.ContainerElement mycontainer1 = new TSD.ContainerElement { final_no_of_bolts };
                                        TSD.ContainerElement mycontainer2 = new TSD.ContainerElement { mysymbol };
                                        TSD.ContainerElement mycontainer3 = new TSD.ContainerElement { final_size };
                                        TSD.ContainerElement mycontainer4 = new TSD.ContainerElement { final_Assemblytype };
                                        TSD.ContainerElement mycontainer5 = new TSD.ContainerElement { Boltstext };
                                        TSD.ContainerElement mycontainer6 = new TSD.ContainerElement { final_boltdia };
                                        TSD.ContainerElement mycontainer7 = new TSD.ContainerElement { DIA_SYMBOL };
                                        TSD.ContainerElement mycontainer8 = new TSD.ContainerElement { final_STANDARD };
                                        TSD.ContainerElement mycontainer9 = new TSD.ContainerElement { final_BOLT_LENGTH };

                                        //TSD.ContainerElement mycontainer4 = new TSD.ContainerElement { hls };
                                        mymark.Attributes.Content.Add(mycontainer1);
                                        mymark.Attributes.Content.Add(mycontainer2);
                                        mymark.Attributes.Content.Add(mycontainer3);
                                        mymark.Attributes.Content.Add(new TSD.NewLineElement());
                                        mymark.Attributes.Content.Add(mycontainer4);
                                        mymark.Attributes.Content.Add(mycontainer5);
                                        mymark.Attributes.Content.Add(mycontainer6);
                                        mymark.Attributes.Content.Add(mycontainer7);
                                        mymark.Attributes.Content.Add(mycontainer8);
                                        mymark.Attributes.Content.Add(mycontainer9);
                                        mymark.Attributes.Frame.Type = TSD.FrameTypes.Round;
                                    }
                                    else
                                    {
                                        TSD.ContainerElement mycontainer1 = new TSD.ContainerElement { final_no_of_bolts };
                                        TSD.ContainerElement mycontainer2 = new TSD.ContainerElement { mysymbol };
                                        TSD.ContainerElement mycontainer3 = new TSD.ContainerElement { final_size };
                                        TSD.ContainerElement mycontainer4 = new TSD.ContainerElement { hls };
                                        mymark.Attributes.Content.Add(mycontainer1);
                                        mymark.Attributes.Content.Add(mycontainer2);
                                        mymark.Attributes.Content.Add(mycontainer3);
                                        mymark.Attributes.Content.Add(mycontainer4);
                                        mymark.Attributes.Frame.Type = TSD.FrameTypes.Round;
                                    }


                                    mymark.Modify();









                                }
                                else if (modelpart.BoltType.Equals(TSM.BoltGroup.BoltTypeEnum.BOLT_TYPE_WORKSHOP))
                                {
                                    TSM.Part PARTTOBOLTTO = modelpart.PartToBoltTo;
                                    TSM.Part PARTTOBEBOLTED = modelpart.PartToBeBolted;
                                    ArrayList OTHER_PART = modelpart.OtherPartsToBolt;

                                    string HLSTEXT = "";
                                    if (NO_BOLT == 1)
                                    {
                                        HLSTEXT = "HL";
                                    }
                                    else
                                    {
                                        HLSTEXT = "HLS";

                                    }


                                    TSD.TextElement hls = new TSD.TextElement(HLSTEXT);
                                    hls.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            hls.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            hls.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        hls.Font.Height = 2.38125;
                                    }

                                    string TEXT_FOR_SUBPART = "";
                                    if (!PARTTOBEBOLTED.Identifier.GUID.Equals(MAIN_PART.Identifier.GUID))
                                    {
                                        string prof_type = "";
                                        PARTTOBEBOLTED.GetReportProperty("PROFILE_TYPE", ref prof_type);
                                        if (prof_type == "L")
                                        {
                                            TEXT_FOR_SUBPART = "HLS IN ANGLE";

                                        }
                                        else if (prof_type == "B")
                                        {
                                            TEXT_FOR_SUBPART = "HLS IN PLATE";

                                        }
                                        else
                                        {

                                        }
                                    }
                                    else if (!PARTTOBOLTTO.Identifier.GUID.Equals(MAIN_PART.Identifier.GUID))
                                    {
                                        string prof_type = "";
                                        PARTTOBOLTTO.GetReportProperty("PROFILE_TYPE", ref prof_type);
                                        if (prof_type == "L")
                                        {
                                            TEXT_FOR_SUBPART = "HLS IN ANGLE";

                                        }
                                        else if (prof_type == "B")
                                        {
                                            TEXT_FOR_SUBPART = "HLS IN PLATE";

                                        }
                                        else
                                        {

                                        }


                                    }


                                    mymark.Attributes.Content.Clear();
                                    TSD.PropertyElement.PropertyElementType no_of_bolts = TSD.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.NumberOfBolts();
                                    TSD.PropertyElement final_no_of_bolts = new TSD.PropertyElement(no_of_bolts);
                                    final_no_of_bolts.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            final_no_of_bolts.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            final_no_of_bolts.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        final_no_of_bolts.Font.Height = 2.38125;

                                    }
                                    TSD.SymbolElement mysymbol = new TSD.SymbolElement(new TSD.SymbolInfo("xsteel", 64));
                                    mysymbol.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            mysymbol.Height = 3.571875;
                                        }
                                        else
                                        {
                                            mysymbol.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        mysymbol.Height = 2.38125;

                                    }
                                    TSD.PropertyElement.PropertyElementType size = TSD.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.Size();
                                    TSD.PropertyElement final_size = new TSD.PropertyElement(size);
                                    final_size.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            final_size.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            final_size.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        final_size.Font.Height = 2.38125;

                                    }
                                    TSD.TextElement hls_IN_MAINPART = new TSD.TextElement(" HLS IN BEAM");
                                    hls_IN_MAINPART.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            hls_IN_MAINPART.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            hls_IN_MAINPART.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        hls_IN_MAINPART.Font.Height = 2.38125;

                                    }



                                    TSD.PropertyElement.PropertyElementType HOLE_DIA = TSD.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.HoleDiameter();
                                    TSD.PropertyElement final_HOLE_DIA = new TSD.PropertyElement(HOLE_DIA);
                                    final_HOLE_DIA.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            final_HOLE_DIA.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            final_HOLE_DIA.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        final_HOLE_DIA.Font.Height = 2.38125;

                                    }



                                    TSD.TextElement hls_IN_SUBPART = new TSD.TextElement(TEXT_FOR_SUBPART);
                                    hls_IN_SUBPART.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            hls_IN_SUBPART.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            hls_IN_SUBPART.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        hls_IN_SUBPART.Font.Height = 2.38125;

                                    }

                                    TSD.TextElement FOR = new TSD.TextElement("FOR");
                                    FOR.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            FOR.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            FOR.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        FOR.Font.Height = 2.38125;

                                    }

                                    TSD.PropertyElement.PropertyElementType BOLT_DIA = TSD.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.BoltDiameter();
                                    TSD.PropertyElement final_BOLT_DIA = new TSD.PropertyElement(BOLT_DIA);
                                    final_BOLT_DIA.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            final_BOLT_DIA.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            final_BOLT_DIA.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        final_BOLT_DIA.Font.Height = 2.38125;

                                    }

                                    TSD.PropertyElement.PropertyElementType STANDARD = TSD.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.Standard();
                                    TSD.PropertyElement final_STANDARD = new TSD.PropertyElement(STANDARD);
                                    final_STANDARD.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            final_STANDARD.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            final_STANDARD.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        final_STANDARD.Font.Height = 2.38125;

                                    }

                                    TSD.TextElement DIA_SYMBOLwithx = new TSD.TextElement("\"Ø X");
                                    DIA_SYMBOLwithx.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            DIA_SYMBOLwithx.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            DIA_SYMBOLwithx.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        DIA_SYMBOLwithx.Font.Height = 2.38125;

                                    }
                                    TSD.TextElement DIA_SYMBOL = new TSD.TextElement("\"Ø");
                                    DIA_SYMBOL.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            DIA_SYMBOL.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            DIA_SYMBOL.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        DIA_SYMBOL.Font.Height = 2.38125;

                                    }

                                    TSD.PropertyElement.PropertyElementType BOLT_LENGTH = TSD.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.BoltLength();
                                    TSD.PropertyElement final_BOLT_LENGTH = new TSD.PropertyElement(BOLT_LENGTH);
                                    final_BOLT_LENGTH.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            final_BOLT_LENGTH.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            final_BOLT_LENGTH.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        final_BOLT_LENGTH.Font.Height = 2.38125;

                                    }
                                    TSD.TextElement shoptext = new TSD.TextElement("SHOPBOLT");
                                    shoptext.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            shoptext.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            shoptext.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        shoptext.Font.Height = 2.38125;

                                    }
                                    TSD.TextElement BOLTS = new TSD.TextElement("BOLTS");
                                    BOLTS.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            BOLTS.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            BOLTS.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        BOLTS.Font.Height = 2.38125;

                                    }

                                    TSD.TextElement x = new TSD.TextElement("X");
                                    x.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            x.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            x.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        x.Font.Height = 2.38125;

                                    }



                                    TSD.PropertyElement.PropertyElementType Assemblytype = TSD.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.AssemblyType();
                                    TSD.PropertyElement final_Assemblytype = new TSD.PropertyElement(Assemblytype);
                                    final_Assemblytype.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            final_Assemblytype.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            final_Assemblytype.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        final_Assemblytype.Font.Height = 2.38125;

                                    }

                                    TSD.TextElement Boltstext = new TSD.TextElement("BOLTS");
                                    Boltstext.Font.Color = TSD.DrawingColors.Green;
                                    if ((drg_att == "SK_BEAM_A1") || (chk1by8.Checked == true))
                                    {
                                        if ((cmbclient.Text.Equals("HILLSDALE")) || (chk9by64.Checked == true))
                                        {
                                            Boltstext.Font.Height = 3.571875;
                                        }
                                        else
                                        {
                                            Boltstext.Font.Height = 3.175;
                                        }
                                    }
                                    else
                                    {
                                        Boltstext.Font.Height = 2.38125;
                                    }




                                    TSD.ContainerElement mycontainer1 = new TSD.ContainerElement { final_no_of_bolts };
                                    TSD.ContainerElement mycontainer2 = new TSD.ContainerElement { mysymbol };
                                    TSD.ContainerElement mycontainer3 = new TSD.ContainerElement { final_size };
                                    TSD.ContainerElement mycontainer4 = new TSD.ContainerElement { hls_IN_MAINPART };
                                    TSD.ContainerElement mycontainer5 = new TSD.ContainerElement { final_no_of_bolts };
                                    TSD.ContainerElement mycontainer6 = new TSD.ContainerElement { mysymbol };
                                    TSD.ContainerElement mycontainer7 = new TSD.ContainerElement { final_HOLE_DIA };
                                    TSD.ContainerElement mycontainer8 = new TSD.ContainerElement { DIA_SYMBOL };
                                    TSD.ContainerElement mycontainer9 = new TSD.ContainerElement { hls_IN_SUBPART };
                                    TSD.ContainerElement mycontainer10 = new TSD.ContainerElement { FOR };
                                    TSD.ContainerElement mycontainer11 = new TSD.ContainerElement { final_BOLT_DIA };
                                    TSD.ContainerElement mycontainer12 = new TSD.ContainerElement { DIA_SYMBOLwithx };
                                    TSD.ContainerElement mycontainer13 = new TSD.ContainerElement { final_BOLT_LENGTH };
                                    TSD.ContainerElement mycontainer14 = new TSD.ContainerElement { final_STANDARD };
                                    TSD.ContainerElement mycontainer15 = new TSD.ContainerElement { shoptext };
                                    TSD.ContainerElement mycontainer16 = new TSD.ContainerElement { BOLTS };
                                    TSD.ContainerElement mycontainer17 = new TSD.ContainerElement { x };


                                    TSD.ContainerElement mycontainer3_1 = new TSD.ContainerElement { hls };
                                    TSD.ContainerElement mycontainer3_2 = new TSD.ContainerElement { final_Assemblytype };
                                    TSD.ContainerElement mycontainer3_3 = new TSD.ContainerElement { Boltstext };





                                    TSD.ContainerElement FIRST_LINE_CONTENT = new TSD.ContainerElement { };
                                    FIRST_LINE_CONTENT.Add(mycontainer1);
                                    FIRST_LINE_CONTENT.Add(mycontainer2);
                                    FIRST_LINE_CONTENT.Add(mycontainer7);
                                    FIRST_LINE_CONTENT.Add(mycontainer8);
                                    FIRST_LINE_CONTENT.Add(mycontainer4);
                                    TSD.ContainerElement SECOND_LINE_CONTENT = new TSD.ContainerElement { };
                                    SECOND_LINE_CONTENT.Add(mycontainer1);
                                    SECOND_LINE_CONTENT.Add(mycontainer2);
                                    SECOND_LINE_CONTENT.Add(mycontainer3);
                                    SECOND_LINE_CONTENT.Add(mycontainer9);

                                    if (cmbclient.Text.Equals("BENHUR"))
                                    {

                                        TSD.ContainerElement MAIN_CONTENT = new TSD.ContainerElement();
                                        MAIN_CONTENT.Frame.Type = TSD.FrameTypes.Sharpened;
                                        MAIN_CONTENT.Add(FIRST_LINE_CONTENT);
                                        MAIN_CONTENT.Add(new TSD.NewLineElement());
                                        MAIN_CONTENT.Add(SECOND_LINE_CONTENT);


                                        mymark.Attributes.Frame.Type = TSD.FrameTypes.None;
                                        mymark.Attributes.Content.Add(MAIN_CONTENT);
                                        mymark.Attributes.Content.Add(new TSD.NewLineElement());
                                        mymark.Attributes.Content.Add(mycontainer10);
                                        mymark.Attributes.Content.Add(mycontainer11);
                                        mymark.Attributes.Content.Add(mycontainer12);
                                        mymark.Attributes.Content.Add(mycontainer13);
                                        mymark.Attributes.Content.Add(mycontainer14);
                                        mymark.Attributes.Content.Add(new TSD.NewLineElement());
                                        mymark.Attributes.Content.Add(mycontainer15);
                                        mymark.Modify();
                                    }
                                    else if (cmbclient.Text.Equals("STEFFY&SON"))
                                    {
                                        TSD.ContainerElement MAIN_CONTENT = new TSD.ContainerElement();
                                        MAIN_CONTENT.Frame.Type = TSD.FrameTypes.Sharpened;
                                        MAIN_CONTENT.Add(FIRST_LINE_CONTENT);
                                        MAIN_CONTENT.Add(new TSD.NewLineElement());
                                        MAIN_CONTENT.Add(SECOND_LINE_CONTENT);


                                        mymark.Attributes.Frame.Type = TSD.FrameTypes.None;
                                        mymark.Attributes.Content.Add(MAIN_CONTENT);
                                        mymark.Attributes.Content.Add(new TSD.NewLineElement());
                                        mymark.Attributes.Content.Add(mycontainer10);
                                        mymark.Attributes.Content.Add(mycontainer11);
                                        //mymark.Attributes.Content.Add(mycontainer8);
                                        mymark.Attributes.Content.Add(mycontainer12);
                                        mymark.Attributes.Content.Add(mycontainer13);
                                        mymark.Attributes.Content.Add(mycontainer14);
                                        mymark.Attributes.Content.Add(mycontainer16);

                                        mymark.Modify();

                                    }

                                    else if (cmbclient.Text.Equals("TRINITY"))
                                    {
                                        //TSD.ContainerElement MAIN_CONTENT = new TSD.ContainerElement();
                                        //MAIN_CONTENT.Frame.Type = TSD.FrameTypes.None;
                                        //MAIN_CONTENT.Add(FIRST_LINE_CONTENT);
                                        //MAIN_CONTENT.Add(new TSD.NewLineElement());
                                        //MAIN_CONTENT.Add(SECOND_LINE_CONTENT);


                                        //mymark.Attributes.Frame.Type = TSD.FrameTypes.None;
                                        //mymark.Attributes.Content.Add(MAIN_CONTENT);
                                        //mymark.Attributes.Content.Add(new TSD.NewLineElement());
                                        //mymark.Attributes.Content.Add(mycontainer10);
                                        //mymark.Attributes.Content.Add(mycontainer11);
                                        ////mymark.Attributes.Content.Add(mycontainer8);
                                        //mymark.Attributes.Content.Add(mycontainer12);
                                        //mymark.Attributes.Content.Add(mycontainer13);
                                        //mymark.Attributes.Content.Add(mycontainer14);
                                        //mymark.Attributes.Content.Add(mycontainer16);


                                        mymark.Attributes.Content.Add(mycontainer1);
                                        mymark.Attributes.Content.Add(mycontainer2);
                                        mymark.Attributes.Content.Add(mycontainer11);
                                        mymark.Attributes.Content.Add(mycontainer8);
                                        mymark.Attributes.Content.Add(mycontainer14);
                                        mymark.Attributes.Content.Add(mycontainer17);
                                        mymark.Attributes.Content.Add(mycontainer13);
                                        mymark.Attributes.Frame.Type = TSD.FrameTypes.None;

                                        mymark.Modify();

                                        mymark.Modify();

                                    }
                                    else if (cmbclient.Text.Equals("HILLSDALE"))
                                    {
                                        //TSD.ContainerElement mycontainer1 = new TSD.ContainerElement { final_no_of_bolts };
                                        //TSD.ContainerElement mycontainer2 = new TSD.ContainerElement { mysymbol };
                                        //TSD.ContainerElement mycontainer3 = new TSD.ContainerElement { final_size };
                                        //TSD.ContainerElement mycontainer4 = new TSD.ContainerElement { final_Assemblytype };
                                        //TSD.ContainerElement mycontainer5 = new TSD.ContainerElement { Boltstext };
                                        //TSD.ContainerElement mycontainer6 = new TSD.ContainerElement { final_boltdia };
                                        //TSD.ContainerElement mycontainer7 = new TSD.ContainerElement { DIA_SYMBOL };
                                        //TSD.ContainerElement mycontainer8 = new TSD.ContainerElement { final_STANDARD };
                                        //TSD.ContainerElement mycontainer9 = new TSD.ContainerElement { final_BOLT_LENGTH };

                                        //TSD.ContainerElement mycontainer4 = new TSD.ContainerElement { hls };
                                        mymark.Attributes.Content.Add(mycontainer1);
                                        mymark.Attributes.Content.Add(mycontainer2);
                                        mymark.Attributes.Content.Add(mycontainer3);
                                        mymark.Attributes.Content.Add(mycontainer3_1);
                                        mymark.Attributes.Content.Add(new TSD.NewLineElement());
                                        mymark.Attributes.Content.Add(mycontainer3_2);
                                        mymark.Attributes.Content.Add(mycontainer3_3);
                                        mymark.Attributes.Content.Add(mycontainer11);
                                        mymark.Attributes.Content.Add(mycontainer8);
                                        mymark.Attributes.Content.Add(mycontainer14);
                                        mymark.Attributes.Content.Add(mycontainer13);
                                        //mymark.Attributes.Content.Add(mycontainer4);
                                        //mymark.Attributes.Content.Add(mycontainer5);
                                        //mymark.Attributes.Content.Add(mycontainer6);
                                        //mymark.Attributes.Content.Add(mycontainer7);
                                        //mymark.Attributes.Content.Add(mycontainer8);
                                        //mymark.Attributes.Content.Add(mycontainer9);
                                        mymark.Attributes.Frame.Type = TSD.FrameTypes.Round;
                                        mymark.Modify();
                                    }
                                    else
                                    {
                                        TSD.ContainerElement MAIN_CONTENT = new TSD.ContainerElement();
                                        MAIN_CONTENT.Frame.Type = TSD.FrameTypes.Round;
                                        MAIN_CONTENT.Add(FIRST_LINE_CONTENT);
                                        MAIN_CONTENT.Add(new TSD.NewLineElement());
                                        MAIN_CONTENT.Add(SECOND_LINE_CONTENT);


                                        mymark.Attributes.Frame.Type = TSD.FrameTypes.None;
                                        mymark.Attributes.Content.Add(MAIN_CONTENT);
                                        mymark.Attributes.Content.Add(new TSD.NewLineElement());
                                        mymark.Attributes.Content.Add(mycontainer10);
                                        mymark.Attributes.Content.Add(mycontainer11);
                                        //mymark.Attributes.Content.Add(mycontainer8);
                                        mymark.Attributes.Content.Add(mycontainer12);
                                        mymark.Attributes.Content.Add(mycontainer13);
                                        mymark.Attributes.Content.Add(mycontainer14);
                                        mymark.Attributes.Content.Add(mycontainer16);

                                        mymark.Modify();

                                    }

                                }

                            }
                        }

                    }
                    else if (obj.GetType().Equals(typeof(TSD.MarkSet)))
                    {

                    }

                }

            }
        }

        public List<TSD.DrawingObject> drg_object_from_enumerator(TSD.DrawingObjectEnumerator drgobjectenum)
        {
            List<TSD.DrawingObject> drgpartlist = new List<TSD.DrawingObject>();
            while (drgobjectenum.MoveNext())
            {

                TSD.DrawingObject drgpart = drgobjectenum.Current as TSD.DrawingObject;
                drgpartlist.Add(drgpart);


            }
            return drgpartlist;
        }

        private void checkBox4_CheckedChanged(object sender, EventArgs e)
        {
         
            if (chkscale.Checked == true)
            {
              
               txtscale.Enabled = true;
            
               
            }
            else
            {
                txtscale.Clear();
                txtscale.Enabled = false;
            
            }

          

        }

        private void checkBox5_CheckedChanged(object sender, EventArgs e)
        {

            if (chkminlen.Checked == true)
            {

                txtminlen.Enabled = true;


            }
            else
            {
                txtminlen.Clear();
                txtminlen.Enabled = false;

            }

        }

        private void checkBox7_CheckedChanged(object sender, EventArgs e)
        {
            if (chksecscale.Checked == true)
            {
                cmbsecscale.Enabled = true;
            }
            else
            {
                cmbsecscale.ResetText();
                cmbsecscale.Enabled = false;

            }
        }

        private void checkBox12_CheckedChanged(object sender, EventArgs e)
        {
            if (chkmanualinput.Checked == true)
            {
                if (cmbclient.Text.Equals("TRINITY") || cmbclient.Text.Equals("LIPHART") || cmbclient.Text.Equals("BENHUR") || cmbclient.Text.Equals("HILLSDALE") || cmbclient.Text.Equals("HAMILTON"))
                {
                    chka1.Enabled = true;
                }
                if (cmbclient.Text.Equals("LIPHART") || cmbclient.Text.Equals("BENHUR") || cmbclient.Text.Equals("FORD") || cmbclient.Text.Equals("STEFFY&SON"))
                {
                    chka2.Enabled = true;
                }
                if ( cmbclient.Text.Equals("FORD") || cmbclient.Text.Equals("STEFFY&SON"))
                {
                    chka3.Enabled = true;
                }
                if (cmbclient.Text.Equals("SME"))
                {
                    chka1.Enabled = true;
                    chka3.Enabled = true;
                    chka0.Enabled = true;
                }
                if (cmbclient.Text.Equals("NONE"))
                {
                    chka1.Enabled = true;
                    chka2.Enabled = true;
                    chka3.Enabled = true;
                }
                
                chkscale.Enabled = true;
                chkminlen.Enabled = true;

            }
            else
            {
                chka1.Checked = false;
                chka2.Checked = false;
                chka3.Checked = false;
                chkscale.Checked = false;
                chkminlen.Checked = false;
               
                chka1.Enabled =   false;
                chka2.Enabled =  false;
                chka3.Enabled =  false;
                chkscale.Enabled =   false;
                chkminlen.Enabled = false;

 
            }
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(txtscale.Text, "[^0-9]"))
        {
            MessageBox.Show("Please enter only numbers.");
            txtscale.Text = txtscale.Text.Remove(txtscale.Text.Length - 1);
        }
        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(txtminlen.Text, "[^0-9]"))
            {
                MessageBox.Show("Please enter only numbers.");
                txtminlen.Text = txtminlen.Text.Remove(txtminlen.Text.Length - 1);
            }

        }

        private void checkBox15_CheckedChanged(object sender, EventArgs e)
        {
            if (chkfontsize.Checked == true)
            {
                chk1by8.Enabled = true;
                chk3by32.Enabled = true;
                chk9by64.Enabled = true;
            }
            else
            {
                chk1by8.Checked = false;
                chk3by32.Checked = false;
                chk9by64.Checked = false;
                chk1by8.Enabled = false;
                chk3by32.Enabled = false;
                chk9by64.Enabled = false;

            }

        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void btnpaste_Click(object sender, EventArgs e)
        {
            //check memory
            // Read the clipboard content
            string clipboardText = Clipboard.GetText();

            if (clipboardText.Trim().Length > 1)
            {
                string[] clipboarddata = clipboardText.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
                if (clipboarddata.Length > 0)
                {
                    dgvlog.Rows.Clear();

                    //// Parse the clipboard content (assuming it's tab-separated values)
                    //DataTable dataTable = new DataTable();

                    // Add rows
                    for (int i = 0; i < clipboarddata.Length; i++)
                    {
                        if (!string.IsNullOrWhiteSpace(clipboarddata[i]))
                        {
                            //string drgmark = clipboarddata[i].ToString();
                            dgvlog.Rows.Add(clipboarddata[i].ToString());
                        }
                    }
                    skWinLib.updaterowheader(dgvlog);
                }
            }
        }
        public class DrawingData
        {
            public string Assembly_Mark { get; set; }
            public string Part_Mark { get; set; }

            public string Guid { get; set; }
            public string Name { get; set; }
            public string ProfileType { get; set; }
            public double Length { get; set; }
            public int Secondary { get; set; }

        }
        private void btnselect_Click(object sender, EventArgs e)
        {


            List<DrawingData> MyDrgList = new List<DrawingData>();
            foreach (DataGridViewRow MyRow in dgvlog.Rows)
            {
                string Assembly_Mark = string.Empty;
                //check whether row have drgmark
                if (MyRow.Cells["drgmark"].Value != null)
                {
                    Assembly_Mark = MyRow.Cells["drgmark"].Value.ToString();
                    if (Assembly_Mark.Trim().Length >= 1)
                    {
                        DrawingData MyDrawingData = new DrawingData();
                        MyDrawingData.Assembly_Mark = Assembly_Mark;
                        MyDrgList.Add(MyDrawingData);

                    }
                }
            }

            TSM.Model MyModel = new TSM.Model();
            BinaryFilterExpression filterExpression1 = new BinaryFilterExpression(new AssemblyFilterExpressions.PositionNumber(), StringOperatorType.IS_EQUAL,
                        new StringConstantFilterExpression(string.Join(" ", MyDrgList.Select(d => d.Assembly_Mark).ToList())));

            BinaryFilterExpression filterExpression2 = new BinaryFilterExpression(new ObjectFilterExpressions.Type(), NumericOperatorType.IS_EQUAL,
               new NumericConstantFilterExpression(TeklaStructuresDatabaseTypeEnum.ASSEMBLY));

            var filterDefinition = new BinaryFilterExpressionCollection();
            filterDefinition.Add(new BinaryFilterExpressionItem(filterExpression1, BinaryFilterOperatorType.BOOLEAN_AND));
            filterDefinition.Add(new BinaryFilterExpressionItem(filterExpression2)); ;

            ModelObjectEnumerator MyAssemblys = MyModel.GetModelObjectSelector().GetObjectsByFilter(filterDefinition);
            int Count = MyAssemblys.GetSize();
            Tekla.Structures.Model.Operations.Operation.DisplayPrompt(Count.ToString());

            ArrayList objectsToSelect = new ArrayList();

            foreach (TSM.Assembly MyAssembly in MyAssemblys)
            {
                if (MyAssembly != null)
                {
                    string Assembly_Mark = string.Empty;
                    MyAssembly.GetReportProperty("ASSEMBLY_POS", ref Assembly_Mark);
                    bool check_for_numbering = Assembly_Mark.Contains('?');
                    if (check_for_numbering == false)
                    {
                        //check if already data exist
                        DrawingData MyDrawingData = MyDrgList.FirstOrDefault(d => d.Assembly_Mark == Assembly_Mark);
                        if (MyDrawingData.ProfileType == null)
                        {
                            TSM.ModelObject MyModelObject = MyAssembly.GetMainPart();
                            if (MyModelObject != null)
                            {

                                TSM.Part MainPart = MyModelObject as TSM.Beam;
                                if (MainPart != null)
                                {

                                    double LENGTH = 0;
                                    MainPart.GetReportProperty("LENGTH", ref LENGTH);
                                    string prof_type = string.Empty;
                                    MainPart.GetReportProperty("PROFILE_TYPE", ref prof_type);
                                    int secct = MyAssembly.GetSecondaries().Count;

                                    string Part_Mark = string.Empty;
                                    MyAssembly.GetReportProperty("PART_POS", ref Part_Mark);

                                    //string Name = string.Empty;
                                    //MyAssembly.GetReportProperty("NAME", ref Name);

                                    string Name = MyAssembly.Name;

                                    string guid = string.Empty;
                                    MyAssembly.GetReportProperty("GUID", ref guid);

                                    //Drawing Selection
                                    //var drawingRevision = string.Empty;
                                    //int drawingId = 0;
                                    //MyAssembly.GetReportProperty("DRAWING.ID", ref drawingId);
                                    //if (drawingId != 0)
                                    //{

                                    //    Tekla.Structures.Drawing.AssemblyDrawing MyAssyDrawing = new Tekla.Structures.Drawing.AssemblyDrawing(MyAssembly.Identifier);
                                    //    MyAssyDrawing.GetType().GetProperty("Identifier", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic).SetValue(MyAssyDrawing, new Tekla.Structures.Identifier(drawingId), null);
                                    //    MyAssyDrawing.Select();
                                    //    if (MyAssyDrawing != null)
                                    //    {
                                    //        objectsToSelect.Add(MyAssyDrawing);
                                    //        MyAssyDrawing.GetUserProperty("REVISION.MARK", ref drawingRevision);
                                    //        Console.WriteLine("DrawingRevision: " + drawingRevision);
                                    //    }
                                    //}


                                    //Model Selection
                                    objectsToSelect.Add(MyAssembly);
                                    //Update drawing class
                                    if (MyDrawingData != null)
                                    {
                                        MyDrawingData.Name = Name;
                                        MyDrawingData.Guid = guid;
                                        MyDrawingData.Part_Mark = Part_Mark;
                                        MyDrawingData.Length = LENGTH;
                                        MyDrawingData.Secondary = secct;
                                        MyDrawingData.ProfileType = prof_type;

                                    }
                                }
                            }
                        }

                    }

                }
            }






            //Update Datagrid
            foreach (DataGridViewRow MyRow in dgvlog.Rows)
            {
                string Assembly_Mark = string.Empty;
                //check whether row have drgmark
                if (MyRow.Cells["drgmark"].Value != null)
                {
                    Assembly_Mark = MyRow.Cells["drgmark"].Value.ToString();
                    DrawingData MyDrawingData = MyDrgList.FirstOrDefault(d => d.Assembly_Mark == Assembly_Mark);
                    if (MyDrawingData != null)
                    {
                        if (skTSLib.IsUnitImperial == true)
                        {
                            Tekla.Structures.Datatype.Distance MyDist = new Tekla.Structures.Datatype.Distance(MyDrawingData.Length);
                            MyRow.Cells["drglen"].Value = MyDist.ToFractionalInchesString();
                        }
                        else
                            MyRow.Cells["drglen"].Value = MyDrawingData.Length.ToString("#0.0#");

                        MyRow.Cells["drgname"].Value = MyDrawingData.Name;
                        MyRow.Cells["drgproftype"].Value = MyDrawingData.ProfileType;
                        MyRow.Cells["drgsecs"].Value = MyDrawingData.Secondary;

                    }

                }
            }

            TSM.UI.ModelObjectSelector _selector = new TSM.UI.ModelObjectSelector();
            _selector.Select(objectsToSelect);
            ////get all the selected objects (assembly will be faster)
            //TSM.ModelObjectEnumerator enum_for_beam_pick = _selector.GetSelectedObjects();
            //int ct = enum_for_beam_pick.GetSize();
            //MyModel.CommitChanges();
        }
    
    }
    
}
